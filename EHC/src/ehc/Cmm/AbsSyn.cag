%%[doesWhat doclatex
C subset, straightforwardly modelled after C--.

See http://www.cminusminus.org/

Although not actively developed anymore, the idea still lives inside GHC, though adapted to the specific needs of the STG machinery.
The purpose here is to retain as much as possible from the original design, that is, be an intermediate slightly above assembly level language in front
of (say) C, or llvm.
%%]

%%[(8 cmm)
DATA AGItf
  | AGItf			module			: Module

DATA Module
  | Mod				moduleNm		: Nm
  					decls			: TopLevelL
%%]

%%[(8 cmm)
DATA TopLevel
  | Section			snm				: String
  					sections		: SectionL
  | Decl			decl			: Decl
  | Proc			proc			: Proc

TYPE TopLevelL		= [TopLevel]

SET AllTopLevel		= TopLevel TopLevelL
%%]

%%[(8 cmm)
DATA Section
  | Decl			decl			: Decl
  | Proc			proc			: Proc
  | Datum			datum			: Datum
  -- | Span				expr1			: Expr
  -- 					expr2			: Expr
  -- 					sections		: SectionL

TYPE SectionL		= [Section]
%%]

%%[(8 cmm)
DATA Decl
  | Import			imports			: ImportL
  | Export			exports			: ExportL
  | Const			mbTy			: MbTy
  					nm				: Nm
  					expr			: Expr
  | ConstArray		mbTy			: MbTy
  					nm				: Nm
  					exprs			: ExprL
  | Typedef			ty				: Ty
  					nms				: NmL
  | Regs			isInvariant		: Bool
  					regs			: Regs
  -- | Pragma			nm				: Nm
  -- 					pragma			: PragmaL
  | Target			targets			: TargetL
  | Comment			str				: String

TYPE DeclL			= [Decl]
%%]

%%[(8 cmm)
DATA Target
  | Memsize			size			: Int
  | Byteorder		isLittle		: Bool
  | Pointersize		size			: Int
  | Wordsize		size			: Int

TYPE TargetL		= [Target]

DATA Import
  | Imp				nm				: Nm
  | ImpAs			snmAs			: String
  					nm				: Nm

TYPE ImportL		= [Import]

DATA Export
  | Exp				nm				: Nm
  					ty				: Ty
  | ExpAs			nm				: Nm
  					ty				: Ty
  					snmAs			: String

TYPE ExportL		= [Export]

DATA Datum
  | Nm				nm				: Nm
  | Align			align			: Int
  | Ty				ty				: Ty
  					mbSize			: MbExpr
  					mbInit			: MbInit

TYPE DatumL			= [Datum]

SET AllDatum		= Datum DatumL

DATA Init
  | Seq				exprs			: ExprL
  | Str				str				: String
  | Str16			str				: String16

TYPE MbInit			= MAYBE Init

SET AllInit			= Init MbInit

DATA String16
  | Unicode			str				: String

DATA Regs
  | Regs			kind			: {Maybe String}
  					ty				: Ty
  					nmInits			: RegNmInitL

DATA RegNmInit
  | NmInit			nm				: Nm
  					mbIs			: {Maybe String}

TYPE RegNmInitL		= [RegNmInit]

SET AllTopNoMod		= AllTopLevel
					  Section SectionL
					  Decl DeclL
					  Target TargetL
					  Import ImportL
					  Export ExportL
					  AllDatum
					  AllInit
					  Regs RegNmInit RegNmInitL
					  String16
SET AllTop			= Module
					  AllTopNoMod
%%]

%%[(8 cmm)
DATA BodyDecl
  | Decl			decl			: Decl
  | StackDecl		datums			: DatumL
  | Stmt			stmt			: Stmt

TYPE BodyDeclL		= [BodyDecl]

DATA Body
  | Body			decls			: BodyDeclL

TYPE MbBody			= MAYBE Body

SET AllBody			= BodyDecl BodyDeclL
					  Body MbBody
					  AllDatum
%%]

%%[(8 cmm)
DATA Proc
  | Proc			mbConv			: MbConv
  					nm				: Nm
  					formals			: FormalL
  					body			: Body

DATA Conv
  | Foreign			conv			: String

TYPE MbConv			= MAYBE Conv
%%]

%%[(8 cmm)
DATA Formal
  | Formal			mbKind			: {Maybe String}
  					isInvariant		: Bool
  					ty				: Ty
  					nm				: Nm

TYPE FormalL		= [Formal]

SET AllFormal		= Formal FormalL
%%]

%%[(8 cmm)
DATA Actual
  | Actual			mbKind			: {Maybe String}
  					expr			: Expr

TYPE ActualL		= [Actual]

DATA Stmt
  | If				condExpr		: Expr
  					thenBody		: Body
  					elseMbBody		: MbBody
  | Switch			expr			: Expr
  					arms			: ArmL
  -- | Span				expr1			: Expr
  -- 					expr2			: Expr
  -- 					body			: Body
  | Assign			lval			: LValueL
  					rhs				: ExprL
  -- | %%Assign
  | Call			knames			: KindNameL
  					mbConv			: MbConv
  					expr			: Expr
  					actuals			: ActualL
  					targets			: Targets
  					aliasflows		: FlowAliasL
  | Jump			mbConv			: MbConv
  					expr			: Expr
  					actuals			: ActualL
  					targets			: Targets
  | Ret				mbConv			: MbConv
  					mbCont			: MbRetCont
  					actuals			: ActualL
  | Label			nm				: Nm
  | Cont			nm				: Nm
  					knames			: KindNameL
  | Goto			expr			: Expr
  					targets			: Targets
  | Cut				expr			: Expr
  					actuals			: ActualL
  					flows			: FlowL

  -- support for lazy representation

DATA RetCont
  | Cont			expr1			: Expr
  					expr2			: Expr

TYPE MbRetCont		= MAYBE RetCont
  					
DATA KindName
  | KindName		mbKind			: {Maybe String}
  					nm				: Nm

TYPE KindNameL		= [KindName]

DATA Arm
  | Case			ranges			: RangeL
  					body			: Body

TYPE ArmL			= [Arm]

DATA Range
  | Range1			expr1			: Expr
  | Range2			expr1			: Expr
  					expr2			: Expr

TYPE RangeL			= [Range]

DATA LValue
  | Nm				nm				: Nm
  | Typed			ty				: Ty
  					expr			: Expr
  					mbAssert		: MbAssert

TYPE LValueL		= [LValue]

DATA Flow
  | AlsoTo			alsos			: AlsoL
  					nms				: NmL
  | AlsoAborts
  | NeverReturns

TYPE FlowL			= [Flow]

DATA Also
  | Cuts
  | Unwinds
  | Returns

TYPE AlsoL			= [Also]

DATA Alias
  | Reads			nms				: NmL
  | Writes			nms				: NmL

DATA FlowAlias
  | Flow			flow			: Flow
  | Alias			alias			: Alias

TYPE FlowAliasL		= [FlowAlias]

DATA Targets
  | Targets			nms				: NmL

SET	AllStmt			= AllBody
 					  Proc
					  Conv MbConv
					  AllFormal
					  Actual ActualL
					  Stmt
					  RetCont MbRetCont
					  KindName KindNameL
					  Arm ArmL
					  Range RangeL
					  LValue LValueL
					  Flow FlowL
					  Also AlsoL
					  Alias
					  FlowAlias FlowAliasL
					  Targets
%%]

%%[(8 cmm)
DATA Expr
  -- Regular constants
  | Int				val				: Integer
  					mbTy			: MbTy
  | Rat				val				: Rational
  					mbTy			: MbTy
  | Float			val				: Rational
  					mbTy			: MbTy
  | Char			val				: Char
  					mbTy			: MbTy
  | Str				val				: String
  					mbTy			: MbTy

  -- Special constants
  | Lit				val				: Lit

  -- Variable
  | Nm				nm				: Nm

  -- Operations
  | Op				op				: Op
  					exprs			: ExprL
  
  -- Memory node
  | Nd				elts			: FldExprL
  | NdFldGet		expr			: Expr
  					fld				: Fld

  -- Support for lazy representation
  | Eval			nm				: Nm


  -- Misc
  | Round			val				: Round
  | Typed			ty				: Ty
  					expr			: Expr
  					mbAssert		: MbAssert

TYPE ExprL			= [Expr]

TYPE FldExpr		= (Fld,Expr)
TYPE FldExprL		= [FldExpr]

SET AllFldExpr 		= FldExpr FldExprL

TYPE MbExpr			= MAYBE Expr

DATA Assert
  | AlignedIn		aligned			: Int
  					nms				: NmL
  | InAligned		nm				: Nm
  					mbAligned		: {Maybe Int}

TYPE MbAssert		= MAYBE Assert

DATA Lit
  | MInf			sz				: Int
  | PInf			sz				: Int
  | MZero			sz				: Int
  | PZero			sz				: Int
  | False
  | True

DATA Round
  | Down
  | Nearest
  | Up
  | Zero

DATA Op
  | Op				code			: OpCode
  					osz				: Int

DATA OpCode
  -- float comparisons
  | FEq				
  | FNe				
  | FGe				
  | FGt				
  | FLe				
  | FLt				
  | FOrdered		
  | FUnordered		
  
  -- float arithmetic
  | FAbs			
  | FAdd			
  | FDiv			
  | FMul			
  | FMulx			
  | FNeg			
  | FSqrt			
  | FSub			
  
  -- float conversions
  | F2F				sz				: Int
  | I2F				sz				: Int
  | F2I				sz				: Int

  -- float misc
  | NaN				sz				: Int
  
  -- comparisons
  | Eq
  | Ne
  | Ge
  | Gt
  | Le
  | Lt
  | Geu
  | Gtu
  | Leu
  | Ltu

  -- arithmetic
  | Add	
  | Addc
  | Carry
  | Sub	
  | Subb
  | Borrow
  | Neg	
  | Mul	
  | Mulux
  | Mulx
  | Div	
  | Quot
  | Divu
  | Mod	
  | Rem	
  | Modu
  
  -- boolean conversions
  | Bit
  | Bool
  
  -- boolean operations
  | Conjoin
  | Disjoin
  | Not
  
  -- bit operations
  | And		
  | Com		
  | Or		
  | Xor		
  | RotL	
  | RotR	
  | ShL		
  | ShRA	
  | ShRL	
  | PopCnt
  
  -- width changing conversions
  | LoBits			sz				: Int
  | SX				sz				: Int
  | ZX				sz				: Int
  
  -- overflow checking
  | AddOverflows	
  | DivOverflows	
  | MulOverflows	
  | MuluOverflows	
  | QuotOverflows	
  | SubOverflows

SET AllOp			= Op OpCode

SET	AllExpr			= Expr ExprL
					  MbExpr
					  AllFldExpr
					  Assert MbAssert
					  AllOp
					  Lit
					  Round
%%]

%%[(8 cmm)
DATA Ty
  -- C-- types
  | Bits			bits			: Bits
  | Nm				nm				: Nm

  -- C types
  | Struct			flds			: StructFldL
  -- | Ptr				ty				: Ty

TYPE MbTy			= MAYBE Ty

DATA StructFld
  | Fld				nm				: Nm
  					ty				: Ty

TYPE StructFldL		= [StructFld]

DATA Bits
  | Size			sz				: Int
  | Ptr				mbGc			: MbGC
  | Word
  -- | WordOrPtr

DATA GC
  | GCOwned
  | NoGC

TYPE MbGC			= MAYBE GC

SET	AllTy			= Ty MbTy
					  StructFld StructFldL
					  Bits
					  GC MbGC

%%]

%%[(8 cmm)
SET AllNTNoMod		= AllTopNoMod AllStmt AllExpr AllTy
SET AllNT			= Module AllNTNoMod
%%]
