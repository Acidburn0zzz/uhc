%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Attempt to make a more compact representation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs module {%{EH}Cmm.Trf.SimplifyLocalNames}
%%]

%%[(8 codegen cmm) hs import(Data.Maybe,{%{EH}Base.Common} hiding (Range),{%{EH}Cmm})
%%]

%%[(8 codegen cmm) hs import(UHC.Util.Utils)
%%]

%%[(8 codegen cmm) hs import(qualified Data.Map as Map, qualified Data.Set as Set)
%%]

%%[(8 codegen cmm).WRAPPER ag import({Cmm/AbsSyn})
WRAPPER AGItf
%%]


%%[(8 codegen cmm)
%%]
PRAGMA nocycle

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(cmmModTrfSimplifyLocalNames)
cmmModTrfSimplifyLocalNames :: Module -> Module
cmmModTrfSimplifyLocalNames cmmmod
  =  let  t = wrap_AGItf (sem_AGItf (AGItf_AGItf cmmmod)) Inh_AGItf
     in   trf_Syn_AGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm)
ATTR AllNT [ | | trf: SELF ]
ATTR AGItf [ | | trf: Module ]
%%]

