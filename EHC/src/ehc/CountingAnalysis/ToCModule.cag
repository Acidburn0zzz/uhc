%%[(8 counting) hs module {%{EH}CountingAnalysis.ToCModule} import(Data.Maybe,Data.Set (Set),qualified Data.Set as S,Data.Map (Map),qualified Data.Map as M, qualified Data.Map as Data.Map)
%%]

%%[(8 counting) hs import({%{EH}LamInfo},{%{EH}Base.Common},{%{EH}Base.HsName.Builtin},{%{EH}Gam.DataGam},{%{EH}Core},{%{EH}Ty})
%%]

%%[(8 counting) hs import({%{EH}CountingAnalysis})
%%]

%%[(8 counting) hs import(UHC.Util.Utils)
%%]

%%[(8 counting) hs import({%{EH}Base.Target (FFIWay)}, {%{EH}Foreign (ForeignEnt)}, {%{EH}Ty (Ty)})
%%]

Debugging
%%[(8 counting) hs import(Debug.Trace)
%%]

%%[(8 counting).WRAPPER ag import({CountingAnalysis/AbsSyn})
WRAPPER Module
%%]


%%[(99 counting)
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 counting) hs export(toCModule)
toCModule :: Module -> CModule
toCModule m = panic "toCModule"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 counting) ag

ATTR Module [ | | trf: {CModule} ]
ATTR Expr [ | | trf: {CExpr} ]
ATTR Const [ | | trf: {CExpr} ]

SEM Module
  | Module
    lhs.trf = CModule_Mod @loc.moduleNm @loc.exports @loc.imports @loc.declMetas @e.trf
    loc.(moduleNm, exports, imports, declMetas) = @extra

SEM Expr
  | VarLocal
    lhs.trf = CExpr_Var @extra
  | VarImport
    lhs.trf = CExpr_Var @extra
  | Const
    lhs.trf = undefined
  | Abs
    lhs.trf = undefined
  | AppLocal
    lhs.trf = undefined
  | AppImport
    lhs.trf = undefined
  | AppConst
    lhs.trf = undefined
  | Let
    lhs.trf = undefined
  | LetBang
    lhs.trf = undefined
  | Con
    lhs.trf = undefined
  | Tup
    lhs.trf = undefined
  | CaseCon
    lhs.trf = undefined
  | CaseTup
    lhs.trf = undefined
  | CaseConst
    lhs.trf = undefined
  | FFI
    lhs.trf = CExpr_FFI @loc.callConv @loc.safety @loc.empEnt @ty
    loc.(callConv, safety, empEnt) = @extra
  | Ann
    lhs.trf = undefined
  | Error
    lhs.trf = panic $ "Translating error expression: " ++ @e

SEM Const
  | Int
    lhs.trf = CExpr_Int @c
  | Char
    lhs.trf = CExpr_Char @c
  | String
    lhs.trf = CExpr_String @c
%%[[(97 core)
  | Integer
    lhs.trf = CExpr_Integer @c
%%]]
%%]