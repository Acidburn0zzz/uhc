%%[(8 counting) hs module {%{EH}CountingAnalysis.ExtractVar} import(Data.Maybe,Data.Set (Set),qualified Data.Set as Set,Data.Map hiding (foldr),qualified Data.Map as Map)
%%]

%%[(8 counting) hs import({%{EH}Base.HsName (HsName)}, {%{EH}Core}, {%{EH}CodeGen.Tag (CTag)})
%%]

%%[(8 counting) hs import({%{EH}CountingAnalysis})
%%]

%%[(8 counting) hs import({%{EH}Base.Target (FFIWay)}, {%{EH}Foreign (ForeignEnt)}, {%{EH}Ty (Ty)})
%%]

%%[(8 counting) ag import({CountingAnalysis/AbsSyn})
WRAPPER *
%%]

%%[(99 counting)
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% access functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 counting) hs export (ExtractVar(..))
class ExtractVar a where
  extractAnnVars :: a -> Set HsName
  extractAnnVars a = let (s,_,_) = extractVars a in s
  extractTyVars :: a -> Set HsName
  extractTyVars a =  let (_,s,_) = extractVars a in s
  extractSchemeVars :: a -> Set HsName
  extractSchemeVars a = let (_,_,s) = extractVars a in s

  extractVars :: a -> (Set HsName, Set HsName, Set HsName)

instance ExtractVar Annotation where
  extractVars a = (fav_Syn_Annotation syn, ftv_Syn_Annotation syn, fsv_Syn_Annotation syn)  
    where syn = wrap_Annotation (sem_Annotation a) Inh_Annotation

instance ExtractVar Type where
  extractVars a = (fav_Syn_Type syn, ftv_Syn_Type syn, fsv_Syn_Type syn)  
    where syn = wrap_Type (sem_Type a) Inh_Type

instance ExtractVar Env where
  extractVars env = (ks, ks, ks)
    where ks = Set.fromList $ Map.keys env

instance ExtractVar RhoScheme where
  extractVars a = (fav_Syn_RhoScheme syn, ftv_Syn_RhoScheme syn, fsv_Syn_RhoScheme syn)  
    where syn = wrap_RhoScheme (sem_RhoScheme a) Inh_RhoScheme

instance ExtractVar Scheme where
  extractVars a = (fav_Syn_Scheme syn, ftv_Syn_Scheme syn, fsv_Syn_Scheme syn)  
    where syn = wrap_Scheme (sem_Scheme a) Inh_Scheme

instance ExtractVar RhoType where
  extractVars a = (fav_Syn_RhoType syn, ftv_Syn_RhoType syn, fsv_Syn_RhoType syn)  
    where syn = wrap_RhoType (sem_RhoType a) Inh_RhoType

instance ExtractVar Constraint where
  extractVars a = (fav_Syn_Constraint syn, ftv_Syn_Constraint syn, fsv_Syn_Constraint syn)  
    where syn = wrap_Constraint (sem_Constraint a) Inh_Constraint

instance ExtractVar ConstraintAnn where
  extractVars a = (fav_Syn_ConstraintAnn syn, ftv_Syn_ConstraintAnn syn, fsv_Syn_ConstraintAnn syn)  
    where syn = wrap_ConstraintAnn (sem_ConstraintAnn a) Inh_ConstraintAnn

instance ExtractVar Constraints where
  extractVars a = (fav_Syn_Constraints syn, ftv_Syn_Constraints syn, fsv_Syn_Constraints syn)  
    where syn = wrap_Constraints (sem_Constraints a) Inh_Constraints
 
%%]
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Freevars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 counting) ag

ATTR * [ | | fav USE {Set.union} {Set.empty}: {Set HsName} ]
ATTR * [ | | ftv USE {Set.union} {Set.empty}: {Set HsName} ]
ATTR * [ | | fsv USE {Set.union} {Set.empty}: {Set HsName} ]


SEM Annotation
  | Var
    lhs.fav = Set.singleton @v

SEM Type
  | Var
    lhs.ftv = Set.singleton @v

SEM Scheme
  | Var
    lhs.fsv = Set.singleton @v
  | Forall
    +ftv = (\x -> x Set.\\ @ts)
    +fav = (\x -> x Set.\\ @as)
    
%%]