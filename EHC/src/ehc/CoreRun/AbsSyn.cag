%%[(0 corerun)
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[doesWhat.CBind doclatex
AST for CoreRun, a runnable (geared towards efficiency) representation of Core.

It is not the intention to define AG semantics over this AST because non AG supported types (like array) are used.

Global assumptions:
- everything usually accessed by a key via a map now is done via an array
- A-normal form, i.e. arguments by name
- Operational semantics: once a lam is entered is computes to WHNF
- All is tail recursive except when wrapped in Exp_Ret (no longer)
- All is non tail recursive except when wrapped in Exp_Tail
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Abstract syntax for Core code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
DATA AGItf
  | AGItf       module          : Mod
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Top level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
DATA Mod
  | Mod         ref2nm			: {Ref2Nm}		-- inverse lookup of locally introduced binding RRef's, 20150817 TBD: to be replaced with exports (see below)
                moduleNm        : {HsName}
                moduleNr        : {Maybe Int}	-- sequence nr, index later into global table of modules; 20150902 TBD: remove, the Expl run variant does not depend on it anymore, the Impl variant still does
                stkDepth        : {Int}			-- max depth of stack for setting up globals
                imports         : ImportL
                exports         : ExportL
                metas           : MetaL
                binds           : {CRArray Bind}
                mbbody			: MbExp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Imports
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
DATA Import
  | Import		nm				: {HsName}

TYPE ImportL		= [Import]

SET AllImport		= Import ImportL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Exports
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
DATA Export
  | Export		nm				: {HsName}
             	offset			: {Int}

TYPE ExportL		= [Export]

SET AllExport		= Export ExportL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
DATA Meta
  | Data		tyNm			: {HsName}
  				dataCons		: DataConL

TYPE MetaL		= [Meta]

SET AllMeta		= Meta MetaL

-- Equivalent of data type def holding the minimal pieces of info required for codegen
DATA DataCon
  | Con			conNm			: {HsName}
  				tagNr			: {Int}				-- runtime tag
  				-- arity			: {Int}				-- nr of fields, excluding tag

TYPE DataConL	= [DataCon]

SET AllDataCon	= DataCon DataConL

SET AllMetaNT 	= AllMeta AllDataCon
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expression
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
DATA SExp
  -- base cases
  | Var         ref             : {RRef}
  | Int         int             : {Int}
  | Char        char            : {Char}
  | String      str             : {String}
%%[[97
  | Integer     integer         : {Integer}
%%]]
  -- Debug only
  | Dbg			msg				: {String}
%%]

%%[(8 corerun)
DATA Exp
  -- base cases
  | SExp        sexpr           : SExp

  -- node constructor, tuple or data constructor, determined by tag
  | Tup         tag             : {Int}
                args			: {CRArray SExp}

  -- let bindings, recursiveness allowed, yes/no eval made explicit in rhs of binding
  | Let         firstOff		: {Int}			-- offset of first binding
  				ref2nm			: {Ref2Nm}		-- inverse lookup of locally introduced binding RRef's
                binds           : {CRArray Bind}
                body            : Exp

  -- application, abstraction
  | App         func            : Exp
                args            : {CRArray SExp}
  | Lam         mbNm			: {Maybe HsName}	-- possibly bound to name
  				nrArgs          : {Int}				-- nr of arguments, 0 means it is a thunk
                stkDepth        : {Int}				-- max depth of stack
                ref2nm			: {Ref2Nm}			-- inverse lookup of locally introduced binding RRef's
                body            : Exp

  -- thunking, forcing, partial applications
  | Force		expr			: Exp
  
  -- Tail context
  | Tail		expr			: Exp

  -- case
  | Case        expr            : SExp
                alts            : {CRArray Alt}

  -- FFI call
  | FFI         prim        	: {RunPrim}
                args			: {CRArray SExp}

TYPE MbExp		= MAYBE Exp

SET AllExp		= Exp MbExp
  

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Binding: just an Exp in an Array, addressing implicit
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Case alternative + pattern + pattern binding
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
DATA Alt
  | Alt         ref2nm			: {Ref2Nm}		-- inverse lookup of locally introduced binding RRef's
                -- pat             : Pat
                expr            : Exp
%%]

%%[(8 corerun)
DATA Pat
  | Con         tag             : {Int}
%%[[97
  -- | BoolExpr    expr            : Exp
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Sets of NT's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
SET AllCodeNT
  = Mod SExp AllExp Alt Pat

SET AllNT
  = AllCodeNT AllExport AllImport AllMetaNT
%%]
