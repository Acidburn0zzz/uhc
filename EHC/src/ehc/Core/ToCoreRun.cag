%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Code generation for CoreRun
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[doesWhat doclatex
Construct a more efficient CoreRun representation assuming a memory model where
\begin{itemize}
\item each module has an index, each entry an index into the module
\item each lambda starts a new frame, holding also let bindings local to it, indexed by level and offset
\item each case alternative opens a constructor of which fields are referred to by scrutinee + field offset
\end{itemize}

Offsets start at 0.
%%]

%%[(8 corerun) hs module {%{EH}Core.ToCoreRun} import({%{EH}Base.Common},{%{EH}Base.TermLike},{%{EH}Opts},{%{EH}Ty},{%{EH}Core})
%%]

%%[(8 corerun) hs import(Data.Maybe, qualified Data.Map as Map, Data.Char)
%%]
%%[(8 corerun) hs import(UHC.Util.Utils, qualified UHC.Util.FastSeq as Seq)
%%]

%%[(8 corerun) hs import({%{EH}Base.HsName.Builtin},{%{EH}CodeGen.BuiltinSizeInfo},{%{EH}CodeGen.BuiltinPrims},{%{EH}CodeGen.BasicAnnot})
%%]

%%[(8 corerun) hs import(qualified {%{EH}CoreRun} as CR)
%%]
%%[(8 corerun) hs import(qualified {%{EH}CoreRun.Prim} as CR)
%%]

%%[(8888 corerun) hs import({%{EH}CodeGen.CVar})
%%]

%%[(8 corerun) hs import({%{EH}Foreign.Extract})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Interface
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun).WRAPPER ag import({Core/AbsSyn},{Core/CommonLev},{Core/CommonLevLamPerTopLam},{Core/CommonBindNm},{Core/CommonPred},{Core/CommonCtxtPred},{Core/CommonFFI})
WRAPPER CodeAGItf
%%]

%%[(8 corerun) hs export(cmod2CoreRun', cmod2CoreRun)
cmod2CoreRun'
  :: EHCOpts
     -> Int         	-- sequence nr of module (offset), used to create global per module references
     -> CR.Nm2RefMp		-- outer bindings
     -> CModule
     -> ( CR.Mod    	-- generated CoreRun
        , CR.Nm2RefMp  	-- name to ref mapping of toplevel bindings
        )
cmod2CoreRun' opts modNr nm2ref cmod
  =  ( crm_Syn_CodeAGItf t
     , nm2refGath_Syn_CodeAGItf t
     )
  where t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod))
              (Inh_CodeAGItf
                 { modNr_Inh_CodeAGItf = modNr
                 , opts_Inh_CodeAGItf = opts
                 , nm2ref_Inh_CodeAGItf = nm2ref
                 })

cmod2CoreRun :: CModule -> CR.Mod
cmod2CoreRun m = m'
  where (m',_) = cmod2CoreRun' defaultEHCOpts 0 Map.empty m
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Debugging
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun) hs
-- | Debug info is embedded in Exp
dbg = CR.Exp_Dbg
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
-- | Options
ATTR CodeAGItf AllCodeNT [ opts: EHCOpts | | ]
%%]

%%[(8 corerun)
-- | Module (sequence)nr, offset
ATTR CodeAGItf AllCodeNT [ modNr: Int | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Binding requires thunking?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun) hs
-- | What to do with binding in terms of thunking/forcing?
data ToBe
  = ToBe_Thunked
  | ToBe_Forced
  | ToBe_LeftAsIs
  deriving Eq
%%]

%%[(8 corerun)
SEM CBound
  | Bind Val    loc         .   toBe            =   let mba@(~(Just (_,w))) = whatExprMbApp @expr.whatBelow
                                                        isVar     = isJust $ whatExprMbVar @expr.whatBelow
                                                        isGlbVar  = isVar && @lhs.isGlobal
                                                        isApp     = isJust mba
                                                        isTup     = isApp && whatExprIsTup w
                                                        isWHNF    = whatExprIsWHNF @expr.whatBelow
                                                        isNotWHNF = not isWHNF
                                                    in  case @lhs.evalCtx of
                                                          EvalCtx_Eval
                                                            | isApp      -> ToBe_LeftAsIs
                                                            | isVar      -> ToBe_Forced
                                                            | isNotWHNF  -> ToBe_Forced
                                                          EvalCtx_Thunk 
                                                            | isTup      -> ToBe_LeftAsIs
                                                            | isGlbVar   -> ToBe_Thunked
                                                            | isNotWHNF  -> ToBe_Thunked
                                                          _              -> ToBe_LeftAsIs
                            .   isToBeThunked   =   @toBe == ToBe_Thunked
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Level, see also Core/CommonLev
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
-- A thunk runs in its own environment, equivalent to a parameterless Lam, hence the lev increase
SEM CBound
  | Bind Val    loc         .   lev             =   if @isToBeThunked then @lhs.lev + 1 else @lhs.lev
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is tail recursive position/context? Default: False
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
ATTR CExpr AllAlt [ isTailRec: Bool | | ]

SEM CModule
  | Mod			loc			.	isTailRec		=	False

SEM CBound
  | Bind Val	loc  		.	isTailRec		=	@isToBeThunked

SEM CExpr
  | Lam			body  		.	isTailRec		=	True
  | App			loc  		.	isTailRec		=	False

SEM CPatFld
  | Fld			loc  		.	isTailRec		=	False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name mapping: references, gathering, and distribution
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
-- | Thread offset as state throughout places where bindings are introduced.
-- Invariant: offset is reset to 0 whenever `lev` is incremented.
-- Local offset for reference
ATTR AllExpr [ | refOffset: Int | ]

SEM CModule
  | Mod         expr        .   refOffset       =   0

SEM CExpr
  | Lam         (loc.refOffset, body.refOffset) =   if @isTopLam
                                                    then (0,1)
                                                    else (@lhs.refOffset, @lhs.refOffset + 1)
                lhs         .   refOffset       =   @lhs.refOffset

SEM CBind
  | Bind        lhs         .   refOffset       =   @lhs.refOffset + 1
                loc         .   ref             =   if @lhs.isGlobal
                                                    then CR.RRef_Glb @lhs.modNr @lhs.refOffset
                                                    else CR.RRef_Loc @lhs.lev   @lhs.refOffset

SEM CBound
  | Bind Val    expr        .   refOffset       =   if @isToBeThunked then 0              else @lhs.refOffset
                lhs         .   refOffset       =   if @isToBeThunked then @lhs.refOffset else @expr.refOffset

SEM CAlt
  | Alt         expr        .   refOffset       =   @lhs.refOffset
                lhs         .   refOffset       =   @lhs.refOffset

-- Max offset encountered
ATTR AllAlt CExpr AllBind [ | | refOffsetMax USE {`max`} {0} : Int ]

SEM CExpr
  | Let         loc         .   refOffsetMax    =   max @binds.refOffsetMax @body.refOffsetMax
  | Lam         loc         .   refOffsetMax    =   max @body.refOffset @body.refOffsetMax

SEM CAlt
  | Alt         lhs         .   refOffsetMax    =   max @expr.refOffset @expr.refOffsetMax

SEM CBound
  | Bind Val    lhs         .   refOffsetMax    =   if @isToBeThunked then @lhs.refOffset else max @expr.refOffset @expr.refOffsetMax

-- Name gathering
ATTR CodeAGItf CModule AllBind CExpr [ | | nm2refGath USE {`Map.union`} {Map.empty} : {CR.Nm2RefMp} ]

SEM CModule
  | Mod         loc         .   nm2refNew       =   @expr.nm2refGath

SEM CExpr
  | Lam         loc         .   nm2refNew       =   Map.insert @bind.nm (CR.RRef_Loc @lev @refOffset) @body.nm2refGath
                lhs         .   nm2refGath      =   if @isTopLam
                                                    then Map.empty
                                                    else @nm2refNew
  | Let         (loc.nm2refNew, lhs.nm2refGath) =   if @isGlobal
                                                    then (Map.empty, @binds.nm2refGath `Map.union` @body.nm2refGath)        -- TBD: shadowing not dealt with properly for inverse
                                                    else (@binds.nm2refGath, Map.empty)

SEM CBind
  | Bind        loc         .   nm2refGath      =   Map.singleton @nm @ref

SEM CBound
  | Bind Val    loc         .   nm2refNew       =   if @isToBeThunked then @expr.nm2refGath else Map.empty      -- TBD: shadowing not dealt with properly for inverse

SEM CAlt
  | Alt         loc         .   nm2refNew       =   Map.fromList [ (n, CR.RRef_Fld @lhs.scrutRef i) | (n,i) <- zip @pat.fldNmL [0..] ]

-- Name distribution
ATTR CodeAGItf CModule AllExpr [ nm2ref: {CR.Nm2RefMp} | | ]

SEM CModule
  | Mod         expr        .   nm2ref          =   @nm2refNew `Map.union` @lhs.nm2ref

SEM CExpr
  | Lam         loc         .   nm2ref          =   if @isTopLam
                                                    then @nm2refNew `Map.union` @lhs.nm2ref
                                                    else @lhs.nm2ref
  | Let         (binds.nm2ref, body.nm2ref)     =   if @isGlobal
                                                    then (@lhs.nm2ref, @lhs.nm2ref)
                                                    else ( case @categ of
                                                             CBindCateg_Rec -> @binds.nm2refGath `Map.union` @lhs.nm2ref
                                                             _              -> @lhs.nm2ref `Map.union` @binds.nm2refGath
                                                         , @binds.nm2refGath `Map.union` @lhs.nm2ref
                                                         )
                
SEM CAlt
  | Alt         expr        .   nm2ref          =   @nm2refNew `Map.union` @lhs.nm2ref

-- Ref to scrutinee
ATTR AllAlt [ scrutRef: {CR.RRef} | | ]

SEM CExpr
  | Case        alts        .   scrutRef        =   maybe CR.noRRef (\n -> maybe (CR.RRef_Dbg n) id $ Map.lookup n @lhs.nm2ref) $ whatExprMbVar @expr.whatBelow
%%]

%%[(8 corerun)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation: App as args ++ func
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
ATTR CExpr [ | | creAppArgL: {[CR.Exp]}  creAppFun: {Bool -> CR.CRArray CR.Exp -> CR.Exp} ]

SEM CExpr
  | App         loc         .   creAppArgL  =   (snd $ head @arg.crb) : @func.creAppArgL
                            .   creAppFun   =   @func.creAppFun
  | Tup         loc         .   creAppFun   =   \_ -> CR.Exp_Tup @tag
  | FFI         loc         .   creAppFun   =   \_ -> @creMk
  | * - App Ann Tup FFI
                loc         .   creAppFun   =   \isTailRec -> tailrec isTailRec . CR.Exp_App @cre
  | * - App Ann loc         .   creAppArgL  =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation: Lam as body + args
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
ATTR CExpr [ | | creLamArgL: {[HsName]}  creLamBody: {CR.Exp} ]

SEM CExpr
  | Lam         loc         .   creLamArgL  =   @bind.nm : @body.creLamArgL
                            .   creLamBody  =   @body.creLamBody
  | * - Lam Ann loc         .   creLamArgL  =   []
                            .   creLamBody  =   @cre
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation: utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun) hs
-- | Wrap context saving if not at tail recursive position
tailrec :: Bool -> CR.Exp -> CR.Exp
tailrec isTailRec = if isTailRec then id else CR.Exp_Ret

-- | Wrap forcing if at tail recursive position
taileval :: Bool -> CR.Exp -> CR.Exp
taileval isTailRec = if isTailRec then CR.Exp_Force else id
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation: expr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun)
ATTR CExpr [ | | crse: {CR.SExp} ]
%%]

%%[(8 corerun)
SEM CExpr
  | Int         loc         .   crse            =   CR.SExp_Int @int
  | Char        loc         .   crse            =   CR.SExp_Char @char
  | String      loc         .   crse            =   CR.SExp_String @str
  | Var         loc         .   crse            =   CR.SExp_Var $ fromMaybe (CR.RRef_Dbg @nm) $ Map.lookup @nm @lhs.nm2ref
%%[[97
  | Integer     loc         .   crse            =   CR.SExp_Integer @integer
%%]]
  | * - Int Char String Var
%%[[97
        Integer
%%]]
                loc         .   crse            =   panic "Core.ToCoreRun.CExpr.crse"
%%]

%%[(8 corerun)
ATTR CExpr [ | | cre: {CR.Exp} ]
%%]

%%[(8 corerun)
SEM CExpr
  | Int Char String
%%[[97
    Integer
%%]]
                loc         .   cre             =   CR.Exp_SExp @crse
  | Var         loc         .   cre             =   taileval @lhs.isTailRec $ CR.Exp_SExp @crse
  | Lam         loc         .   cre             =   if @isTopLam
                                                    then CR.Exp_Lam @lev (length @creLamArgL) (@refOffsetMax) (CR.nm2RefMpInverse @nm2refNew) @body.creLamBody
                                                    else dbg "Core.ToCoreRun.CExpr.Lam.cre" -- TBD
  | App         loc         .   cre             =   if @isTopApp'
                                                    then @creAppFun @lhs.isTailRec $ CR.mkCRArray $ reverse @creAppArgL
                                                    else dbg "Core.ToCoreRun.CExpr.App.cre" -- TBD
  | Tup         loc         .   cre             =   CR.Exp_Tup @tag CR.emptyCRArray
  | Let         loc         .   cre             =   if @isGlobal
                                                    then @body.cre
                                                    else CR.Exp_Let @lhs.lev @lhs.refOffset (CR.nm2RefMpInverse @nm2refNew) (CR.mkCRArray $ map snd @binds.crb) @body.cre
  | Case        loc         .   cre             =   CR.Exp_Case @expr.crse $ CR.mkCRArray @alts.cra
  | FFI         loc         .	creEntMb		=	forextractMbEnt @foreignEntInfo >>= flip Map.lookup CR.allRunPrimMp
  							.	creMk			=	\as -> maybe (dbg $ "Core.ToCoreRun.CExpr.FFI.cre: " ++ show @foreignEntInfo) (\ent -> CR.Exp_FFI ent as) @creEntMb
  							.   cre             =   @creMk CR.emptyCRArray
  | Ann         loc         .   cre             =   @expr.cre
  | * - Int Char String Var
        Lam App Let Tup Case FFI
        Ann
%%[[97
        Integer
%%]]
                loc         .   cre             =   dbg "Core.ToCoreRun.CExpr.cre"
%%]

%%[(8 corerun)
SEM CModule
%%[[8
  | Mod         loc         .   creMod          =   @expr.cre
%%][99
  | Mod         loc         .   creMod          =   CR.Exp_App @expr.cre $ CR.mkCRArray [CR.unit]
%%]]
%%]

%%[(8 corerun)
ATTR AllBind CExpr [ | | crb USE {++} {[]} : {[(HsName, CR.Bind)]} ]

SEM CBound
  | Bind Val    loc         .   creBind         =   case @toBe of
                                                        ToBe_Forced   -> tailrec @isTailRec $ CR.Exp_Force @expr.cre
                                                        ToBe_Thunked  -> CR.Exp_Lam @lev 0 (@expr.refOffsetMax) (CR.nm2RefMpInverse @nm2refNew) @expr.cre
                                                        ToBe_LeftAsIs -> @expr.cre
                loc         .   crb             =   [( @lhs.nm, @creBind )]

SEM CBind
  | Bind        loc         .   crb             =   take 1 @bindAspects.crb -- TBD: multiple, choose?

SEM CExpr
  | Let         lhs         .   crb             =   if @isGlobal
                                                    then @binds.crb ++ @body.crb
                                                    else []
  | * - Let Ann lhs         .   crb             =   []
%%]

%%[(8 corerun)
ATTR AllAlt [ | | cra USE {++} {[]} : {[CR.Alt]} ]

SEM CAlt
  | Alt         lhs         .   cra             =   [CR.Alt_Alt (CR.nm2RefMpInverse @nm2refNew) @pat.crp @expr.cre]
%%]

%%[(8 corerun)
ATTR CPat [ | | crp: {CR.Pat} ]

SEM CPat
  | Con         lhs         .   crp             =   CR.Pat_Con @tag
%%[[97
  -- | BoolExpr lhs         .   crp             =   CR.Pat_BoolExpr @cexpr.cre
%%]]
  | * - Con
%%[[97
       --  BoolExpr
%%]]
                lhs         .   crp             =   CR.Pat_Con CTagRec  -- TBD
%%]

%%[(8 corerun)
ATTR CodeAGItf CModule [ | | crm: {CR.Mod} ]

SEM CModule
  | Mod         lhs         .   crm             =   CR.Mod_Mod (CR.nm2RefMpInverse @nm2refNew) @moduleNm @lhs.modNr (CR.mkCRArray $ map snd @expr.crb) (CR.Exp_Ret $ CR.Exp_Force @creMod)
%%]




