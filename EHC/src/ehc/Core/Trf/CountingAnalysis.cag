%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Hidde's counting Analysis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Implementation of Hidde's counting Analysis

%%[(8 counting) hs module {%{EH}Core.Trf.CountingAnalysis} import(Data.Maybe,Data.Set (Set),qualified Data.Set as Set,Data.Map (Map),qualified Data.Map as Map,qualified Data.Map as Data.Map)
%%]

%%[(8 counting) hs import(qualified Data.Set as S,qualified Data.Map as M)
%%]

%%[(8 counting) hs import({%{EH}LamInfo},{%{EH}Base.Common},{%{EH}Base.HsName.Builtin},{%{EH}Gam.DataGam},{%{EH}Gam.Base},{%{EH}Core},{%{EH}Ty})
%%]

%%[(8 counting) hs import({%{EH}CountingAnalysis.ConstraintGeneration},{%{EH}CountingAnalysis.ConstraintSolver},{%{EH}CountingAnalysis},{%{EH}CountingAnalysis.Pretty})
%%]

%%[(8 counting) hs import({%{EH}CountingAnalysis.ToCAModule}, {%{EH}CountingAnalysis.ToCModule})
%%]

%%[(8 counting) hs import(qualified {%{EH}CountingAnalysis.Substitution} as S, {%{EH}CountingAnalysis.AnnotateType})
%%]

%%[(8 counting) hs import(UHC.Util.Utils, UHC.Util.Pretty)
%%]

%%[(8 counting) hs import(Control.Monad (foldM), Control.Monad.State)
%%]

%%[(8 counting) hs import(Data.Monoid ((<>)))
%%]

%%[(8 counting) hs import(Data.List (zipWith7), Control.Arrow(first))
%%]

Debugging
%%[(8 counting) hs import(Debug.Trace)
%%]

%%[(8 counting).WRAPPER ag import({CountingAnalysis/AbsSyn})
WRAPPER Expr
%%]


-- %%[(8 counting).WRAPPER ag import({Core/AbsSyn},{Core/CommonLev},{Core/CommonLevAlt},{Core/CommonLevLamPer1Lam},{Core/CommonCtxtPred},{Core/Trf/CommonFv},{Core/Trf/CommonStructureInfo},{Core/CommonBindNm})
-- WRAPPER CodeAGItf
-- %%]

-- %%[(8 counting) ag import({Core/CommonLamInfo},{Core/CommonGathLamInfo})
-- %%]

%%[(99 counting)
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 counting) hs
cmodTrfAnalysis :: Bool -> DataGam -> LamMp -> CModule -> (CModule, LamMp)
cmodTrfAnalysis subeff d imps m = traceShow (pp e, e) $ traceShow (ppMapAnnFree bi, ex) res
-- cmodTrfAnalysis subeff d imps m = res
  where Module_Module e extra = toCAModule im m
        syn = wrap_Expr (sem_Expr e)
                Inh_Expr
                  { dataEnv_Inh_Expr = specialtrace d
                  , exports_Inh_Expr = ex
                  , importEnv_Inh_Expr = im
                  , subeffecting_Inh_Expr = if subeff then genSub else genEq
                  , toHsName_Inh_Expr = toHsName
                  , freshVar_Inh_Expr = 0
                  }
        im = toImports imps
        ex = S.map (fixHsName modName) $ toExports d m
        c = constraints_Syn_Expr syn
        conMap = constraintsMap_Syn_Expr syn
        e' = annCopy_Syn_Expr syn
        bindingEnv = bindingEnv_Syn_Expr syn
        finalBindEnv = S.substSolution bindingEnv s
        newLamMap = toLamMp finalBindEnv
        finalLamMap = lamMpMergeInto (\(LamInfo {laminfoCaType=a}) i -> i {laminfoCaType=a}) const newLamMap imps
        s = traceShow ("num constraints: ", countConstraints c conMap) $ printTrace c $ solveDef c 
          (emptySolveState {_freshVar = freshVar_Syn_Expr syn, _toHsName = toHsName, _constraintMap = conMap})
        toHsName v = mkHNm $ show modName ++ ".CA@" ++ show v
        modName = moduleNm_CModule_Mod m
        bi = envFilterList finalBindEnv ex
        res = if M.size bi == S.size ex 
          then (toCModule $ Module_Module (S.substSolution e' s) extra, finalLamMap) 
          else panic "not all exported symbols have a type"

specialtrace :: DataGam -> DataGam
specialtrace = id
-- specialtrace dg = traceShow ("DataGamGen:", dgl) dg
  -- where dgl = map f $ gamToAssocL dg
  --       f (n, dgi) = (n, dgiAnnVars dgi, Map.map (\x -> dtiFldAnnTyL x) $ dgiConstrTagMp dgi) 

type DataEnv = DataGam

printTrace :: Constraints -> a -> a
printTrace c = id
-- printTrace = traceShow . vlist . map ppAnnFree . filterGen
-- printTrace [] = id
-- printTrace (x:xs) = traceShow x . printTrace xs

-- filterGen :: Constraints -> Constraints
-- filterGen [] = []
-- filterGen (Constraint_Gen t u d v0 d0 c e s : xs) = Constraint_Gen t u d v0 d0 (filterGen c) e s : filterGen xs
-- filterGen (_:xs) = filterGen xs

countConstraints :: Constraints -> Map a Constraints -> Int
countConstraints c cm = length c + (sum $ map length $ M.elems cm) 

toLamMp :: BindingEnv -> LamMp
toLamMp = M.map $ \x -> emptyLamInfo {laminfoCaType = getType x}

toImports :: LamMp -> Imports
toImports x = im
  where im = M.filter (/= Scheme_Forall mempty mempty mempty (Type_Error "Empty lamInfo")) $ M.map laminfoCaType x

toExports :: DataGam -> CModule -> Exports
toExports d (CModule_Mod _ exps _ _ _) = toExports' exps
  where toExports' [] = S.empty
        toExports' (CExport_Export n:xs) = S.insert n $ toExports' xs
        toExports' (CExport_ExportData n Nothing:xs) = Set.union cs $ toExports' xs
          where cs = Set.fromList $ Map.keys $ dgiConstrTagMp $ fromMaybe (panic "ex") $ n `dataGamLookup` d 
        toExports' (CExport_ExportData _ (Just cs):xs) = S.union (S.fromList cs) $ toExports' xs
        
annVars :: DataGamInfo -> HsNames
annVars = dgiAnnVars

tyVars :: DataGamInfo -> HsNames
tyVars = dgiTyVars

constrs :: DataGamInfo -> Map HsName Fields
constrs = Map.map dtiFldAnnTyL . dgiConstrTagMp

fromFields :: Fields -> [RhoType]
fromFields = map fromField

fromField :: Field -> RhoType
fromField (Field_Lazy t) = t
fromField (Field_Strict t) = t

-- temp

-- TODO ask atze as this is basically hope it works stuff
fixHsName :: HsName -> HsName -> HsName
fixHsName x hnm = mkHNm $ show x ++ "." ++ show hnm

traceShow2 :: (Show a, Show b) => a -> b -> b
traceShow2 x y = y
-- traceShow2 x y = traceShow ("***********",x,y,"$$$$$$$$$$$$$$") y

traceShow1 :: (Show a, Show b) => a -> b -> b
traceShow1 x y = y
-- traceShow1 x y = traceShow ("*********",x,y,"#########") y

%%]

%%[(8 counting) hs export(cmodTrfAnalysisCounting)
cmodTrfAnalysisCounting :: DataGam -> LamMp -> CModule -> (CModule, LamMp)
cmodTrfAnalysisCounting = cmodTrfAnalysis True
%%]

%%[(8 counting) hs export(cmodTrfAnalysisCountingUnique)
cmodTrfAnalysisCountingUnique :: DataGam -> LamMp -> CModule -> (CModule, LamMp)
cmodTrfAnalysisCountingUnique = cmodTrfAnalysis False
%%]

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- %%% Gathering LamInfo
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- %%[(8 codegen)
-- ATTR
--   CAModule CAExpr
--     [ | | gathLamMp: LamMp ]

-- SEM CAExpr
--   | Let
--           lhs         .   gathLamMp   =   @binds.bindLamMp `Map.union` @body.gathLamMp
--   | LetBang
--     lhs.gathLamMp = @bind.bindLamMp `Map.union` @body.gathLamMp
--   | * - Let LetBang
--           lhs         .   gathLamMp   =   Map.empty
-- %%]

-- %%[(8 codegen)
-- ATTR CABindings CABinding CAExpr [ | | bindLamMp USE {`lamMpUnionBindAspMp`} {Map.empty}: LamMp ]

-- %%]

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- %%% Combining LamInfo for local (per module) use
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- %%[(8 codegen)
-- SEM CAModule
--   | Module      loc         .   gathLamMp   =   lamMpMergeInto @howMergeLamInfo const @mod.gathLamMp @lhs.lamMp
--                 mod         .   lamMp       =   @howUnionGathLamInfo @lhs.lamMp
-- %%]

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- %%% Distributing LamInfo
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- %%[(8 codegen)
-- ATTR ALLCAEXPR CAModule [ lamMp: LamMp | | ]
-- ATTR ALLCAEXPR [ importLamMp: LamMp | | ]
-- %%]

-- %%[(8 codegen)
-- SEM CAModule
--   | Module
--     mod.importLamMp = @lhs.lamMp

-- SEM CAExpr
--   | Abs         body        .   lamMp       =   Map.delete @bind @lhs.lamMp
-- %%]

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- %%% Gathering LamInfo Hooks
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- %%[(8 counting)
-- SEM CAModule
--   | Module       
--     loc.howUnionGathLamInfo = Map.union @gathLamMp
-- %%]

-- %%[(8 counting)
-- SEM CAModule
--   | Module       
--     loc.howMergeLamInfo = (\(LamInfo {laminfoCaType=a}) i -> i {laminfoCaType=a})
-- %%]

-- %%[(8 counting)
-- SEM CAExpr
--   | Abs      
--     loc.bindType = S.substSolution (stripRhoEta $ toRho @loc.scheme) @lhs.solvedContraints
--     lhs.bindLamMp = {-traceShow (@bind, @loc.fety) $-} Map.insert @bind (emptyLamInfo {laminfoCaType = @loc.bindType}) @body.bindLamMp

-- SEM CABinding
--   | Bind
--     loc.bindType = S.substSolution (fresh0_sigma $ @lhs.freshVar0Map Map.! @lhs.indexI) @lhs.solvedContraints
--     lhs.bindLamMp = {-traceShow (@n, @e.fety) $-} Map.singleton @n (emptyLamInfo {laminfoCaType = @loc.bindType})
-- %%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 counting) ag
ATTR * [ toHsName: {Var -> HsName} importEnv: {Imports} exports: {Exports} dataEnv: {DataEnv} subeffecting: {Annotation -> Annotation -> Constraints} | freshVar: {Var} | annCopy: SELF ]
ATTR * [ | | bindingEnv USE {M.union} {M.empty}: {BindingEnv} constraintsMap USE {M.union} {M.empty}: {Map Var Constraints}]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 counting) ag
ATTR Expr AltCon AltConst AltCons AltConsts Binding [ | | env: {Env} etaTy: {EtaType} constraints: {Constraints}]
ATTR ConVars [ | | env: {Env} rhoTypes: {[RhoType]} constraints: {Constraints} ] -- doen
ATTR ConVar [ | | env: {Env} rhoTy: {RhoType} constraints: {Constraints}] -- done
ATTR Const AltConsts AltConst [ | | ty: {Type}] -- done
ATTR AltCons AltCon [ | | tyNm: {HsName}] -- done
ATTR AltCons Bindings [ | | rhoSchemes: {[[RhoScheme]]}] -- done
ATTR AltCon Binding [ | | rhoSchemes: {[RhoScheme]}] -- done
ATTR Bindings [ | | constraints: {Constraints} envs: {[Env]} bindingNames: {HsNames} etaTypes: {[EtaType]}]
ATTR ConVars AltCons AltConsts Bindings [ | | isNil: {Bool}] --done
ATTR Binding [ | | bindingName: {HsName} ]
ATTR Binding Bindings [ allBindingNames: {HsNames} | | ]

SEM Expr
  | VarLocal
    loc.tau = Type_Var $ @lhs.toHsName @lhs.freshVar
    loc.sigma = Scheme_Var $ @lhs.toHsName $ @lhs.freshVar + 1
    loc.nu = Annotation_Var $ @lhs.toHsName $ @lhs.freshVar + 2
    loc.delta = Annotation_Var $ @lhs.toHsName $ @lhs.freshVar + 3
    loc.etaTy = EtaType_Eta @loc.tau @loc.nu
    lhs.freshVar = @lhs.freshVar + 4
    lhs.env = M.singleton @v $ RhoScheme_Rho (EtaScheme_Eta @loc.sigma @loc.nu) @loc.delta -- annOne
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("VarLocal-annCopy: ",@loc.annCopy, "Constraints: ") $ singleC $ Constraint_Inst @loc.sigma @loc.tau
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_VarLocal @v @extra
  | VarImport
    loc.tau = Type_Var $ @lhs.toHsName @lhs.freshVar
    loc.sigma = @lhs.importEnv M.! @v
    loc.etaTy = EtaType_Eta @loc.tau annTop
    lhs.freshVar = @lhs.freshVar + 1
    lhs.env = M.empty
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("VarImport-annCopy: ",@loc.annCopy, "Constraints: ") $ singleC $ Constraint_Inst @loc.sigma @loc.tau
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_VarImport @v @extra
  | Const
    loc.tau = @c.ty
    loc.nu = Annotation_Var $ @lhs.toHsName @lhs.freshVar
    loc.etaTy = EtaType_Eta @loc.tau @loc.nu
    lhs.freshVar = @lhs.freshVar + 1
    lhs.env = M.empty
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("Const-annCopy: ",@loc.annCopy, "Constraints: ") $ mempty
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_Const @c.annCopy
  | Abs
    loc.env1 = M.delete @bind @body.env
    loc.(rho, fv) = envLookupFresh (@body.freshVar, @lhs.toHsName) @body.env @bind
    loc.sigma = getType @loc.rho
    loc.nu = getUsage @loc.rho
    loc.delta = getDemand @loc.rho
    loc.eta = @body.etaTy
    loc.c1 = @body.constraints 
    loc.nu2 = Annotation_Var $ @lhs.toHsName @loc.fv
    loc.tau = Type_Var $ @lhs.toHsName $ @loc.fv + 1
    loc.((env2, c2), fv2) = computeTimes (@loc.fv + 2, @lhs.toHsName) @loc.nu2 @loc.env1
    loc.etaTy = EtaType_Eta (Type_Func (RhoType_Rho (EtaType_Eta @loc.tau @loc.nu) @loc.delta) @loc.eta) @loc.nu2
    lhs.freshVar = @loc.fv2
    lhs.env = @loc.env2
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("Abs-annCopy: ",@loc.annCopy, "Constraints: ") $ @loc.c1 <> @loc.c2 <> genEq @loc.sigma (Scheme_Forall mempty mempty mempty @loc.tau)
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_Abs @bind @body.annCopy
    +bindingEnv = M.insert @bind @loc.rho
  | AppLocal
    loc.env1 = @func.env
    loc.eta' = @func.etaTy
    loc.c1 = @func.constraints
    loc.delta2 = Annotation_Var $ @lhs.toHsName @func.freshVar
    loc.sigmax = Scheme_Var $ @lhs.toHsName $ @func.freshVar + 1
    loc.nux = Annotation_Var $ @lhs.toHsName $ @func.freshVar + 2
    loc.taux = Type_Var $ @lhs.toHsName $ @func.freshVar + 3
    loc.eta4 = EtaScheme_Eta @loc.sigmax @loc.nux
    loc.eta2' = EtaType_Eta @loc.taux @loc.nux
    loc.c2 = singleC $ Constraint_Inst @loc.sigmax @loc.taux
    loc.eta3 = EtaType_Eta (Type_Var $ @lhs.toHsName $ @func.freshVar + 4) $ Annotation_Var $ @lhs.toHsName $ @func.freshVar + 5
    loc.((eta2, c2'), fv) = sub (@func.freshVar + 6, @lhs.toHsName) @lhs.subeffecting @loc.eta2'
    loc.((etas', c1'), fv2) = sub (@loc.fv, @lhs.toHsName) genSub @loc.eta'
    loc.tau1 = getType @loc.etas'
    loc.nu1 = getUsage @loc.etas'
    loc.((env2, c3), fv3) = computePlus (@loc.fv2, @lhs.toHsName) @loc.env1 $ M.singleton @arg $ RhoScheme_Rho @loc.eta4 @loc.delta2
    loc.etaTy = @loc.eta3
    lhs.freshVar = @loc.fv3
    lhs.env = @loc.env2
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("AppLocal-annCopy: ",@loc.annCopy, "Constraints: ") $ mconcat [@loc.c1, @loc.c1', @loc.c2, @loc.c2', @loc.c3, 
                        genEq @loc.tau1 $ Type_Func (RhoType_Rho @loc.eta2 @loc.delta2) @loc.eta3, 
                        genEq @loc.nu1 annOne]
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_AppLocal @func.annCopy @arg
  | AppImport
    loc.env = @func.env
    loc.eta' = @func.etaTy
    loc.c1 = @func.constraints
    loc.delta2 = Annotation_Var $ @lhs.toHsName @func.freshVar
    loc.sigmax = @lhs.importEnv M.! @arg
    loc.taux = Type_Var $ @lhs.toHsName $ @func.freshVar + 2
    loc.eta2' = EtaType_Eta @loc.taux annTop
    loc.c2 = singleC $ Constraint_Inst @loc.sigmax @loc.taux
    loc.eta3 = EtaType_Eta (Type_Var $ @lhs.toHsName $ @func.freshVar + 3) $ Annotation_Var $ @lhs.toHsName $ @func.freshVar + 4
    loc.((eta2, c2'), fv) = sub (@func.freshVar + 5, @lhs.toHsName) @lhs.subeffecting @loc.eta2'
    loc.((etas', c1'), fv2) = sub (@loc.fv, @lhs.toHsName) genSub @loc.eta'
    loc.tau1 = getType @loc.etas'
    loc.nu1 = getUsage @loc.etas'
    loc.etaTy = @loc.eta3
    lhs.freshVar = @loc.fv2
    lhs.env = @loc.env
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("AppImport-annCopy: ",@loc.annCopy, "Constraints: ") $ mconcat [@loc.c1, @loc.c1', @loc.c2, @loc.c2', 
                        genEq @loc.tau1 $ Type_Func (RhoType_Rho @loc.eta2 @loc.delta2) @loc.eta3, 
                        genEq @loc.nu1 annOne]
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_AppImport @func.annCopy @arg
  | AppConst
    loc.env = @func.env
    loc.eta' = @func.etaTy
    loc.c1 = @func.constraints
    loc.delta2 = Annotation_Var $ @lhs.toHsName @func.freshVar
    loc.eta2' = EtaType_Eta @arg.ty $ Annotation_Var $ @lhs.toHsName $ @func.freshVar + 1
    loc.eta3 = EtaType_Eta (Type_Var $ @lhs.toHsName $ @func.freshVar + 2) $ Annotation_Var $ @lhs.toHsName $ @func.freshVar + 3
    loc.((eta2, c2), fv) = sub (@func.freshVar + 4, @lhs.toHsName) @lhs.subeffecting @loc.eta2'
    loc.((etas', c1'), fv2) = sub (@loc.fv, @lhs.toHsName) genSub @loc.eta'
    loc.tau1 = getType @loc.etas'
    loc.nu1 = getUsage @loc.etas'
    loc.etaTy = @loc.eta3
    lhs.freshVar = @loc.fv2
    lhs.env = @loc.env
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("AppConst-annCopy: ",@loc.annCopy, "Constraints: ") $ mconcat [@loc.c1, @loc.c1', @loc.c2, 
                        genEq @loc.tau1 $ Type_Func (RhoType_Rho @loc.eta2 @loc.delta2) @loc.eta3, 
                        genEq @loc.nu1 annOne]
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_AppConst @func.annCopy @arg.annCopy
  | Let
    binds.allBindingNames = @binds.bindingNames
    loc.env0 = envDeleteList @e.env @binds.bindingNames
    loc.(rho0i, fv) = envLookupFreshList (@e.freshVar, @lhs.toHsName) @e.env @binds.bindingNames
    loc.sigmai = map getType @loc.rho0i
    loc.nui = map getUsage @loc.rho0i
    loc.delta0i = map getDemand @loc.rho0i
    loc.deltai = map (Annotation_Var . @lhs.toHsName) [@loc.fv .. @loc.fv + length @loc.delta0i - 1]
    loc.fv0 = @loc.fv + length @loc.delta0i
    loc.eta = @e.etaTy
    loc.c0 = @e.constraints
    loc.tauij = map (\x -> map (Type_Var . @lhs.toHsName) [@loc.fv0 + x * length @binds.bindingNames .. @loc.fv0 + (x + 1) * length @binds.bindingNames - 1]) [0 .. length @binds.bindingNames - 1]
    loc.fv1 = @loc.fv0 + length @binds.bindingNames * length @binds.bindingNames
    loc.sigmaij = map (map $ Scheme_Forall mempty mempty mempty) @loc.tauij
    loc.envi = @binds.envs
    loc.sigmaij' = map (map getType) @binds.rhoSchemes
    loc.nuij = map (map getUsage) @binds.rhoSchemes
    loc.deltaij = map (map getDemand) @binds.rhoSchemes
    loc.taui = map getType @binds.etaTypes
    loc.nuxi = map getUsage @binds.etaTypes
    loc.c0'= genEq @loc.nui @loc.nuxi
    loc.c1i = @binds.constraints
    loc.c1' = genEq @loc.sigmaij @loc.sigmaij'
    loc.c1 = @loc.c1' <> @loc.c1i
    
    loc.((envi', c2i), fv2) = traceShow1 (@loc.fv1, @binds.bindingNames, @loc.deltai, @loc.envi) $ computeCondList (@loc.fv1 + length @binds.bindingNames ^ 2, @lhs.toHsName) @loc.deltai @loc.envi
    loc.((env', c2), fv3) = bigPlus (@loc.fv2, @lhs.toHsName) @loc.envi'
    loc.((env, c2'), fv4) = computePlus (@loc.fv3, @lhs.toHsName) @loc.env0 @loc.env'
    
    loc.((deltaij', c3ij), fv5) = computeCondMatrix (@loc.fv4, @lhs.toHsName) @loc.deltai @loc.deltaij
    loc.((deltai', c3i), fv6) = bigPlusMatrix (@loc.fv5, @lhs.toHsName) @loc.deltaij'
    loc.((deltai'', c3i'), fv7) = computePlus (@loc.fv6, @lhs.toHsName) @loc.deltai @loc.deltai'
    loc.c3' = genEq @loc.deltai @loc.deltai''
    loc.c3 = @loc.c3' <> @loc.c3ij <> @loc.c3i <> @loc.c3i'
    
    loc.((nuij', c4ij), fv8) = computeCondMatrix (@loc.fv7, @lhs.toHsName) @loc.deltai @loc.nuij
    loc.((nui', c4i), fv9) = bigPlusMatrix (@loc.fv8, @lhs.toHsName) @loc.nuij'
    loc.((nu0i, c4i'), fv10) = computePlus (@loc.fv9, @lhs.toHsName) @loc.nui @loc.nui'
    loc.c4' = mempty
    -- loc.c4' = genEq @loc.nu0i @loc.nui
    loc.c4 = @loc.c4' <> @loc.c4ij <> @loc.c4i <> @loc.c4i'
    
    loc.((tauij', c5ij), fv11) = computeCondMatrix (@loc.fv10, @lhs.toHsName) @loc.deltai @loc.tauij
    loc.((taui', c5i), fv12) = bigPlusMatrix (@loc.fv11, @lhs.toHsName) @loc.tauij'
    loc.c5' = genEq @loc.taui' @loc.taui
    loc.c5 = @loc.c5' <> @loc.c5ij <> @loc.c5i
    
    loc.cGen = @loc.c1 <> @loc.c3 <> @loc.c4 <> @loc.c5
    loc.c6 = mconcat $ zipWith7 (\nm t n d n0 d0 s -> traceShow ("let:", nm, s) $ singleC $ Constraint_Gen t n d n0 d0 @loc.fv12 @loc.env s) @binds.bindingNames @loc.taui @loc.nui @loc.deltai @loc.nu0i @loc.delta0i @loc.sigmai
    loc.c7i = zipWith3 (\x n d0 -> if x `S.member` @lhs.exports then genEq n annTop <> genEq d0 annTop else mempty) @binds.bindingNames @loc.nui @loc.deltai
    
    loc.etaTy = @loc.eta
    lhs.freshVar = @loc.fv12 + 1
    lhs.env = @loc.env
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("Let-annCopy: ", "Constraints: ", @loc.c6 , @loc.c0 , @loc.c0' , @loc.c2 , @loc.c2' , @loc.c2i , mconcat @loc.c7i) $ @loc.c6 <> @loc.c0 <> @loc.c0' <> @loc.c2 <> @loc.c2' <> @loc.c2i <> mconcat @loc.c7i
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_Let @binds.annCopy @e.annCopy
    +bindingEnv = M.union (M.fromList $ zip @binds.bindingNames @loc.rho0i)
    +constraintsMap = M.insert @loc.fv12 @loc.cGen
  | LetBang
    loc.env0 = M.delete @x @e2.env
    loc.(rho0, fv) = envLookupFresh (@e2.freshVar, @lhs.toHsName) @e2.env @x
    loc.sigma0 = getType @loc.rho0
    loc.nu = getUsage @loc.rho0
    loc.delta = getDemand @loc.rho0
    loc.eta = @e2.etaTy
    loc.c0 = @e2.constraints
    loc.env1 = M.delete @x @e1.env
    loc.(rho1, fv2) = envLookupFresh (@loc.fv, @lhs.toHsName) @e1.env @x
    loc.sigma' = getType @loc.rho1
    loc.nu1 = getUsage @loc.rho1
    loc.delta1 = getDemand @loc.rho1
    loc.tau = getType @e1.etaTy
    loc.nu2 = getUsage @e1.etaTy
    loc.c1 = @e1.constraints
    loc.c1' = genEq @loc.sigma' (Scheme_Forall mempty mempty mempty @loc.tau) <> genSub annZero @loc.nu2
    loc.((env, c2), fv3) = computePlus (@loc.fv2, @lhs.toHsName) @loc.env0 @loc.env1
    loc.((delta0, c3), fv4) = computePlus (@loc.fv3, @lhs.toHsName) annOne @loc.delta
    loc.((delta', c4), fv5) = computePlus (@loc.fv4, @lhs.toHsName) @loc.delta0 @loc.delta1
    -- loc.c4' = mempty 
    loc.c4' = genEq @loc.delta0 @loc.delta'
    loc.((nu', c5), fv6) = computePlus (@loc.fv5, @lhs.toHsName) @loc.nu @loc.nu1
    loc.c5' = mempty
    -- loc.c5' = genEq @loc.nu @loc.nu'
    loc.cGen = @loc.c1 <> @loc.c1' <> @loc.c3 <> @loc.c4 <> @loc.c4' <> @loc.c5 <> @loc.c5'
    loc.c6 = traceShow ("letBang:", @x, @loc.sigma0) $ singleC $ Constraint_Gen @loc.tau @loc.nu @loc.delta0 @loc.nu' @loc.delta' @loc.fv6 @loc.env @loc.sigma0
    loc.etaTy = @loc.eta
    lhs.freshVar = @loc.fv6 + 1
    lhs.env = @loc.env
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("LetBang-annCopy: ",@loc.annCopy, "Constraints: ") $ @loc.c6 <> @loc.c0 <> @loc.c2
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_LetBang @x @e1.annCopy @e2.annCopy
    +bindingEnv = M.insert @x (RhoScheme_Rho (EtaScheme_Eta @loc.sigma0 @loc.nu') @loc.delta')
    +constraintsMap = M.insert @loc.fv6 @loc.cGen
  | Con
    loc.env = @flds.env
    loc.rho' = @flds.rhoTypes
    loc.c1 = @flds.constraints
    loc.data = fromMaybe (error "con") $ @tyNm `dataGamLookup` @lhs.dataEnv
    loc.ul = annVars @loc.data
    loc.ak = tyVars @loc.data
    loc.rhoj = fromFields $ constrs @loc.data M.! @conNm
    loc.phil = map (Annotation_Var . @lhs.toHsName) [@flds.freshVar .. @flds.freshVar + length @loc.ul - 1]
    loc.tauk = map (Type_Var . @lhs.toHsName) [@flds.freshVar + length @loc.ul  .. @flds.freshVar + length @loc.ul + length @loc.ak - 1]
    loc.sol = Solution (M.fromList $ zip @loc.ul @loc.phil) (M.fromList $ zip @loc.ak @loc.tauk) M.empty
    loc.rhoj' = S.substSolution @loc.rhoj @loc.sol
    loc.c2 = genEq @loc.rhoj' @loc.rho'
    loc.nu = Annotation_Var $ @lhs.toHsName $ @flds.freshVar + length @loc.ul + length @loc.ak
    loc.etaTy = EtaType_Eta (Type_Data @tyNm @loc.phil @loc.tauk) @loc.nu
    lhs.freshVar = @flds.freshVar + length @loc.ul + length @loc.ak + 1
    lhs.env = @loc.env
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("Con-annCopy: ",@loc.annCopy, "Constraints: ") $ @loc.c1 <> @loc.c2
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_Con @tyNm @conNm @flds.annCopy @extra
  | Tup
    -- copy rules
    loc.nu = Annotation_Var $ @lhs.toHsName @flds.freshVar
    loc.etaTy = EtaType_Eta (Type_Tup @flds.rhoTypes) @loc.nu
    lhs.freshVar = @flds.freshVar + 1
    lhs.etaTy = @loc.etaTy
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_Tup @flds.annCopy @extra
  | CaseCon
    loc.data = fromMaybe (error "CaseCon") $ @alts.tyNm `dataGamLookup` @lhs.dataEnv
    loc.ul = annVars @loc.data
    loc.ak = tyVars @loc.data
    loc.rhoijtau = map (fromFields . snd) $ M.toList $ constrs @loc.data
    loc.phil = map (Annotation_Var . @lhs.toHsName) [@alts.freshVar .. @alts.freshVar + length @loc.ul - 1]
    loc.tauk = map (Type_Var . @lhs.toHsName) [@alts.freshVar + length @loc.ul  .. @alts.freshVar + length @loc.ul + length @loc.ak - 1]
    loc.sol = Solution (M.fromList $ zip @loc.ul @loc.phil) (M.fromList $ zip @loc.ak @loc.tauk) M.empty
    loc.rhoijtau' = S.substSolution @loc.rhoijtau @loc.sol
    loc.rhoijsigma = map (map $ fromGRho . fmap (Scheme_Forall mempty mempty mempty) . toGRho) @loc.rhoijtau'
    loc.env0 = @e.env
    loc.tau0 = getType @e.etaTy
    loc.nu0 = getUsage @e.etaTy
    loc.c1 = @e.constraints
    loc.c1' = genEq @loc.tau0 (Type_Data @alts.tyNm @loc.phil @loc.tauk) <> genSub annOne @loc.nu0
    loc.env' = @alts.env
    loc.rhoij' = @alts.rhoSchemes
    loc.eta1 = @alts.etaTy
    loc.c2 = @alts.constraints
    loc.c2' = genEq @loc.rhoijsigma @loc.rhoij'
    loc.((env, c3'), fv) = computePlus (@alts.freshVar + length @loc.ul + length @loc.ak, @lhs.toHsName) @loc.env0 @loc.env'
    loc.etaTy = @loc.eta1
    lhs.freshVar = @loc.fv
    lhs.env = @loc.env
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("CaseCon-annCopy: ",@loc.annCopy, "Constraints: ") $ @loc.c1 <> @loc.c1' <> @loc.c2 <> @loc.c2' <> @loc.c3'
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_CaseCon @e.annCopy @alts.annCopy
  | CaseTup
    loc.rhoitau = map (\n -> RhoType_Rho (EtaType_Eta (Type_Var $ @lhs.toHsName $ @e1.freshVar + 3 * n) $ Annotation_Var $ @lhs.toHsName $ @e1.freshVar + 1 + 3 * n) $ Annotation_Var $ @lhs.toHsName $ @e1.freshVar + 2 + 3 * n) [0 .. length @xs - 1]
    loc.rhoisigma = map (fromGRho . fmap (Scheme_Forall mempty mempty mempty) . toGRho) @loc.rhoitau
    loc.env0 = @e.env
    loc.tau0 = getType @e.etaTy
    loc.nu0 = getUsage @e.etaTy
    loc.c1 = @e.constraints
    loc.c1' = genEq @loc.tau0 (Type_Tup @loc.rhoitau) <> genSub annOne @loc.nu0
    loc.env1 = envDeleteList @e1.env @xs
    loc.(rhoi', fv) = envLookupFreshList (@e1.freshVar + 3 * length @xs, @lhs.toHsName) @e1.env @xs
    loc.eta = @e1.etaTy
    loc.c2 = @e1.constraints
    loc.c2' = genEq @loc.rhoisigma @loc.rhoi'
    loc.((env, c3), fv2) = computePlus (@loc.fv, @lhs.toHsName) @loc.env0 @loc.env1
    loc.etaTy = @loc.eta
    lhs.freshVar = @loc.fv2
    lhs.env = @loc.env
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("CaseTup-annCopy: ",@loc.annCopy, "Constraints: ") $ @loc.c1 <> @loc.c1' <> @loc.c2 <> @loc.c2' <> @loc.c3
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_CaseTup @e.annCopy @xs @e1.annCopy
    +bindingEnv = M.union (M.fromList $ zip @xs @loc.rhoisigma)
  | CaseConst
    loc.tau = @alts.ty
    loc.env0 = @e.env
    loc.tau0 = getType @e.etaTy
    loc.nu0 = getUsage @e.etaTy
    loc.c1 = @e.constraints
    loc.c1' = genEq @loc.tau0 @loc.tau <> genSub annOne @loc.nu0
    loc.env' = @alts.env
    loc.eta1 = @alts.etaTy
    loc.c2 = @alts.constraints
    loc.((env, c3'), fv) = computePlus (@alts.freshVar, @lhs.toHsName) @loc.env0 @loc.env'
    loc.etaTy = @loc.eta1
    lhs.freshVar = @loc.fv
    lhs.env = @loc.env
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("CaseConst-annCopy: ",@loc.annCopy, "Constraints: ") $ @loc.c1 <> @loc.c1' <> @loc.c2 <> @loc.c3'
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_CaseConst @e.annCopy @alts.annCopy
  | FFI
    loc.tau = Type_Var $ @lhs.toHsName @lhs.freshVar
    loc.sigma = annotate @lhs.dataEnv @ty
    loc.(_,_,ent) = @extra
    loc.etaTy = EtaType_Eta @loc.tau annTop
    lhs.freshVar = @lhs.freshVar + 1
    lhs.env = M.empty
    lhs.etaTy = @loc.etaTy
    lhs.constraints = traceShow2 ("FFI-annCopy: ",@loc.annCopy, "Constraints: ") $ singleC $ Constraint_Inst @loc.sigma @loc.tau
    loc.annCopy = Expr_Ann @loc.etaTy $ Expr_FFI @ty @extra
  | Error
    lhs.env = panic "Error expression" 
    lhs.constraints = panic "Error expression" 
    lhs.etaTy = panic "Error expression" 

SEM ConVars
  | Cons
    loc.((env, c'), fv) = if @tl.isNil then ((@hd.env, mempty), @tl.freshVar) else computePlus (@tl.freshVar, @lhs.toHsName) @hd.env @tl.env
    loc.c = @hd.constraints <> if @tl.isNil then mempty else @tl.constraints
    lhs.freshVar = @loc.fv
    lhs.env = @loc.env
    lhs.rhoTypes = @hd.rhoTy : if @tl.isNil then [] else @tl.rhoTypes
    lhs.constraints = @loc.c' <> @loc.c
  | Nil
    lhs.env = M.empty
    lhs.rhoTypes = []
    lhs.constraints = mempty
    
SEM ConVar
  | VarLocal
    loc.tau = Type_Var $ @lhs.toHsName @lhs.freshVar
    loc.sigma = Scheme_Var $ @lhs.toHsName $ @lhs.freshVar + 1
    loc.nu = Annotation_Var $ @lhs.toHsName $ @lhs.freshVar + 2
    loc.delta2 = Annotation_Var $ @lhs.toHsName $ @lhs.freshVar + 3
    lhs.freshVar = @lhs.freshVar + 4
    lhs.env = M.singleton @v $ RhoScheme_Rho (EtaScheme_Eta @loc.sigma @loc.nu) @loc.delta2 -- annOne
    lhs.rhoTy = RhoType_Rho (EtaType_Eta @loc.tau @loc.nu) @loc.delta2
    lhs.constraints = singleC $ Constraint_Inst @loc.sigma @loc.tau
  | VarImport
    loc.tau = Type_Var $ @lhs.toHsName @lhs.freshVar
    loc.sigma = @lhs.importEnv M.! @v
    loc.delta2 = Annotation_Var $ @lhs.toHsName $ @lhs.freshVar + 1
    lhs.freshVar = @lhs.freshVar + 2
    lhs.env = M.empty
    lhs.rhoTy = RhoType_Rho (EtaType_Eta @loc.tau annTop) @loc.delta2
    lhs.constraints = singleC $ Constraint_Inst @loc.sigma @loc.tau
  | Const
    loc.tau = @c.ty
    loc.nu = Annotation_Var $ @lhs.toHsName @lhs.freshVar
    loc.delta2 = Annotation_Var $ @lhs.toHsName $ @lhs.freshVar + 1
    lhs.freshVar = @lhs.freshVar + 2
    lhs.env = M.empty
    lhs.rhoTy = RhoType_Rho (EtaType_Eta @loc.tau @loc.nu) @loc.delta2
    lhs.constraints = mempty

SEM AltCons AltConsts
  | Cons
    loc.((env, c1), fv) = if @tl.isNil then ((@hd.env, mempty), @hd.freshVar) 
                            else computeUnion (@tl.freshVar, @lhs.toHsName) @hd.env @tl.env
    loc.c2 = if @tl.isNil then mempty else genEq @hd.etaTy @tl.etaTy
    lhs.freshVar = @loc.fv
    lhs.env = @loc.env
    lhs.etaTy = @hd.etaTy
    lhs.constraints = @loc.c1 <> @loc.c2 <> @hd.constraints <> (if @tl.isNil then mempty else @tl.constraints)
  | Nil
    lhs.env = undefined
    lhs.etaTy = undefined
    lhs.constraints = undefined

SEM AltCon
  | Alt
    loc.env = envDeleteList @e.env @xs
    loc.(rhosigma, fv) = envLookupFreshList (@e.freshVar, @lhs.toHsName) @e.env @xs
    lhs.freshVar = @loc.fv
    lhs.env = @loc.env
    lhs.etaTy = @e.etaTy
    lhs.constraints = @e.constraints
    lhs.rhoSchemes = @loc.rhosigma
    +bindingEnv = M.union (M.fromList $ zip @xs @loc.rhosigma)
    
SEM AltConst
  -- copy rules

SEM AltCons AltConsts ConVars Bindings
  | Cons
    lhs.isNil = False
  | Nil
    lhs.isNil = True

SEM AltCons
  | Cons
    lhs.rhoSchemes = @hd.rhoSchemes : (if @tl.isNil then [] else @tl.rhoSchemes)
  | Nil
    lhs.rhoSchemes = undefined

SEM Const
  | String
    lhs.ty = Type_Data (mkHNm "UHC.Base.PackedString") [] []
    -- lhs.ty = Type_Data (mkHNm "UHC.Base.[]") (map (Annotation_Var . @lhs.toHsName) [@lhs.freshVar .. @lhs.freshVar + 3]) [Type_Data (mkHNm "Char") [] []]
    lhs.freshVar = @lhs.freshVar + 4
  | Integer
    lhs.ty = Type_Data (mkHNm "Integer") [] []


SEM AltConsts
  | Cons
    lhs.ty = @hd.ty
  | Nil
    lhs.ty = undefined

SEM AltConst Const
  | Int
    lhs.ty = Type_Data (mkHNm "Int") [] []
  | Char
    lhs.ty = Type_Data (mkHNm "Char") [] []
  

SEM AltCons
  | Cons
    lhs.tyNm = @hd.tyNm
  | Nil
    lhs.tyNm = undefined

SEM AltCon
  | Alt
    lhs.tyNm = @tyNm

SEM Bindings
  | Cons
    lhs.bindingNames = @hd.bindingName : (if @tl.isNil then [] else @tl.bindingNames) 
    lhs.envs = @hd.env : (if @tl.isNil then [] else @tl.envs) 
    lhs.etaTypes = @hd.etaTy : (if @tl.isNil then [] else @tl.etaTypes) 
    lhs.rhoSchemes = @hd.rhoSchemes : (if @tl.isNil then [] else @tl.rhoSchemes)
    lhs.constraints = @hd.constraints <> (if @tl.isNil then mempty else @tl.constraints)
  | Nil
    lhs.bindingNames = undefined
    lhs.constraints = undefined
    lhs.envs = undefined
    lhs.etaTypes = undefined
    lhs.rhoSchemes = undefined

SEM Binding
  | Bind
    lhs.bindingName = @n
    loc.env = envDeleteList @e.env @lhs.allBindingNames
    loc.(rhosigma, fv) = envLookupFreshList (@e.freshVar, @lhs.toHsName) @e.env @lhs.allBindingNames
    lhs.freshVar = @loc.fv
    lhs.env = @loc.env
    lhs.etaTy = @e.etaTy
    lhs.rhoSchemes = @loc.rhosigma
    lhs.constraints = @e.constraints
  
%%]
