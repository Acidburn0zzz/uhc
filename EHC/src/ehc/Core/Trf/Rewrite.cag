%%[93 hs module {%{EH}Core.Trf.Rewrite} import (Data.Maybe(fromMaybe), Debug.Trace(trace),qualified Data.Map as Map, {%{EH}AbstractCore},{%{EH}Core},{%{EH}Ty},{%{EH}Base.Common}) 
%%]

%%[93 ag import ({Core/AbsSyn})

{
rewrite :: ConvMp -> CExpr -> CExpr
rewrite convMp expr = 
        let t = wrap_CExpr (sem_CExpr expr)
                           (Inh_CExpr { convMp_Inh_CExpr = convMp
                                      , leftApp_Inh_CExpr = Nothing 
                                      } )
        in rewritten_Syn_CExpr t
}

{

data Role   = Abs | Con

isCon Con = True
isCon _   = False

isAbs Abs = True
isAbs _   = False

type ConvMp = Map.Map HsName Role

}

WRAPPER CExpr

ATTR CodeAGItf [ convMp : ConvMp | | ]
ATTR AllCodeNT [ convMp : ConvMp | | rewritten : SELF]

SEM CExpr 
        | App lhs.rewritten = if @loc.isRewritable || @arg.isRewritten  
                              then @arg.rewritten  
                              else acoreApp1 @func.rewritten @arg.rewritten

ATTR CExpr [ | | isRewritten : Bool isRewritable : Bool]

SEM CExpr
        | * lhs.isRewritten    = @isRewritable 
        | App loc.isRewritable = fromMaybe False (do leftNm    <- @lhs.leftApp
                                                     leftRole  <- Map.lookup leftNm @lhs.convMp
                                                     rightNm   <- @func.varName
                                                     rightRole <- Map.lookup rightNm @lhs.convMp
                                                     return (isCon leftRole && isAbs rightRole))
        | Let loc.isRewritable = @body.isRewritable
        | Ann loc.isRewritable = @expr.isRewritable
        | * - App Let Ann loc.isRewritable = False 

ATTR CExpr [ | | varName : {Maybe HsName} ] 

SEM CExpr
        | Var lhs.varName     = Just $ acbrefNm @ref
        | * - Var lhs.varName = Nothing



ATTR CExpr [ leftApp : {Maybe HsName} | | ]

SEM CExpr 
        | App func.leftApp = Nothing
        | App arg.leftApp  = @func.varName

SEM CAlt
        | Alt expr.leftApp = Nothing

SEM CBindAspect
        | Bind expr.leftApp = Nothing
        | FFE  expr.leftApp = Nothing
        | Val  expr.leftApp = Nothing

SEM CModule
        | Mod expr.leftApp = Nothing

SEM CPatFld
        | Fld offset.leftApp = Nothing

SEM MbCExpr
        | Just just.leftApp = Nothing
%%]
