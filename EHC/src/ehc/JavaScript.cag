%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to JavaScript/AbsSyn
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript) hs module {%{EH}JavaScript} import({%{EH}Base.Common})
%%]

%%[(8 javascript) hs export(JavaScriptModule(..), Stat(..), StatL, NmExpr, NmExprL, Expr(..), ExprL, MbExpr, AGItf(..)) 
%%]

%%[(8 javascript) hs export(Alt(..), AltL) 
%%]

%%[(8 javascript) ag import({JavaScript/AbsSyn})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript) hs
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript) hs
nmFunSuff :: Int -> String
nmFunSuff n | n >  5    = "N"
            | n >= 0    = show n
            | otherwise = ""
-- nmApplyN n  = "_a" ++ nmFunSuff n ++ "_"
nmEvalN  n  = "_e" ++ nmFunSuff n ++ "_"
nmEval      = nmEvalN (-1)
%%]

%%[(8 javascript) hs export(hsnJavaScriptVar)
hsnJavaScriptVar :: Bool -> HsName -> HsName -> HsName -> HsName
%%[[8
hsnJavaScriptVar isGlobal = hsnJavaLikeVar (id, id, id)
%%][50
hsnJavaScriptVar isGlobal = hsnJavaLikeVar (hsn, hsnPrefix "$", ('$':))
  where hsn | isGlobal  = id
            | otherwise = hsnQualified
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Smart constructors
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript) hs export(localVarDecl)
-- | declare a local var
localVarDecl :: HsName -> Maybe Expr -> Stat
localVarDecl n me = Stat_VarDecl n me
%%]

%%[(8 javascript) hs export(varDecl)
-- | declare a var, or a field in object, depending on name being qualified
varDecl :: HsName -> Expr -> Stat
%%[[8
varDecl n e = localVarDecl n (Just e)
%%][50
varDecl n e
  = case hsnQualifier n of
      Just _ -> Stat_Assign (Expr_Var n) e
      _      -> localVarDecl n (Just e)
%%]]
%%]

%%[(8 javascript) hs export(op)
-- | Operator expression
op :: String -> [Expr] -> Expr
op o (l:r:_) = Expr_Op    (mkHNm o) l r
op o (e  :_) = Expr_PreOp (mkHNm o) e
%%]

%%[(8 javascript) hs export(empty)
-- | Placeholder for empty
empty :: Expr
empty = Expr_Empty
%%]

%%[(8 javascript) hs export(evl,var,call,ret',ret)
-- | call
call :: HSNM n => n -> [Expr] -> Expr
call f as = Expr_Call (var $ mkHNm f) as

-- | force evaluation
evl :: Expr -> Expr
evl x = call nmEval [x]

-- | var
var :: HSNM x => x -> Expr
var nm = Expr_Var $ mkHNm nm

-- | return
ret' :: Maybe Expr -> Stat
ret' e = Stat_Ret e

-- | return
ret :: Expr -> Stat
ret e = ret' (Just e)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Observations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript) hs export(exprMbVar)
exprMbVar :: Expr -> Maybe HsName
exprMbVar (Expr_Var n) = Just n
exprMbVar _            = Nothing
%%]
