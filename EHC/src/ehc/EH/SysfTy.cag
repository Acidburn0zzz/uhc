%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysfTy for Core elaboration: conversion of types to Core representation for use in Core
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysF's Ty: utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
ty2SysfWithKiGam :: TyKiGam -> Ty -> SysfTy
%%[[(8 coresysf)
ty2SysfWithKiGam tkg t = SysF.tyToSysfTy fitsInForToSysF (tyKiGamLookupKi tkg) t
%%][8
ty2SysfWithKiGam _   t =                                                       t
%%]]

-- | Construct a type for use by AbstractCore
ty2TyC :: EHCOpts -> TyKiGam -> Ty -> CTy
ty2TyC o tkg t = mkCTy o t (ty2SysfWithKiGam tkg t)
%%]

%%[(8 codegen coresysf) hs
ty2SysfWithKiGamVarMp :: TyKiGam -> VarMp -> Ty -> SysfTy
ty2SysfWithKiGamVarMp tkg m t = ty2SysfWithKiGam tkg (m `varUpd` t)

sysftyLookup :: VarMp -> TyKiGam -> HsName -> ValGam -> SysfTy
sysftyLookup tyVarMp tkg nm g = ty2SysfWithKiGamVarMp tkg tyVarMp $ fst $ valGamLookupTy nm g

sysftyBareFromTy :: VarMp -> Ty -> SysfTy
sysftyBareFromTy m t = SysF.tyToSysfTyBare (m `varUpd` t)
%%]

%%[(8 codegen coresysf) hs
sysftyCloseExists :: SysfTy -> (SysfTy,CExpr -> CExpr)
sysftyCloseExists t
  = case SysF.unTySeq t of
      -- (SysF.Expr_Exists s te) -> (te,SysF.Expr_CloseExists (SysF.sysftyL0BindToL1Bind s) (appDbg "sysftyCloseExists.tyClosed") t)
      _                       -> (t ,id)

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysF's Ty: a dummy def, to be overridden elsewhere using :=, if aspect 'coresysf' defined
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
SEM Expr PatExpr Decl DataFieldExpr
  | *           loc         .   sysfty      =   appDbg "{Expr,PatExpr,Decl,DataFieldExpr}.sysfty not implemented"

SEM Expr
  | Lam         
%%[[12
    LamImpl
%%]]
                loc         .   sysftyLamArg=   appDbg "{Expr}.sysftyArg not implemented"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysF's Ty: down passing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen coresysf)
ATTR AllExpr AllPatExpr AllCase [ sysftyTopDown: {SysfTy} | | ]
ATTR AllCase [ sysftyPatTopDown: {SysfTy} | | ]

SEM Expr
  | IConst      loc         .   sysfty      :=  SysF.sysftyInt
  | CConst      loc         .   sysfty      :=  SysF.sysftyChar
  | Var Con     loc         .   sysfty      :=  ty2SysfWithKiGamVarMp @lhs.finTyKiGam @lhs.finTyVarMp @ty_g_
  | Lam         
%%[[12
    LamImpl
%%]]
                loc         .   sysftyTopDownArgBase
                                            =   {- TMP -- cSubstApp @sysfcSubstLamSpine -} @sysftyLamArg
                            .   sysftyTopDownResBase
                                            =   {- TMP -- cSubstApp @sysfcSubstLamSpine -} @sysftyLamRes
  | App AppImpred
%%[[12
    AppImpl
%%]]
                loc         .   sysftyTopDownArgBase
                                            =   {- TMP -- cSubstApp @func.sysfcSubstAppSpine $ SysF.tyUnThunkTySeq $ SysF.unTySeq -} @sysftyAppArg
                loc         .   sysfty      :=  @sysftyTyAppRes
  | * - Var Con IConst CConst App AppImpred
%%[[12
    AppImpl
%%]]
                loc         .   sysfty      :=  @lhs.sysftyTopDown

SEM PatExpr
  | AppTop Rec  loc         .   sysftyPat   =   SysF.mkTySeq $ ty2SysfWithKiGamVarMp @lhs.finTyKiGam emptyVarMp @finKnPatTy -- @lhs.finTyVarMp @knPatTy

SEM PatExpr
  | Var         loc         .   sysfty      :=  @lhs.sysftyTopDown
  | AppTop      loc         .   sysfty      :=  SysF.mkTyThunk @sysftyPat
  | * - Var AppTop
                loc         .   sysfty      :=  appDbg "PatExpr.sysfty not implemented"

SEM Decl
  | Val         loc         .   sysfty      :=  ty2SysfWithKiGamVarMp @lhs.finTyKiGam emptyVarMp @finalTyExpanded
                            .   sysftyGam   =   sysftyLookup @lhs.finTyVarMp @lhs.finTyKiGam @patExpr.topNm @lhs.finValGam
                            .   sysftyBind  =   if @lhs.isStrict then @sysfty else SysF.mkTyThunk @sysfty
  | Data        loc         .   sysfty      :=  SysF.tyToSysfKi $ @lhs.finKiVarMp `varUpd` tkgiKi @dataTkgi -- $ tkgiKi $ fst $ tyKiGamLookupByNameErr @tyNm @lhs.finTyKiGam
  | FFI         loc         .   sysfty      :=  ty2SysfWithKiGamVarMp @lhs.finTyKiGam emptyVarMp @finalTyExpanded
  | * - Val Data FFI
                loc         .   sysfty      :=  appDbg "Decl.sysfty not implemented"

SEM DataFieldExpr
  | *
                loc         .   sysfty      :=  appDbg "DataFieldExpr.sysfty not implemented"
%%]

%%[(8 codegen coresysf)
SEM AGItf
  | AGItf       expr        .   sysftyTopDown   =   appDbg "AGItf.AGItf.sysftyTopDown"

SEM Expr
  | Lam         
%%[[12
    LamImpl
%%]]
                arg         .   sysftyTopDown   =   @sysftyTopDownArgBase
                (body.sysftyTopDown,loc.closeExistsWrap)
                                                =   sysftyCloseExists @sysftyTopDownResBase
  | Case        alts        .   sysftyPatTopDown
                                                =   @expr.sysftyBotUp
  | App AppImpred
%%[[12
    AppImpl
%%]]
                arg         .   sysftyTopDown   =   @sysftyTopDownArgBase

SEM Decl
  | Val         loc         .   sysftyTopDown   =   SysF.tyUnThunkTySeq @sysftyBind

SEM PatExpr
  | App         arg         .   sysftyTopDown   =   {- TMP -- cSubstApp @lhs.sysfcSubstPatSpine $ -} SysF.mkTyThunk $ ty2SysfWithKiGamVarMp @lhs.finTyKiGam @lhs.finTyVarMp @knArgTy

SEM RecPatExpr
  | Ext         patExpr     .   sysftyTopDown   =   {- TMP --cSubstApp @lhs.sysfcSubstPatSpine $ -} SysF.mkTyThunk $ ty2SysfWithKiGamVarMp @lhs.finTyKiGam @lhs.finTyVarMp @patTy

SEM CaseAlt
  | Pat         patExpr     .   sysftyTopDown   =   @lhs.sysftyPatTopDown
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysF's Ty: up passing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen coresysf)
ATTR Expr [ | | sysftyBotUp: {SysfTy} ]

SEM Expr
  | *
                loc         .   sysftyBotUp     =   @sysftyTyAppRes
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysF's Ty: splitting into args/res for App
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Instantiation info [InstTo] drives the splitting up into type and value args.
For now this is extracted from value bindings only, but must be done for other constructs as well.

%%[(8 codegen coresysf)
SEM Expr
  | App AppImpred
%%[[12
    AppImpl
%%]]
                loc         .   (sysftyTyAppArgL,sysftyAppArg,sysftyTyAppRes)
                                                =   let (al,a,r) = SysF.tyArrowInstQuArgsRes SysF.ArrowDecompose_ArgBefore @finAppInstToLHere @func.sysftyBotUp
                                                    in  (al,cbindExtractVal a,r)
  | * - App AppImpred
%%[[12
    AppImpl
%%]]
                loc         .   (sysftyTyAppArgL,_,sysftyTyAppRes)
                                                =   SysF.tyArrowInstQuArgsRes SysF.ArrowDecompose_InstOnly @finAppInstToLHere @sysfty
%%]

%%[(8 codegen coresysf)
SEM Expr
  | *           loc         .   sysfcTyArgAppWrap
                                                =   if ehcOptCoreSysF @lhs.opts
                                                    then \e -> acoreAppBound e $
                                                               {- @sysfcSubstAppSpine `cSubstApp` -}
                                                               map (SysF.tyL0BindToL1Val 0)
                                                                   @sysftyTyAppArgL
                                                    else id
                            .   sysfcTyArgLamWrap
                                                =   if ehcOptCoreSysF @lhs.opts
                                                    then \e -> flip acoreLamBind e $
                                                               map ({- SysF.cSubstAppExprAndBinds @lhs.sysfcSubstLamSpine . -} SysF.tyL0BindToL1Bind)
                                                                   @sysftyTyLamArgL
                                                    else id
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysF's Ty: splitting into args/res for Lam
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Instantiation info [InstTo] drives the splitting up into type and value args,
see remarks for finAppInstToL.

%%[(8 codegen coresysf)
SEM Expr
  | Lam         
%%[[12
    LamImpl
%%]]
                loc         .   (sysftyTyLamArgL,sysftyLamArg,sysftyLamRes)
                                                :=  let (al,a,r) = SysF.tyArrowInstQuArgsRes SysF.ArrowDecompose_ArgAfter @finLamInstToLHere @lhs.sysftyTopDown
                                                        -- (_,bind:_) = acoreUnBind a 
                                                    in  (al,cbindExtractVal a,r)
  | * - Lam
%%[[12
    LamImpl
%%]]
                loc         .   (sysftyTyLamArgL,_,sysftyTyLamRes)
                                                =   SysF.tyArrowInstQuArgsRes SysF.ArrowDecompose_InstOnly @finLamInstToLHere @lhs.sysftyTopDown
%%]
                            .   sysftyLamArgHere
                                                =   {- TMP -- @sysfcSubstLamSpine `cSubstApp` -} SysF.unTySeq @sysftyLamArg

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysF's Ty: matching, in relation to type inference'd types
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8888 codegen coresysf)
-- the CSubst binding Ty tvars to SysF Ty vars, to propagate the instantiation of a lambda
ATTR Expr [ | | sysfcSubstAppSpine: {SysF.CSubst} ]
%%]

%%[(8888 codegen coresysf)
SEM Expr
  | Var Con     loc         .   sysftyForMatch  =   sysftyBareFromTy @lhs.finTyVarMp @ty_g_
%%]

%%[(8888 codegen coresysf)
SEM Expr
  | Var Con     loc         .   moutFun         =   SysF.sysftyMatchBind @sysftyForMatch $ sysftyBareFromTy @lhs.finTyVarMp @ty
                            .   sysfcSubstAppSpine
                                                =   SysF.moutCSubst @moutFun
  | App AppImpred
%%[[12
    AppImpl
%%]]
                loc         .   sysfcSubstAppSpine
                                                =   @func.sysfcSubstAppSpine
  | * - Var Con App AppImpred
%%[[12
    AppImpl
%%]]
                loc         .   sysfcSubstAppSpine
                                                =   (emptyCSubst :: SysF.CSubst)
%%]

%%[(8 codegen coresysf)
-- the CSubst binding Ty tvars to SysF Ty vars, to propagate the abstraction of a lambda
ATTR Expr [ sysfcSubstLamSpine: {SysF.CSubst} | | ]
%%]

%%[(8 codegen coresysf)
-- TMP !!
SEM Decl
  | Val         loc         .   sysfcSubstLamSpine
                                                =   emptyCSubst
%%]

%%[(8 codegen coresysf)
SEM Decl
  | Val         loc         .   sysftyExprKnTy  =   sysftyBareFromTy @lhs.finTyVarMp @exprKnTy
                            .   sysftyExprTy    =   sysftyBareFromTy @lhs.finTyVarMp @expr.ty
                            -- .   moutExpr        =   SysF.sysftyMatchBind @sysftyExprKnTy @sysftyExprTy
                            -- .   sysfcSubstLamSpine
                            --                     =   SysF.moutCSubst @moutExpr
%%]

%%[(8 codegen coresysf)
SEM Expr
  | Lam
%%[[12
    LamImpl
%%]]
                loc         .   sysfcSubstLamSpine
                                                =   @lhs.sysfcSubstLamSpine
  | * - Lam
%%[[12
    LamImpl
%%]]
                loc         .   sysfcSubstLamSpine
                                                =   (emptyCSubst :: SysF.CSubst)
%%]

%%[(8888 codegen coresysf)
-- the CSubst binding Ty tvars to SysF Ty vars, to propagate the @lhs.sysftyTopDown over constituents
ATTR AllPatExpr [ sysfcSubstPatSpine: {SysF.CSubst} | | ]
%%]

%%[(8888 codegen coresysf)
SEM CaseAlt
  | Pat         loc         .   sysfcSubstPatSpine
                                                =   emptyCSubst
SEM Decl
  | Val         loc         .   sysfcSubstPatSpine
                                                =   emptyCSubst
SEM Expr
  | Lam
%%[[12
    LamImpl
%%]]
                loc         .   sysfcSubstPatSpine
                                                =   emptyCSubst
%%]

%%[(8888 codegen coresysf)
SEM PatExpr
  | AppTop Rec  loc         .   moutPat         =   SysF.sysftyMatchBind @sysftyPat $ SysF.tyUnThunkTySeq @lhs.sysftyTopDown
                            .   sysfcSubstPatSpine
                                                =   SysF.moutCSubst @moutPat
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysF's Ty: defaults
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen coresysf)
SEM AGItf
  | AGItf       expr        .   sysfcSubstLamSpine
                                                =   emptyCSubst

SEM CaseAlt
  | Pat         expr        .   sysfcSubstLamSpine
                                                =   emptyCSubst

SEM DataFieldExpr RecExpr
  | Expr Upd    expr        .   sysfcSubstLamSpine
                                                =   emptyCSubst

SEM RecExpr
  | Ext         expr        .   sysfcSubstLamSpine
                                                =   emptyCSubst

%%[[9
SEM Decl
  | InstanceIntro
%%[[90
    FFE
%%]]
                expr        .   sysftyTopDown   =   appDbg "Decl.InstanceIntro.sysftyTopDown"
                            .   sysfcSubstLamSpine
                                                =   emptyCSubst
%%]]

%%[[97
SEM PatExpr
  | Expr        expr        .   sysftyTopDown   =   appDbg "PatExpr.Expr.sysftyTopDown"
                            .   sysfcSubstLamSpine
                                                =   emptyCSubst
%%]]
%%]

