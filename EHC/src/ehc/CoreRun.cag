%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[doesWhat doclatex
CoreRun AST as Haskell datatype.

CoreRun is a simplified Core intended for running it using an efficient as possible representation.
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to CoreRun
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun) hs module {%{EH}CoreRun}
%%]

%%[(8 corerun) hs import ({%{EH}Base.Common}, {%{EH}Base.Target})
%%]

%%[(8 corerun) hs import(UHC.Util.Utils)
%%]

%%[(8 corerun) hs import({%{EH}Ty})
%%]

%%[(8 corerun) hs import(qualified Data.Map as Map, Data.Maybe, Data.Char, Data.List)
%%]

%%[(8888 corerun) hs import(Data.Array)
%%]

%%[(8 corerun) hs import(qualified Data.Vector as V, qualified Data.Vector.Mutable as MV)
%%]

%%[(8 corerun) hs import(Control.Applicative)
%%]

%%[(90 corerun) hs import({%{EH}Foreign})
%%]

%%[(8 corerun) hs import({%{EH}CoreRun.Prim}(RunPrim)) export(module {%{EH}CoreRun.Prim})
%%]
%%[(8 corerun) hs export(Mod(..), SExp(..), Exp(..), Alt(..), Pat(..))
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% CoreRun: AG AST
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun) ag import({CoreRun/AbsSyn})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% CoreRun: Supporting types: fast access sequences/array
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun) hs export(CRArray, CRMArray, emptyCRArray, mkCRArray, craLength, craAssocs, craAssocs')
-- | Fast access sequence
type CRArray x = V.Vector x
type CRMArray x = MV.IOVector x

{-
-- | Make array with lowerbound
mkCRArrayLwb :: Int -> [x] -> CRArray x
mkCRArrayLwb lwb xs = listArray (lwb,lwb+l-1) xs
  where l = length xs
-}

mkCRArray :: [x] -> CRArray x
-- mkCRArray = mkCRArrayLwb 0
mkCRArray = V.fromList
{-# INLINE mkCRArray #-}

emptyCRArray :: CRArray x
emptyCRArray = V.empty -- mkCRArray []
{-# INLINE emptyCRArray #-}

craLength :: CRArray x -> Int
craLength = V.length -- a = h + 1 - l
--  where (l,h) = bounds a
{-# INLINE craLength #-}

-- | Content of array as association list, starting index at 'lwb'
craAssocs' :: Int -> CRArray x -> [(Int,x)]
craAssocs' lwb = zip [lwb ..] . V.toList
{-# INLINE craAssocs' #-}

-- | Content of array as association list, starting index at 0
craAssocs :: CRArray x -> [(Int,x)]
craAssocs = craAssocs' 0
{-# INLINE craAssocs #-}
%%]

%%[(8 corerun) hs export(Bind)
-- | Bind, just an Exp, addressing is left implicit
type Bind = Exp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun) hs export(unit)
-- | Equivalent of '()'
unit :: Exp
unit = Exp_Tup CTagRec emptyCRArray
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Running Core: runtime references
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun) hs export(RRef(..), noRRef)
-- | Identifier references for use during running CoreRun
data RRef
  = RRef_Glb				-- ^ global reference to module and its entry
      { rrefMod			:: !Int		-- ^ module
      , rrefEntry		:: !Int		-- ^ entry inside module
      }
  | RRef_Loc				-- ^ local reference to on stack value
      { rrefLev			:: !Int		-- ^ level
      , rrefEntry		:: !Int		-- ^ entry inside level
      }
  | RRef_Tag				-- ^ tag of memory/constructor node referred to by other ref (not yet used)
      { rrefRef			:: !RRef	-- ^ of what this is the tag
      }
  | RRef_Fld				-- ^ fld of memory/constructor node referred to by other ref
      { rrefRef			:: !RRef	-- ^ of what this is a field
      , rrefEntry		:: !Int		-- ^ entry inside level
      }
  | RRef_Dbg				-- ^ debug variant, holding original name
      { rrefNm			:: !HsName
      }
  deriving (Eq,Ord)

instance Show RRef where
  show _ = "RRef"

noRRef = RRef_Dbg hsnUnknown
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name mapping: to & from RRef
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 corerun) hs export(Ref2Nm)
-- | RRef to HsName mapping for use during running when a more informative name is required.
-- The representation is lazily via function
type Ref2Nm = RRef -> Maybe HsName
%%]

%%[(8 corerun) hs export(Nm2RefMp, nm2RefMpInverse, ref2nmEmpty, ref2nmUnion)
-- | HsName to RRef mapping for resolving references during translation to CoreRun
type Nm2RefMp = Map.Map HsName RRef

-- | Inverse of a `Nm2RefMp`
nm2RefMpInverse :: Nm2RefMp -> Ref2Nm
nm2RefMpInverse m
  | Map.null m = const Nothing
  | otherwise  = flip Map.lookup inv
  where inv = Map.fromList [ (r,n) | (n,r) <- Map.toList m ]

-- | Empty Ref2Nm
ref2nmEmpty :: Ref2Nm
ref2nmEmpty = const Nothing

-- | Union, left-biased
ref2nmUnion :: Ref2Nm -> Ref2Nm -> Ref2Nm
ref2nmUnion m1 m2 = \r -> m1 r <|> m2 r
%%]


