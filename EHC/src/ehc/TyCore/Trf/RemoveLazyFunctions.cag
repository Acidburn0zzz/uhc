%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Remove lazy bound lambdas
%%% 
%%% Perhaps beter to never generate them in the first place, but this is easier for now.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}TyCore.Trf.RemoveLazyFunctions}
%%]

%%[(8 tauphi) hs import({%{EH}TauPhi.Common})
%%]
 
%%[(8 codegen) hs import({%{EH}Base.Builtin},{%{EH}Base.Opts},{%{EH}Base.Common})
%%]

%%[(8 codegen) hs import(Data.Bool.Extras)
%%]

%%[(8 codegen) hs import(Data.Maybe)
%%]

%%[(8 codegen) hs import({%{EH}TyCore})
%%]

%%[1 hs import(Debug.Trace)
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapping
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen).WRAPPER ag import({TyCore/AbsSyn})
WRAPPER AGItf
%%]

%%[(8 codegen)
PRAGMA nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen).tcmodTrfRemoveLazyFunctions hs
cmodTrfRemoveLazyFunctions :: Module -> Module
cmodTrfRemoveLazyFunctions tcmod
  =  let  t = wrap_AGItf (sem_AGItf (AGItf_AGItf tcmod)) Inh_AGItf
     in   cTrf_Syn_AGItf t
%%]

%%[(8 codegen)
ATTR AGItf [ | | cTrf : Module ]

SEM AGItf
  | AGItf       lhs         .   cTrf        =   @module.cTrf
%%]

%%[(8 codegen)
ATTR AllCodeNT [ | | cTrf : SELF ]
ATTR AllExpr
  [ lazyVars  : {[HsName]}
    boundLazy : {Bool}
  |
  | genLazyVars USE {++} {[]} : {[HsName]}
  ]

SEM Module
  | Mod
                tbinds      .   lazyVars    =   []
                            .   boundLazy   =   False
                vbinds      .   lazyVars    =   @vbinds.genLazyVars
                            .   boundLazy   =   False

SEM Expr
  | Let
                vbinds      .   lazyVars    =   if @categ == ValBindCateg_Rec
                                                then @extLazyVars
                                                else @lhs.lazyVars
                body        .   lazyVars    =   @extLazyVars
                loc         .   extLazyVars =   @vbinds.genLazyVars ++ @lhs.lazyVars

SEM ValBind
  | Val
                lhs         .   genLazyVars =   bool [] [@nm] @l0.isDelayLam
                l1          .   boundLazy   =   @l0.isDelayLam

SEM Expr
  | Delay
                lhs         .   cTrf        =   if @isDelayLam
                                                then @expr.cTrf
                                                else @original
                loc         .   original    =   Expr_Delay @expr.cTrf

  | Force
                lhs         .   cTrf        =   maybe @original
                                                      (\n -> bool @original
                                                                  @expr.cTrf
                                                                  (elem n @lhs.lazyVars))
                                                      @expr.mbVarNm
                loc         .   original    =   Expr_Force @expr.cTrf

  | Lazy
                lhs         .   cTrf        =   if @lhs.boundLazy
                                                then @expr.cTrf
                                                else @original
                loc         .   original    =   Expr_Lazy @expr.cTrf
                expr        .   boundLazy   =   False
%%]

%%[(8 codegen)
ATTR Expr
  [
  |
  | isLam       : {Bool}
    isDelayLam  : {Bool}
    mbVarNm     : {Maybe HsName}
  ]

SEM Expr
  | Lam
                lhs         .   isLam       =   True
  | * - Lam
                lhs         .   isLam       =   False
  | Delay
                lhs         .   isDelayLam  =   @isDelayLam
                loc         .   isDelayLam  =   @expr.isLam
  | * - Delay
                lhs         .   isDelayLam  =   False
  | Var
                lhs         .   mbVarNm     =   Just @nm
  | * - Var
                lhs         .   mbVarNm     =   Nothing
%%]

