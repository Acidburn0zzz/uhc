MODULE {ViewSel.Self} {viewSelsSelfT, rlSelSelfT}
{
import EH.Util.Nm
import EH.Util.DependencyGraph
import ViewSel.ViewSel

}
{
}
{
}
{
}
INCLUDE "ViewSel/AbsSynAG.ag"
WRAPPER AGViewSelsItf
WRAPPER AGRlSelItf

{
wrapViewSelsT :: T_ViewSels -> Syn_AGViewSelsItf
wrapViewSelsT vs
  = let r1 = sem_AGViewSelsItf_AGItf vs
    in  wrap_AGViewSelsItf r1
            (Inh_AGViewSelsItf)

viewSelsSelfT :: ViewSels -> ViewSels
viewSelsSelfT vs
  = self_Syn_AGViewSelsItf r
  where r = wrapViewSelsT (sem_ViewSels vs)

wrapRlSelT :: T_RlSel -> Syn_AGRlSelItf
wrapRlSelT  vs
  = let r1 = sem_AGRlSelItf_AGItf vs
    in  wrap_AGRlSelItf r1
            (Inh_AGRlSelItf)

rlSelSelfT :: RlSel -> RlSel
rlSelSelfT vs
  = self_Syn_AGRlSelItf r
  where r = wrapRlSelT (sem_RlSel vs)


}
ATTR AllViewSel AllRlSel AllNmSel [ | | self: SELF ]
ATTR AGViewSelsItf [ | | self: ViewSels ]
ATTR AGRlSelItf [ | | self: RlSel ]
