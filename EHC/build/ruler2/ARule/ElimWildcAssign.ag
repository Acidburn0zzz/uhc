MODULE {ARule.ElimWildcAssign} {arlElimWild}
{
import qualified Data.Map as Map
import Common
import Expr.Expr
import ARule.ARule

}
{
}
{
}
{
}
INCLUDE "Expr/AbsSynAG.ag"
INCLUDE "ARule/AbsSynAG.ag"
WRAPPER  AGARuleItf

{

arlElimWild :: ARule -> ARule
arlElimWild rl
  = replEw_Syn_AGARuleItf r2
  where r1 = sem_AGARuleItf (AGARuleItf_AGItf rl)
        r2 = wrap_AGARuleItf r1
                (Inh_AGARuleItf)

}
ATTR AllARule AllExpr [ | | replEw: SELF ]
ATTR AGARuleItf [ | | replEw: ARule ]
ATTR AEqns AEqn [ | | replEwEqns USE {++} {[]}: {[AEqn]} ]

SEM AEqn
  | Eqn             lhs     .   replEwEqns  =   case @dest.replEw of
                                                  AEqnDest_One ANm_Wild -> []
                                                  _                     -> [@replEw]
  | * - Eqn         lhs     .   replEwEqns  =   [@replEw]

SEM ARule
  | Rule            lhs     .   replEw      =   ARule_Rule @ndNmL @rlNm @info @eqns.replEwEqns

