MODULE {TrfAS2.GenLaTeX} {as2LaTeX}
{
import Data.Maybe
import Data.Char
import Data.List
import qualified Data.Set as Set
import qualified Data.Map as Map
import EH.Util.Utils
import Opts
import Err
import Common
import KeywParser (propsSynInhMp)
import Expr.Utils
import ARule.Utils
import FmGam
import RwExprGam
import ECnstrGam
import AbsSyn.AbsSyn2
import Admin
import Utils
import EH.Util.Pretty

}
{
}
{
}
{
}
{
}
{
}
{
}
INCLUDE "AbsSyn/AbsSyn2AG.ag"
INCLUDE "AbsSyn/CommonAG.ag"
INCLUDE "AS2/Opts.ag"
INCLUDE "TrfAS2/CommonAG.ag"
INCLUDE "Expr/AbsSynAG.ag"
INCLUDE "Expr/SelfAG.ag"
INCLUDE "ARule/AbsSynAG.ag"
INCLUDE "ARule/SelfAG.ag"
WRAPPER AGItf

{
as2LaTeX :: Opts -> DtInvGam -> ScGam Expr -> FmGam Expr -> RwExprGam -> Decls -> (Decls,PP_Doc,[Err])
as2LaTeX o _ scg fmg rwg r
  = (self_Syn_AGItf r2,ppDbg_Syn_AGItf r2,errL_Syn_AGItf r2)
  where r1 = sem_AGItf (AGItf_AGItf r)
        r2 = wrap_AGItf r1
                (Inh_AGItf {opts_Inh_AGItf = o, fmGam_Inh_AGItf = fmg, rwGam_Inh_AGItf = rwg, scGam_Inh_AGItf = scg})

}
ATTR AllVw [ rsDescr: String | | ]

SEM RsVwDecl
  | Rs              loc     .   rsDescr     =   @descr

ATTR AllRl [ | | rlFullNmL USE {++} {[]}: {[Nm]} ]

SEM RlDecl
  | Rl              lhs     .   rlFullNmL   =   [@fullNm]
  | LTXAlias        lhs     .   rlFullNmL   =   [@fullAliasNm]

ATTR AllVw [ | | rlVwDecls, figVwDecls USE {++} {[]}: {[VwDecl]} ]

SEM RsVwDecl
  | Rs              lhs     .   self        =   RsVwDecl_Rs @nm @scNm @descr (@vwDecls.rlVwDecls ++ @vwDecls.figVwDecls)

SEM VwDecl
  | Vw              lhs     .   (rlVwDecls,figVwDecls)
                                            =   let scMetaNm = @fullNm `nmApd` Nm "scheme"
                                                    (scInfo,vwScInfo)
                                                      = maybe (panic "VwDecl_Vw: scInfo") id
                                                        $ scVwGamLookup @lhs.rsScNm @vwNm @lhs.scGam
                                                    eScm
                                                      = exprSubst (@lhs.opts {optSubstOnce=True}) @lhs.fmGam
                                                        . jdGamFmExpr @lhs.fm . vwscJdShpGam
                                                        $ vwScInfo
                                                in  ( [ VwDecl_LTX @nm scMetaNm eScm @rlDecls.self ]
                                                    , [ VwDecl_LTXFig @nm @fullNm scMetaNm @lhs.rsDescr @rlDecls.rlFullNmL ]
                                                    )

SEM RlDecl
  | Rl              lhs     .   self        =   let
                                                in  RlDecl_LTX @fullNm @rlNm @lhs.vwNm @pos @preJds.self @postJds.self

SEM Jd
  | Expr            loc     .   exprRW      =   exprRewrite (@lhs.opts {optSubstFullNm=False}) @lhs.fmGam @lhs.rwGam emptyGam @expr.self
                    lhs     .   self        =   Jd_LTX @nm @scNm @exprRW @isSmall

{-
                    lhs     .   self        =   Jd_LTX @nm @scNm (exprSubst (@lhs.opts {optSubstFullNm=False}) @lhs.fmGam @expr.self)
-}

