MODULE {EH101.Ty.UsedNames} {tyUsedNames}
{
import Data.List
import EH101.Base.Common
import EH101.Ty
import qualified Data.Set as Set
import qualified Data.Map as Map
import EH101.Module

}
{
}
{
}
{
}
{
}
INCLUDE "Ty/AbsSyn.ag"
WRAPPER
  TyAGItf

{
tyUsedNames :: HsName -> Ty -> ModEntRelFilterMp
tyUsedNames moduleNm ty
  = mentrelFilterMp_Syn_TyAGItf t
  where t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 (Inh_TyAGItf
                   { moduleNm_Inh_TyAGItf = moduleNm
                   })

}
ATTR TyAGItf AllTy [ moduleNm: HsName | | ]

ATTR TyAGItf AllTy [ | | mentrelFilterMp USE {`mentrelFilterMpUnion`} {Map.empty}: ModEntRelFilterMp ]

SEM Ty
  | Con             lhs     .   mentrelFilterMp
  											=   mentrelFilterMpSingleton [@lhs.moduleNm] IdOcc_Type @nm

