MODULE {EH101.Ty.Ftv} {tyFtv
, tyFtvMp
, implsFtvMp}
{
import Data.List
import EH101.Base.Common
import EH101.Ty
import qualified Data.Set as Set
import qualified Data.Map as Map

}
{
}
{
}
{
}
INCLUDE "Ty/AbsSyn.ag"
WRAPPER
  TyAGItf

{
tyFtv :: Ty -> Set.Set TyVarId
tyFtv = Map.keysSet . Map.filter (\i -> tvpurposeIsTy (tvinfoPurpose i)) . tyFtvMp

}
{
tyFtvMp :: Ty -> TvCatMp
tyFtvMp ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 (Inh_TyAGItf)
     in   tvMp_Syn_TyAGItf t

}
{
implsFtvMp :: Impls -> TvCatMp
implsFtvMp i = tyFtvMp (Ty_Impls i)

}
ATTR
  TyAGItf AllTy
    [ | | tvMp USE {`Map.union`} {Map.empty}: TvCatMp ]
ATTR TyVarCateg [ | | self: SELF ]

SEM Ty
  | Var             lhs     .   tvMp        =   @tv `Map.singleton` mkTvInfoTy @categ.self
  | TBind
    Lam
                    lhs     .   tvMp        =   @tv `Map.delete` @ty.tvMp

SEM Pred
  | Var				lhs		.	tvMp		=	@pv `Map.singleton` mkTvInfoPlain TvPurpose_Pred

SEM Impls
  | Tail			lhs		.	tvMp		=	@iv `Map.singleton` mkTvInfoPlain TvPurpose_Impls


SEM PredSeq
  | Var  			lhs		.	tvMp		=	@av `Map.singleton` mkTvInfoTy TyVarCateg_Plain

