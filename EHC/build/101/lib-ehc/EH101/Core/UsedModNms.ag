MODULE {EH101.Core.UsedModNms} {cmodUsedModNms}
{
import qualified Data.Set as Set
import Data.Maybe
import EH101.Base.Common
import EH101.Base.Builtin
import EH101.Core
import EH101.Ty

}
{
}
{
}
INCLUDE "Core/AbsSyn.ag"
INCLUDE "Core/CommonBindNm.ag"
WRAPPER CodeAGItf

{
cmodUsedModNms :: CModule -> HsNameS
cmodUsedModNms m
  =  let  t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf m)) Inh_CodeAGItf
     in   usedModNmS_Syn_CodeAGItf t

}
ATTR AllNT CodeAGItf [ | | usedModNmS USE {`Set.union`} {Set.empty}: HsNameS ]

SEM CExpr
  | Var         lhs         .   usedModNmS  =   Set.fromList $ maybeToList $ hsnQualifier @nm
