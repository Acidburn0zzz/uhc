MODULE {EH101.Core.Trf.ElimTrivApp} {cmodTrfElimTrivApp}
{
import Data.Maybe
import qualified Data.Set as Set
import qualified Data.Map as Map
import EH101.Base.Common
import EH101.Base.Builtin
import EH101.Opts
import EH101.Core
import EH101.Ty
import EH.Util.Utils

}
{
}
{
}
{
}
INCLUDE "Core/AbsSyn.ag"
INCLUDE "Core/CommonLev.ag"
INCLUDE "Core/CommonCtxtPred.ag"
INCLUDE "Core/Trf/CommonFv.ag"
INCLUDE "Core/Trf/CommonStructureInfo.ag"
INCLUDE "Core/CommonBindNm.ag"
WRAPPER CodeAGItf

PRAGMA strictcase

{
cmodTrfElimTrivApp :: EHCOpts -> CModule -> CModule
cmodTrfElimTrivApp opts cmod
  =  let  t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod)) (Inh_CodeAGItf {opts_Inh_CodeAGItf = opts})
     in   cTrf_Syn_CodeAGItf t

}
ATTR AllCodeNT CodeAGItf [ opts: EHCOpts | | ]

ATTR AllCodeNT [ | | cTrf: SELF ]
ATTR CodeAGItf [ | | cTrf: CModule ]

SEM CExpr
  | App         lhs         .   cTrf        =   if @lhs.isTopApp
                                                then case (@func.mbFunVar,reverse @argL) of
                                                       (Just f,[a]) | f == (ehcOptBuiltin @lhs.opts ehbnId)
                                                         -> acoreUnBoundVal a
                                                       _ -> @cTrf
                                                else @cTrf

