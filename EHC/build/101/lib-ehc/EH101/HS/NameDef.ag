ATTR
  AGItf AllModuleDeclaration AllFunctionBinding TypeLeftHandSide LeftHandSide AllFieldDeclaration AllConstructor
  AllExpression AllPattern AllTypePattern AllRowRecordPatternBinding
    [ moduleNm: HsName | | ]

SEM Body
    | Body
        loc             .   refmainname	=   hsnSetLevQual @lhs.nmLev @lhs.moduleNm hsnMain

SEM Declaration
    | Fixity
        loc             .   oprefnames  =   map (hsnSetLevQual @lhs.nmLev @lhs.moduleNm) @operators
    | TypeSignature
        loc             .   refnames    =   map (hsnSetLevQual @lhs.nmLev @lhs.moduleNm) @names
    | KindSignature
        loc             .   refnames    =   map (hsnSetLevQual @lhs.nmLev @lhs.moduleNm) @names
    | Data Newtype GADT
        loc             .   typerefname =   hsnSetLevQual @lhs.nmLev @lhs.moduleNm @typelefthandside.name
    | ForeignImport
        loc             .   refname     =   hsnSetLevQual @lhs.nmLev @lhs.moduleNm @name
    | Class Instance InstanceUseImplicitly
        loc             .   instancerefname
                                        =   hsnSetLevQual @lhs.nmLev @lhs.moduleNm
                                            $ maybe @instancename id @mbPrevInstancename
    | Class
        loc             .   classrefname=   hsnSetLevQual @lhs.nmLev @lhs.moduleNm @typelefthandside.name
    | Type
        loc             .   typerefname =   hsnSetLevQual @lhs.nmLev @lhs.moduleNm @typelefthandside.name

SEM Declaration
    | ForeignExport
        loc             .   exportrefname
                                        =   hsnUniqify HsNameUniqifier_FFE @name

SEM Deriving
    | Deriving
        loc             .   instancerefname
                                        =   hsnSetLevQual @lhs.nmLev @lhs.moduleNm
                                            $ maybe @instancename id @mbPrevInstancename

ATTR
  LeftHandSide
    [ | | refname: HsName ]

SEM LeftHandSide
    | Function
        loc             .   refname     =   hsnSetLevQual @lhs.nmLevFun @lhs.moduleNm @name
    | Infix
        loc             .   refname     =   hsnSetLevQual @lhs.nmLevFun @lhs.moduleNm @operator


SEM Pattern
    | Variable As
        loc             .   refname     =   hsnSetLevQual @lhs.nmLev @lhs.moduleNm @name

SEM TypePattern
    | Variable
        loc             .   refname     =   hsnSetLevQual @lhs.nmLev @lhs.moduleNm @name

ATTR AllConstructor [ | | conrefnames USE {++} {[]} : Names ]

SEM Constructor
    | Constructor Record GADTFunction
        loc             .   conrefname  =   hsnSetLevQual @lhs.nmLev @lhs.moduleNm @constructor
    | Infix
        loc             .   conrefname  =   hsnSetLevQual @lhs.nmLev @lhs.moduleNm @constructorOperator

SEM Constructor
    | Constructor
      GADTFunction
        lhs             .   conrefnames =   [@conrefname]
    | Infix
        lhs             .   conrefnames =   [@conrefname]
SEM Constructor
    | Record
        lhs             .   conrefnames =   [@conrefname]

ATTR AllFieldDeclaration [ | | fldrefnames USE {++} {[]} : Names ]
ATTR AllConstructor [ | | conAndFldrefnames USE {++} {[]} : {AssocL Name Names} ]

SEM FieldDeclaration
    | FieldDeclaration
        loc             .   fldrefnames =   map (hsnSetLevQual @lhs.nmLev @lhs.moduleNm) @names

SEM Constructor
    | Record
    	loc				.	conAndFldrefnames
    									=	[(@conrefname,@fieldDeclarations.fldrefnames)]

SEM RecordPatternBinding
    | Pun
        loc             .   refname     =   hsnSetLevQual @lhs.nmLev @lhs.moduleNm @name

SEM Declaration
	| Class
		loc				.	extranames	=	[] -- map snd @generDerivInfoL

SEM Pattern
    | Variable As
        loc             .   isWildcard  =   hsnIsWild @name

ATTR
  AllPattern
  AllDeclaration AllFunctionBinding
  LeftHandSide
  TypeLeftHandSide
  AllRowRecordPatternBinding
  AllRecordPatternBinding
    [ | | idOccDefs USE {++} {[]} : {[IdOcc]} ]

SEM Declaration
    | TypeSignature
        loc             .   idOccDefs   =   [ IdOcc n IdOcc_Val | n <- @refnames ]
    | FunctionBindings
        loc             .   idOccDefs   =   @bindings.idOccDefs
    | PatternBinding
        loc             .   idOccDef    =   IdOcc (maybe (mkHNm @lUniq) id @pattern.mbTopRefname) IdOcc_Pat
                        .   idOccDefsPat=   [@idOccDef]
                        .   idOccDefs   =   @pattern.idOccDefs
		loc				.	lUniq		:	UNIQUEREF gUniq
    | Data Newtype
      GADT
        loc             .   idOccDef    =   IdOcc @typerefname IdOcc_Type
                        .   idOccDefsCon=   [ IdOcc n IdOcc_Val | n <- @constructors.conrefnames ]
                        .   idOccDefsFld=   concat [ [IdOcc n IdOcc_Val, IdOcc n IdOcc_Fld] | (_,ns) <- @constructors.conAndFldrefnames, n <- ns ]
                        .   generMaxRemArity
                                        =   length @typelefthandside.typevariables `min` 1
                        .   idOccDefsGener
                                        =   if ehcOptGenGenerics @lhs.opts
                                            then [ IdOcc (hsnNm2GenerReprSyn arity @typerefname) IdOcc_Type | arity <- [0 .. @generMaxRemArity] ]
                                            else []
                        .   idOccDefs   =   [@idOccDef]
                                            ++ @idOccDefsCon
                                            ++ @idOccDefsFld
                                            ++ @idOccDefsGener
    | KindSignature
        loc             .   idOccDefs   =   [ IdOcc n IdOcc_Type | n <- @refnames ]
    | Class
        loc             .   idOccDef    =   IdOcc @classrefname IdOcc_Class
                        .   idOccDefVal =   IdOcc @instancerefname IdOcc_Val
                        .   idOccDefsSig=   @where.idOccDefs -- !!!! a bit too optimistic, value defs also included (but they are not permitted, checked later only)
                        .   idOccDefs   =   [@idOccDef] ++ @idOccDefsSig
    | Instance
        loc             .   idOccDef    =   IdOcc @instancerefname IdOcc_Inst
                        .   idOccDefVal =   IdOcc @instancerefname IdOcc_Val
                        .   idOccDefs   =   [@idOccDef,@idOccDefVal]
    | InstanceUseImplicitly
        loc             .   idOccDef    =   IdOcc @instancerefname IdOcc_Inst
                        .   idOccDefs   =   [@idOccDef]
    | Default
        loc             .   idOccDef    =   IdOcc @defaultname IdOcc_Dflt
                        .   idOccDefs   =   [@idOccDef]
    | Type
        loc             .   idOccDef    =   IdOcc @typerefname IdOcc_Type
                        .   idOccDefs   =   [@idOccDef]
    | ForeignImport
        loc             .   idOccDef    =   IdOcc @refname IdOcc_Val
                        .   idOccDefs   =   [@idOccDef]
    | ForeignExport
        loc             .   idOccDef    =   IdOcc @exportrefname IdOcc_Val
                        .   idOccDefs   =   [@idOccDef]
    | FusionDeclaration FusionConversion
        loc             .   idOccDef    =   IdOcc (mkHNm @lUniq) IdOcc_Fusion
                        .   idOccDefs   =   [@idOccDef]
		loc				.	lUniq		:	UNIQUEREF gUniq

SEM FunctionBinding
    | FunctionBinding
        loc             .   idOccDef    =   IdOcc @lefthandside.refname IdOcc_Val
                        .   idOccDefs   =   [@idOccDef]

SEM Pattern
    | Variable As
        loc             .   idOccDef    =   IdOcc @refname IdOcc_Val
                        .   idOccDefsNoWildcard
                                        =   if @isWildcard then [] else [@idOccDef]
    | Variable
        loc             .   idOccDefs   =   @idOccDefsNoWildcard
    | As
        loc             .   idOccDefs   =   @idOccDefsNoWildcard ++ @pattern.idOccDefs

SEM RecordPatternBinding
    | Pun
        loc             .   idOccDef    =   IdOcc @refname IdOcc_Val

SEM Body
    | Body
        loc             .   idOccDefMain=   IdOcc hsnMain IdOcc_Val

SEM Deriving
    | Deriving
        loc             .   idOccDef    =   IdOcc @instancerefname IdOcc_Inst
                        .   idOccDefVal =   IdOcc @instancerefname IdOcc_Val
                        .   idOccDefs   =   [@idOccDef,@idOccDefVal]

ATTR
  TypeLeftHandSide
    [ | | range: Range  name: Name ]
ATTR
  TypeLeftHandSide AllTypePattern
    [ | | typevariables USE {++} {[]}: Names ]

SEM TypeLeftHandSide
    | Function
        lhs         .   range       =   @range
                    .   name        =   @name
    | Infix
        lhs         .   range       =   @range
                    .   name        =   @operator

SEM TypePattern
    | Variable
        lhs         .   typevariables
                                    =   [@name]

SEM Pattern
    | Constructor
      Record
        loc         .   conNm       =   @name
    | InfixConstructor
        loc         .   conNm       =   @constructorOperator

ATTR Pattern [ | | mbTopRefname: {Maybe HsName} ]

SEM Pattern
    | Variable As
        lhs         .   mbTopRefname=   if @isWildcard then Just @refname else Nothing
    | * - Variable As
        lhs         .   mbTopRefname=   Nothing

SEM Declaration
    | Instance
        -- loc         .   instancename=   maybe (hsnUniqifyUID HsNameUniqifier_ClassDict @lUniq (mkHNm @name)) id @maybeinstancename -- maybe (hsnSuffix (mkHNm @lUniq) ("_instance_"++ show @name)) id @maybeinstancename
        loc         .   instancename=   maybe (hsnUniqifyUID HsNameUniqifier_ClassDict @lUniq (@type.conNm)) id @maybeinstancename -- maybe (hsnSuffix (mkHNm @lUniq) ("_instance_"++ show @name)) id @maybeinstancename
    | Class
        loc         .   instancename=   hsnUniqifyUID HsNameUniqifier_Class @lUniq (mkHNm @typelefthandside.name) -- hsnSuffix (mkHNm @lUniq) ("_class_"++ show @typelefthandside.name)
    | InstanceUseImplicitly
        loc         .   instancename=   mkHNm @lUniq
    | Default
        loc         .   defaultname =   mkHNm @lUniq

SEM Declaration
    | Instance Class InstanceUseImplicitly Default
		loc			.	lUniq		:	UNIQUEREF gUniq

SEM Deriving
    | Deriving
        loc         .   instancename=   maybe (mkHNm @lUniq) id @maybeinstancename
		loc			.	lUniq		:	UNIQUEREF gUniq

ATTR Type Expression [ | | conNm: Name ]

SEM Type
    | Constructor
        lhs         .   conNm       =   @name
    | InfixApplication
        lhs         .   conNm       =   @operator.conNm
    | * - Constructor NormalApplication InfixApplication
          InfixApplicationChainTop
        lhs         .   conNm       =   hsnUnknown

SEM Expression
    | Constructor
        lhs         .   conNm       =   @name
    | * - Constructor
        lhs         .   conNm       =   hsnUnknown
