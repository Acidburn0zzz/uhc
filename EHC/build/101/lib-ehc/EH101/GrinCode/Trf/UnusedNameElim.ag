MODULE {EH101.GrinCode.Trf.UnusedNameElim} {grUnusedNameElim}
{
import qualified Data.Map as Map
import qualified Data.Set as Set
import EH101.Base.Builtin
import EH101.Base.Common
import EH101.GrinCode.Common
import EH101.GrinCode
import qualified EH101.Config as Cfg

}
INCLUDE "GrinCode/AbsSyn.ag"
{
}
{
}
{
}
{
}
INCLUDE "GrinCode/Trf/CommonAliasAG.ag"
INCLUDE "GrinCode/Trf/CommonFreeVar.ag"
{
grUnusedNameElim :: GrModule -> GrModule
grUnusedNameElim grmod
  = trf_Syn_GrAGItf t
  where t = wrap_GrAGItf (sem_GrAGItf $ GrAGItf_AGItf grmod)
            $ Inh_GrAGItf

}
WRAPPER GrAGItf


ATTR GrAGItf [ | | trf: GrModule ]
ATTR AllNT [ | | trf: SELF ]

{
grExprIsElimable :: GrExpr -> Bool
grExprIsElimable (GrExpr_Unit  _ _) = True
grExprIsElimable (GrExpr_Store _  ) = True
grExprIsElimable (GrExpr_App _ _  ) = True
grExprIsElimable _                  = False

}
SEM GrExpr
  | Seq         lhs         .   trf             =   case (@pat.nmAlias, @trf, @body.trf) of
                                                      (NmAlias_Nm n1,GrExpr_Seq e (GrPatLam_Var p) b,_) | grExprIsElimable e && not (n1 `Map.member` @body.gathFviMp)
                                                        -> b
                                                      _ -> @trf

