MODULE {EH101.AnaDomain.Trf.Subst} {relevtyAppVarLookup
, relevqualAppVarLookup
, relevcoeAppVarLookup}
{
import EH101.Base.Common
import EH101.AnaDomain
import EH101.VarMp
import EH.Util.Utils

}
{
}
{
}
INCLUDE "AnaDomain/AbsSyn.ag"
WRAPPER TyAGItf QualAGItf CoeAGItf

{
relevtyAppVarLookup :: VarLookup m UID RVarMpInfo => m -> RelevTy -> RelevTy
relevtyAppVarLookup varmp ty
  = repl_Syn_TyAGItf t
  where t = wrap_TyAGItf
              (sem_TyAGItf (TyAGItf_AGItf ty))
              (Inh_TyAGItf {rvarLookup_Inh_TyAGItf = varlookupFix varmp})

}
{
relevqualAppVarLookup :: VarLookup m UID RVarMpInfo => m -> RelevQual -> RelevQual
relevqualAppVarLookup varmp qual
  = repl_Syn_QualAGItf t
  where t = wrap_QualAGItf
              (sem_QualAGItf (QualAGItf_AGItf qual))
              (Inh_QualAGItf {rvarLookup_Inh_QualAGItf = varlookupFix varmp})

}
{
relevcoeAppVarLookup :: VarLookup m UID RVarMpInfo => m -> RelevCoe -> RelevCoe
relevcoeAppVarLookup varmp coe
  = repl_Syn_CoeAGItf t
  where t = wrap_CoeAGItf
              (sem_CoeAGItf (CoeAGItf_AGItf coe))
              (Inh_CoeAGItf {rvarLookup_Inh_CoeAGItf = varlookupFix varmp})

}
ATTR TyAGItf QualAGItf CoeAGItf AllNT [ rvarLookup: {VarLookupFix UID RVarMpInfo} | | ]

SEM AnaEval
  | Var             inst    .   repl'       :   AnaEval
                    (loc.replv,loc.isRepl)  =   maybe (@repl,False) (\t -> (t,True)) $ rvmiMbEval $? @lhs.rvarLookup @av
                    inst    .   repl'       =   if @isRepl then @replv else AnaEval_WHNF

ATTR AllNT     [ | | repl: SELF  		]
ATTR TyAGItf   [ | | repl: RelevTy    	]
ATTR QualAGItf [ | | repl: RelevQual   	]
ATTR CoeAGItf  [ | | repl: RelevCoe   	]

SEM RelevTy
  | Fun				loc		.	rvarLookup	=	varlookupFixDel @quants @lhs.rvarLookup

SEM AnaEval
  | Var             lhs     .   repl        =   if @isRepl
                                                then @repl'.repl
                                                else @repl

