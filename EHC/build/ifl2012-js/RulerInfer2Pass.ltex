%include lhs2TeX.fmt
%include afp.fmt


\rulerCmdDef{infer2pass.I2.fit.scheme}{%
\ensuremath{| fiopt ; ICnstr :- | ^{ |  <=  | } |  tau | _{ | l | } |  <= tau | _{ | r | } |  : tau | _{ | f | } |  ~> Cnstr | }
}
\rulerCmdDef{infer2pass.I2.fit.fit}{%
\rulerRule{fit}{I2}
{%
| fioFitY , fiopt ; ICnstr :- | ^{ |  <=>  | } |  ICnstr sigma | _{ | l | } |  <=> ICnstr sigma | _{ | r | } |  : sigma | _{ | f | } |  ~> Cnstr | 
}
{%
| fiopt ; ICnstr :- | ^{ |  <=  | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma | _{ | f | } |  ~> Cnstr | 
}
}

\rulerCmdDef{infer2pass.I2.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I2.fit.scheme}}{Fitting of types}{infer2pass.I2.fit}{I2}
\rulerCmdUse{infer2pass.I2.fit.fit}
\end{rulerRulesetFigure}
}

\rulerCmdDef{infer2pass.I2.join.scheme}{%
\ensuremath{| fiopt ; ICnstr :- | ^{ |  <->  | } |  tau | _{ | l | } |  <-> tau | _{ | r | } |  : tau | _{ | f | } |  ~> Cnstr | }
}
\rulerCmdDef{infer2pass.I2.join.join}{%
\rulerRule{join}{I2}
{%
| fioJoinY , fiopt ; ICnstr :- | ^{ |  <=>  | } |  ICnstr sigma | _{ | l | } |  <=> ICnstr sigma | _{ | r | } |  : sigma | _{ | f | } |  ~> Cnstr | 
}
{%
| fiopt ; ICnstr :- | ^{ |  <->  | } |  sigma | _{ | l | } |  <-> sigma | _{ | r | } |  : sigma | _{ | f | } |  ~> Cnstr | 
}
}

\rulerCmdDef{infer2pass.I2.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I2.join.scheme}}{Join of types}{infer2pass.I2.join}{I2}
\rulerCmdUse{infer2pass.I2.join.join}
\end{rulerRulesetFigure}
}

\rulerCmdDef{infer2pass.I2.meet.scheme}{%
\ensuremath{| fiopt ; ICnstr :- | ^{ |  <+>  | } |  tau | _{ | l | } |  <+> tau | _{ | r | } |  : tau | _{ | f | } |  ~> Cnstr | }
}
\rulerCmdDef{infer2pass.I2.meet.meet}{%
\rulerRule{meet}{I2}
{%
| fioMeetY , fiopt ; ICnstr :- | ^{ |  <=>  | } |  ICnstr sigma | _{ | l | } |  <=> ICnstr sigma | _{ | r | } |  : sigma | _{ | f | } |  ~> Cnstr | 
}
{%
| fiopt ; ICnstr :- | ^{ |  <+>  | } |  sigma | _{ | l | } |  <+> sigma | _{ | r | } |  : sigma | _{ | f | } |  ~> Cnstr | 
}
}

\rulerCmdDef{infer2pass.I2.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I2.meet.scheme}}{Meet of types}{infer2pass.I2.meet}{I2}
\rulerCmdUse{infer2pass.I2.meet.meet}
\end{rulerRulesetFigure}
}

\rulerCmdDef{infer2pass.HM.prog.scheme}{%
\ensuremath{|  :- | ^{ | prog | } |  prog | }
}
\rulerCmdDef{infer2pass.HM.prog.p.prog}{%
\rulerRule{p.prog}{HM}
{%
|  []  ;  []  :- | ^{ | e | } |  e : _ ~> _ | 
}
{%
|  :- | ^{ | prog | } |  e | 
}
}

\rulerCmdDef{infer2pass.I1.prog.scheme}{%
\ensuremath{|  :- | ^{ | prog | } |  prog | }
}
\rulerCmdDef{infer2pass.I1.prog.p.prog}{%
\rulerRule{p.prog}{I1}
{%
| | \rulerChngBegMark{} |  v | \rulerChngEndMark{} |  | \;\mbox{fresh} |  | 
\\
| | \rulerChngBegMark{} |   []  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |   []  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |   []  | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  v | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  e | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  _ | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  _ | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |   :- | ^{ | prog | } |  e | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.prog.scheme}{%
\ensuremath{|  :- | ^{ | prog | } |  prog | }
}
\rulerCmdDef{infer2pass.I2.prog.p.prog}{%
\rulerRule{p.prog}{I2}
{%
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |   []  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |   []  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |   []  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  v | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  e | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  _ | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  _ | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  _ | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |   :- | ^{ | prog | } |  e | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.HM.prog}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.HM.prog.scheme}}{Program}{infer2pass.HM.prog}{HM}
\rulerCmdUse{infer2pass.HM.prog.p.prog}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.I1.prog}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I1.prog.scheme}}{Program}{infer2pass.I1.prog}{I1}
\rulerCmdUse{infer2pass.I1.prog.p.prog}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.I2.prog}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I2.prog.scheme}}{Program}{infer2pass.I2.prog}{I2}
\rulerCmdUse{infer2pass.I2.prog.p.prog}
\end{rulerRulesetFigure}
}

\rulerCmdDef{infer2pass.HM.expr.base.scheme}{%
\ensuremath{| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  e : tau ~> Cnstr | }
}
\rulerCmdDef{infer2pass.HM.expr.base.e.int}{%
\rulerRule{e.int}{HM}
{%
}
{%
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  int : Int ~> Cnstr | ^{ | k | } |  | 
}
}

\rulerCmdDef{infer2pass.HM.expr.base.e.var}{%
\rulerRule{e.var}{HM}
{%
| i :-> sigma `elem` Gamma | 
\\
| tau = inst (sigma) | 
}
{%
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  i : tau ~> Cnstr | ^{ | k | } |  | 
}
}

\rulerCmdDef{infer2pass.HM.expr.base.e.app}{%
\rulerRule{e.app}{HM}
{%
| v | \;\mbox{fresh} |  | 
\\
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  f : tau | _{ | f | } |  ~> Cnstr | _{ | f | } |  | 
\\
| Cnstr | _{ | f | } |  ; Gamma :- | ^{ | e | } |  a : tau | _{ | a | } |  ~> Cnstr | _{ | a | } |  | 
\\
|  :- | ^{ |  <=>  | } |  Cnstr | _{ | a | } |  (tau | _{ | a | } |  -> v) <=> Cnstr | _{ | a | } |  tau | _{ | f | } |  ~> Cnstr | 
}
{%
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  f a : Cnstr Cnstr | _{ | a | } |  v ~> Cnstr Cnstr | _{ | a | } |  | 
}
}

\rulerCmdDef{infer2pass.HM.expr.base.e.lam}{%
\rulerRule{e.lam}{HM}
{%
| v | \;\mbox{fresh} |  | 
\\
| Cnstr | ^{ | k | } |  ; (i :-> v) , Gamma :- | ^{ | e | } |  b : tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | 
}
{%
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |   \ i -> b : Cnstr | _{ | b | } |  v -> tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | 
}
}

\rulerCmdDef{infer2pass.HM.expr.base.e.let}{%
\rulerRule{e.let}{HM}
{%
| v | \;\mbox{fresh} |  | 
\\
| Cnstr | ^{ | k | } |  ; (i :-> v) , Gamma :- | ^{ | e | } |  e : tau | _{ | e | } |  ~> Cnstr | _{ | e | } |  | 
\\
|  :- | ^{ |  <=>  | } |  Cnstr | _{ | e | } |  v <=> tau | _{ | e | } |  ~> Cnstr | 
\\
| sigma | _{ | e | } |  = forall (ftv (tau | _{ | e | } | ) \\ ftv (Cnstr Cnstr | _{ | e | } |  Gamma)) . tau | _{ | e | } |  | 
\\
| Cnstr Cnstr | _{ | e | } |  ; (i :-> sigma | _{ | e | } | ) , Gamma :- | ^{ | e | } |  b : tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | 
}
{%
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  let i = e in b : tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.base.scheme}{%
\ensuremath{| ICnstr | ^{ | k | } |  ; Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : tau ~> ICnstr ; Cnstr | }
}
\rulerCmdDef{infer2pass.I1.expr.base.e.int}{%
\rulerRule{e.int}{I1}
{%
| | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  :- | \rulerChngBegMark{} |  Int | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr | \rulerChngEndMark{} |  | 
}
{%
| | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  int | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  Int | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.base.e.char}{%
\rulerRule{e.char}{I1}
{%
| ICnstr | ^{ | k | } |  :- Char <= sigma | ^{ | k | } |  ~> Cnstr | 
}
{%
| ICnstr | ^{ | k | } |  ; Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : Char ~> Cnstr ICnstr | ^{ | k | } |  ; Cnstr | ^{ | k | } |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.base.e.var}{%
\rulerRule{e.var}{I1}
{%
| | \rulerSameBegMark{} |  i :-> sigma `elem` Gamma | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  :- | \rulerChngBegMark{} |  sigma | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr | \rulerChngEndMark{} |  | 
}
{%
| | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  i | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.base.e.app}{%
\rulerRule{e.app}{I1}
{%
| | \rulerChngBegMark{} |  v | \rulerChngEndMark{} |  , | \rulerChngBegMark{} |  v | _{ | a | } |  | \rulerChngEndMark{} |  | \;\mbox{fresh} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  v | _{ | a | } |  -> sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  f | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  tau | _{ | f | } |  | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | f | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | f | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | _{ | f | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | f | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  v | _{ | a | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  a | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  tau | _{ | a | } |  | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | a | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | a | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  f a | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | a | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  Cnstr | _{ | a | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.base.e.lam}{%
\rulerRule{e.lam}{I1}
{%
| | \rulerChngBegMark{} |  v | \rulerChngEndMark{} |  , | \rulerChngBegMark{} |  v | _{ | r | } |  | \rulerChngEndMark{} |  | \;\mbox{fresh} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  :- | \rulerChngBegMark{} |  v -> v | _{ | r | } |  | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr | \rulerChngEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  Cnstr ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  (i :-> v) , Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  v | _{ | r | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  b | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  tau | _{ | b | } |  | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |   \ i -> b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.base.e.let}{%
\rulerRule{e.let}{I1}
{%
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | e | } |  Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  (i :-> v) , Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  v | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  e | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  tau | _{ | e | } |  | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | e | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  sigma | _{ | e | } |  | \rulerSameEndMark{} |  = forall (ftv (| \rulerChngBegMark{} |  Cnstr | _{ | e | } |  v | \rulerChngEndMark{} | ) \\ ftv (| \rulerChngBegMark{} |  Cnstr | _{ | e | } |  Gamma | \rulerChngEndMark{} | )) . | \rulerChngBegMark{} |  Cnstr | _{ | e | } |  v | \rulerChngEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  (v :-> sigma | _{ | e | } | ) Cnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  (i :-> v) , Gamma | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  b | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  tau | _{ | b | } |  | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  let i = e in b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.base.e.tlet}{%
\rulerRule{e.tlet}{I1}
{%
| v | \;\mbox{fresh} |  | 
\\
|  []  :- | ^{ | te | } |  te : sigma | 
\\
| (v :-> sigma) ICnstr | ^{ | k | } |  ; Cnstr | ^{ | k | } |  ; (i :-> v) , Gamma ; sigma :- | ^{ | e | } |  e : tau | _{ | e | } |  ~> ICnstr | _{ | e | } |  ; Cnstr | _{ | e | } |  | 
\\
| ICnstr | _{ | e | } |  ; Cnstr | _{ | e | } |  ; (i :-> v) , Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : tau | _{ | b | } |  ~> ICnstr | _{ | b | } |  ; Cnstr | _{ | b | } |  | 
}
{%
| ICnstr | ^{ | k | } |  ; Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let i :: te = e in b : sigma | ^{ | k | } |  ~> ICnstr | _{ | b | } |  ; Cnstr | _{ | b | } |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.base.scheme}{%
\ensuremath{| ICnstr | ^{ | k | } |  ; Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; tau ~> ICnstr ; Cnstr | }
}
\rulerCmdDef{infer2pass.I2.expr.base.e.int}{%
\rulerRule{e.int}{I2}
{%
| | \rulerChngBegMark{} |  strongFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ |  <=  | } |  | \rulerChngBegMark{} |  Int | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr | \rulerChngEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  int | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  Int | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Int | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  Cnstr Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.base.e.char}{%
\rulerRule{e.char}{I2}
{%
| | \rulerChngBegMark{} |  strongFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ |  <=  | } |  | \rulerChngBegMark{} |  Char | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr | \rulerChngEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  char | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  Char | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Char | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  Cnstr Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.base.e.var}{%
\rulerRule{e.var}{I2}
{%
| | \rulerSameBegMark{} |  i :-> sigma `elem` Gamma | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  strongFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ |  <=  | } |  | \rulerChngBegMark{} |  sigma | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr | \rulerChngEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  i | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  Cnstr Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.base.e.app}{%
\rulerRule{e.app}{I2}
{%
| | \rulerSameBegMark{} |  v , v | _{ | a | } |  | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  v | _{ | a | } |  -> sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  f | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | f | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  tau | _{ | f | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | f | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | f | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  fioBindToTyAltsY , strongFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | f | } |  | \rulerChngEndMark{} |  :- | ^{ |  <=  | } |  | \rulerChngBegMark{} |  isigma | _{ | f | } |  | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  v | _{ | a | } |  -> sigma | ^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | F | } |  | \rulerChngEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | _{ | F | } |  ICnstr | _{ | f | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | f | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  v | _{ | a | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  a | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | a | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  tau | _{ | a | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | a | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | a | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  fioBindToTyAltsY , strongFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | a | } |  | \rulerChngEndMark{} |  :- | ^{ |  <=  | } |  | \rulerChngBegMark{} |  isigma | _{ | a | } |  | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  v | _{ | a | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | A | } |  | \rulerChngEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  f a | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | A | } |  ICnstr | _{ | a | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | a | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.base.e.lam}{%
\rulerRule{e.lam}{I2}
{%
| | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |  = ftv (| \rulerChngBegMark{} |  Gamma | \rulerChngEndMark{} | ) | 
\\
| | \rulerChngBegMark{} |  meetFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |   | \stackrel{ | talt elim | }{ | :- | } |  | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  sigma | _{ | e | }^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  v , v | _{ | r | } |  | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  strongFIOpts | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ |  <=  | } |  | \rulerSameBegMark{} |  v -> v | _{ | r | } |  | \rulerSameEndMark{} |  <= | \rulerChngBegMark{} |  sigma | _{ | e | }^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  sigma | _{ | F | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | F | } |  | \rulerChngEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | _{ | F | } |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  Cnstr | _{ | f | } |  ICnstr | _{ | A | } |  (ICnstr | _{ | F | } |  Cnstr | ^{ | k | } | ) ICnstr | _{ | F | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  (i :-> v) , Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  v | _{ | r | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  tau | _{ | b | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | b | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  fioBindLBeforeRN , strongFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | A | } |  (ICnstr | _{ | F | } |  Cnstr | ^{ | k | } | ) ICnstr | _{ | F | } |  | \rulerChngEndMark{} |  :- | ^{ |  <=  | } |  | \rulerChngBegMark{} |  v -> v | _{ | r | } |  | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  sigma | _{ | F | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr | _{ | f | } |  | \rulerChngEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  meetFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |   | \stackrel{ | talt elim | }{ | :- | } |  | \rulerChngBegMark{} |  v | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | A | } |  | \rulerChngEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |   \ i -> b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  v -> isigma | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | A | } |  ICnstr | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.base.e.let}{%
\rulerRule{e.let}{I2}
{%
| | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |  = ftv (| \rulerChngBegMark{} |  Gamma | \rulerChngEndMark{} | ) | 
\\
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | E | } |  Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  (i :-> v) , Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  v | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  e | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  tau | _{ | e | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | e | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | e | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  joinFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |   | \stackrel{ | talt elim | }{ | :- | } |  | \rulerChngBegMark{} |  isigma | _{ | e | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | E | } |  | \rulerChngEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  sigma | _{ | e | } |  = forall (ftv (Cnstr | _{ | e | } |  v) \\ ftv (Cnstr | _{ | e | } |  Gamma)) . Cnstr | _{ | e | } |  v | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | _{ | E | } |  ICnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  (v :-> sigma | _{ | e | } | ) Cnstr | _{ | e | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  (i :-> v) , Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  tau | _{ | b | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | b | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  let i = e in b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | b | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.base.e.tlet}{%
\rulerRule{e.tlet}{I2}
{%
| | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |  = ftv (| \rulerChngBegMark{} |  Gamma | \rulerChngEndMark{} | ) | 
\\
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |   []  :- | ^{ | te | } |  te : sigma | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  (v :-> sigma) ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  (v :-> sigma) ICnstr | _{ | E | } |  Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  (i :-> v) , Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  e | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  tau | _{ | e | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | e | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | e | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  joinFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |   | \stackrel{ | talt elim | }{ | :- | } |  | \rulerChngBegMark{} |  isigma | _{ | e | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | E | } |  | \rulerChngEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | _{ | E | } |  ICnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | e | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  (i :-> v) , Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  tau | _{ | b | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | b | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  let i :: te = e in b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | b | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.HM.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.HM.expr.base.scheme}}{Expression type rules}{infer2pass.HM.expr.base}{HM}
\rulerCmdUse{infer2pass.HM.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.base.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.I1.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I1.expr.base.scheme}}{Expression type rules}{infer2pass.I1.expr.base}{I1}
\rulerCmdUse{infer2pass.I1.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.base.e.tlet}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.I2.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I2.expr.base.scheme}}{Expression type rules}{infer2pass.I2.expr.base}{I2}
\rulerCmdUse{infer2pass.I2.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.base.e.tlet}
\end{rulerRulesetFigure}
}

\rulerCmdDef{infer2pass.HM.expr.hm.scheme}{%
\ensuremath{| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  e : tau ~> Cnstr | }
}
\rulerCmdDef{infer2pass.HM.expr.hm.e.int}{%
\rulerRule{e.int}{HM}
{%
}
{%
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  int : Int ~> Cnstr | ^{ | k | } |  | 
}
}

\rulerCmdDef{infer2pass.HM.expr.hm.e.var}{%
\rulerRule{e.var}{HM}
{%
| i :-> sigma `elem` Gamma | 
\\
| tau = inst (sigma) | 
}
{%
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  i : tau ~> Cnstr | ^{ | k | } |  | 
}
}

\rulerCmdDef{infer2pass.HM.expr.hm.e.app}{%
\rulerRule{e.app}{HM}
{%
| v | \;\mbox{fresh} |  | 
\\
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  f : tau | _{ | f | } |  ~> Cnstr | _{ | f | } |  | 
\\
| Cnstr | _{ | f | } |  ; Gamma :- | ^{ | e | } |  a : tau | _{ | a | } |  ~> Cnstr | _{ | a | } |  | 
\\
|  :- | ^{ |  <=>  | } |  Cnstr | _{ | a | } |  (tau | _{ | a | } |  -> v) <=> Cnstr | _{ | a | } |  tau | _{ | f | } |  ~> Cnstr | 
}
{%
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  f a : Cnstr Cnstr | _{ | a | } |  v ~> Cnstr Cnstr | _{ | a | } |  | 
}
}

\rulerCmdDef{infer2pass.HM.expr.hm.e.lam}{%
\rulerRule{e.lam}{HM}
{%
| v | \;\mbox{fresh} |  | 
\\
| Cnstr | ^{ | k | } |  ; (i :-> v) , Gamma :- | ^{ | e | } |  b : tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | 
}
{%
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |   \ i -> b : Cnstr | _{ | b | } |  v -> tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | 
}
}

\rulerCmdDef{infer2pass.HM.expr.hm.e.let}{%
\rulerRule{e.let}{HM}
{%
| v | \;\mbox{fresh} |  | 
\\
| Cnstr | ^{ | k | } |  ; (i :-> v) , Gamma :- | ^{ | e | } |  e : tau | _{ | e | } |  ~> Cnstr | _{ | e | } |  | 
\\
|  :- | ^{ |  <=>  | } |  Cnstr | _{ | e | } |  v <=> tau | _{ | e | } |  ~> Cnstr | 
\\
| sigma | _{ | e | } |  = forall (ftv (tau | _{ | e | } | ) \\ ftv (Cnstr Cnstr | _{ | e | } |  Gamma)) . tau | _{ | e | } |  | 
\\
| Cnstr Cnstr | _{ | e | } |  ; (i :-> sigma | _{ | e | } | ) , Gamma :- | ^{ | e | } |  b : tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | 
}
{%
| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  let i = e in b : tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.hm.scheme}{%
\ensuremath{| Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : tau ~> Cnstr | }
}
\rulerCmdDef{infer2pass.I1.expr.hm.e.int}{%
\rulerRule{e.int}{I1}
{%
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  int | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  Int | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.hm.e.char}{%
\rulerRule{e.char}{I1}
{%
}
{%
| Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : Char ~> Cnstr | ^{ | k | } |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.hm.e.var}{%
\rulerRule{e.var}{I1}
{%
| | \rulerSameBegMark{} |  i :-> sigma `elem` Gamma | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  i | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.hm.e.app}{%
\rulerRule{e.app}{I1}
{%
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  rulerUndefinedExtern | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  f | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  tau | _{ | f | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  Cnstr | _{ | f | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  Cnstr | _{ | f | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  rulerUndefinedExtern | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  a | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  tau | _{ | a | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  Cnstr | _{ | a | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  f a | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr | _{ | a | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.hm.e.lam}{%
\rulerRule{e.lam}{I1}
{%
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  (i :-> v) , Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  rulerUndefinedExtern | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  b | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  tau | _{ | b | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |   \ i -> b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.hm.e.let}{%
\rulerRule{e.let}{I1}
{%
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  (i :-> v) , Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  rulerUndefinedExtern | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  e | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  tau | _{ | e | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  Cnstr | _{ | e | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  sigma | _{ | e | } |  | \rulerSameEndMark{} |  = forall (ftv (| \rulerChngBegMark{} |  Cnstr | _{ | e | } |  v | \rulerChngEndMark{} | ) \\ ftv (| \rulerChngBegMark{} |  Cnstr | _{ | e | } |  Gamma | \rulerChngEndMark{} | )) . | \rulerChngBegMark{} |  Cnstr | _{ | e | } |  v | \rulerChngEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  (v :-> sigma | _{ | e | } | ) Cnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  (i :-> v) , Gamma | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  rulerUndefinedExtern | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  b | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  tau | _{ | b | } |  | \rulerSameEndMark{} |  ~> | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  let i = e in b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.hm.e.tlet}{%
\rulerRule{e.tlet}{I1}
{%
| v | \;\mbox{fresh} |  | 
\\
|  []  :- | ^{ | te | } |  te : sigma | 
\\
| Cnstr | ^{ | k | } |  ; (i :-> v) , Gamma ; rulerUndefinedExtern :- | ^{ | e | } |  e : tau | _{ | e | } |  ~> Cnstr | _{ | e | } |  | 
\\
| Cnstr | _{ | e | } |  ; (i :-> v) , Gamma ; rulerUndefinedExtern :- | ^{ | e | } |  b : tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | 
}
{%
| Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let i :: te = e in b : sigma | ^{ | k | } |  ~> Cnstr | _{ | b | } |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.hm.scheme}{%
\ensuremath{| Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : tau ~> Cnstr | }
}
\rulerCmdDef{infer2pass.I2.expr.hm.e.int}{%
\rulerRule{e.int}{I2}
{%
| | \rulerChngBegMark{} |  strongFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ |  <=  | } |  | \rulerChngBegMark{} |  Int | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr | \rulerChngEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  int | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  Int | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.hm.e.char}{%
\rulerRule{e.char}{I2}
{%
| | \rulerChngBegMark{} |  strongFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ |  <=  | } |  | \rulerChngBegMark{} |  Char | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr | \rulerChngEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  char | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  Char | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.hm.e.var}{%
\rulerRule{e.var}{I2}
{%
| | \rulerSameBegMark{} |  i :-> sigma `elem` Gamma | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  strongFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  :- | ^{ |  <=  | } |  | \rulerChngBegMark{} |  sigma | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr | \rulerChngEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  Gamma | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  i | \rulerSameEndMark{} |  : | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  ~> | \rulerChngBegMark{} |  Cnstr Cnstr | ^{ | k | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.hm.e.app}{%
\rulerRule{e.app}{I2}
{%
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  ; Gamma ; rulerUndefinedExtern :- | ^{ | e | } |  f : tau | _{ | f | } |  ~> Cnstr | _{ | f | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  Cnstr | _{ | f | } |  ; Gamma ; rulerUndefinedExtern :- | ^{ | e | } |  a : tau | _{ | a | } |  ~> Cnstr | _{ | a | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  f a : sigma | ^{ | k | } |  ~> Cnstr | _{ | a | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.hm.e.lam}{%
\rulerRule{e.lam}{I2}
{%
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  ; (i :-> v) , Gamma ; rulerUndefinedExtern :- | ^{ | e | } |  b : tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ i -> b : sigma | ^{ | k | } |  ~> Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.hm.e.let}{%
\rulerRule{e.let}{I2}
{%
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  ; (i :-> v) , Gamma ; rulerUndefinedExtern :- | ^{ | e | } |  e : tau | _{ | e | } |  ~> Cnstr | _{ | e | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  sigma | _{ | e | } |  = forall (ftv (Cnstr | _{ | e | } |  v) \\ ftv (Cnstr | _{ | e | } |  Gamma)) . Cnstr | _{ | e | } |  v | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  (v :-> sigma | _{ | e | } | ) Cnstr | _{ | e | } |  ; (i :-> v) , Gamma ; rulerUndefinedExtern :- | ^{ | e | } |  b : tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let i = e in b : sigma | ^{ | k | } |  ~> Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.hm.e.tlet}{%
\rulerRule{e.tlet}{I2}
{%
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |   []  :- | ^{ | te | } |  te : sigma | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  ; (i :-> v) , Gamma ; rulerUndefinedExtern :- | ^{ | e | } |  e : tau | _{ | e | } |  ~> Cnstr | _{ | e | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  Cnstr | _{ | e | } |  ; (i :-> v) , Gamma ; rulerUndefinedExtern :- | ^{ | e | } |  b : tau | _{ | b | } |  ~> Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let i :: te = e in b : sigma | ^{ | k | } |  ~> Cnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.HM.expr.hm}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.HM.expr.hm.scheme}}{Expression type rules for Hindley-Milner}{infer2pass.HM.expr.hm}{HM}
\rulerCmdUse{infer2pass.HM.expr.hm.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.hm.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.hm.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.hm.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.hm.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.I1.expr.hm}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I1.expr.hm.scheme}}{Expression type rules for Hindley-Milner}{infer2pass.I1.expr.hm}{I1}
\rulerCmdUse{infer2pass.I1.expr.hm.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.hm.e.char}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.hm.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.hm.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.hm.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.hm.e.let}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.hm.e.tlet}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.I2.expr.hm}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I2.expr.hm.scheme}}{Expression type rules for Hindley-Milner}{infer2pass.I2.expr.hm}{I2}
\rulerCmdUse{infer2pass.I2.expr.hm.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.hm.e.char}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.hm.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.hm.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.hm.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.hm.e.let}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.hm.e.tlet}
\end{rulerRulesetFigure}
}

\rulerCmdDef{infer2pass.I1.expr.kn.scheme}{%
\ensuremath{| ICnstr | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e ~> ICnstr | }
}
\rulerCmdDef{infer2pass.I1.expr.kn.e.int}{%
\rulerRule{e.int}{I1}
{%
| ICnstr | ^{ | k | } |  :- Int <= sigma | ^{ | k | } |  ~> Cnstr | 
}
{%
| ICnstr | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int ~> Cnstr ICnstr | ^{ | k | } |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.kn.e.char}{%
\rulerRule{e.char}{I1}
{%
| ICnstr | ^{ | k | } |  :- Char <= sigma | ^{ | k | } |  ~> Cnstr | 
}
{%
| ICnstr | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char ~> Cnstr ICnstr | ^{ | k | } |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.kn.e.var}{%
\rulerRule{e.var}{I1}
{%
| ICnstr | ^{ | k | } |  :- sigma <= sigma | ^{ | k | } |  ~> Cnstr | 
}
{%
| ICnstr | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  i ~> Cnstr ICnstr | ^{ | k | } |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.kn.e.app}{%
\rulerRule{e.app}{I1}
{%
| v , v | _{ | a | } |  | \;\mbox{fresh} |  | 
\\
| ICnstr | ^{ | k | } |  ; v | _{ | a | } |  -> sigma | ^{ | k | } |  :- | ^{ | e | } |  f ~> ICnstr | _{ | f | } |  | 
\\
| ICnstr | _{ | f | } |  ; v | _{ | a | } |  :- | ^{ | e | } |  a ~> ICnstr | _{ | a | } |  | 
}
{%
| ICnstr | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  f a ~> ICnstr | _{ | a | } |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.kn.e.lam}{%
\rulerRule{e.lam}{I1}
{%
| v , v | _{ | r | } |  | \;\mbox{fresh} |  | 
\\
| ICnstr | ^{ | k | } |  :- v -> v | _{ | r | } |  <= sigma | ^{ | k | } |  ~> Cnstr | 
\\
| Cnstr ICnstr | ^{ | k | } |  ; v | _{ | r | } |  :- | ^{ | e | } |  b ~> ICnstr | _{ | b | } |  | 
}
{%
| ICnstr | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ i -> b ~> ICnstr | _{ | b | } |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.kn.e.let}{%
\rulerRule{e.let}{I1}
{%
| ICnstr | ^{ | k | } |  ; v :- | ^{ | e | } |  e ~> ICnstr | _{ | e | } |  | 
\\
| ICnstr | _{ | e | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b ~> ICnstr | _{ | b | } |  | 
}
{%
| ICnstr | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let i = e in b ~> ICnstr | _{ | b | } |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.kn.e.tlet}{%
\rulerRule{e.tlet}{I1}
{%
| (v :-> sigma) ICnstr | ^{ | k | } |  ; sigma :- | ^{ | e | } |  e ~> ICnstr | _{ | e | } |  | 
\\
| ICnstr | _{ | e | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b ~> ICnstr | _{ | b | } |  | 
}
{%
| ICnstr | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let i :: te = e in b ~> ICnstr | _{ | b | } |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.kn.scheme}{%
\ensuremath{| ICnstr | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ~> ICnstr | }
}
\rulerCmdDef{infer2pass.I2.expr.kn.e.int}{%
\rulerRule{e.int}{I2}
{%
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  int | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  Int | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.kn.e.char}{%
\rulerRule{e.char}{I2}
{%
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  char | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  Char | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.kn.e.var}{%
\rulerRule{e.var}{I2}
{%
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  i | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.kn.e.app}{%
\rulerRule{e.app}{I2}
{%
| | \rulerSameBegMark{} |  v , v | _{ | a | } |  | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  v | _{ | a | } |  -> sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  f | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | f | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | f | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  fioBindToTyAltsY , strongFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | f | } |  | \rulerChngEndMark{} |  :- | ^{ |  <=  | } |  | \rulerChngBegMark{} |  isigma | _{ | f | } |  | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  v | _{ | a | } |  -> sigma | ^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | F | } |  | \rulerChngEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | _{ | F | } |  ICnstr | _{ | f | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  v | _{ | a | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  a | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | a | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | a | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  fioBindToTyAltsY , strongFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | a | } |  | \rulerChngEndMark{} |  :- | ^{ |  <=  | } |  | \rulerChngBegMark{} |  isigma | _{ | a | } |  | \rulerChngEndMark{} |  <= | \rulerChngBegMark{} |  v | _{ | a | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | A | } |  | \rulerChngEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  f a | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | A | } |  ICnstr | _{ | a | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.kn.e.lam}{%
\rulerRule{e.lam}{I2}
{%
| | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |  = ftv (| \rulerChngBegMark{} |  Gamma | \rulerChngEndMark{} | ) | 
\\
| | \rulerChngBegMark{} |  meetFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |   | \stackrel{ | talt elim | }{ | :- | } |  | \rulerChngBegMark{} |  sigma | ^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  sigma | _{ | e | }^{ | k | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  v , v | _{ | r | } |  | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  strongFIOpts | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ |  <=  | } |  | \rulerSameBegMark{} |  v -> v | _{ | r | } |  | \rulerSameEndMark{} |  <= | \rulerChngBegMark{} |  sigma | _{ | e | }^{ | k | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  sigma | _{ | F | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | F | } |  | \rulerChngEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | _{ | F | } |  ICnstr | ^{ | k | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  v | _{ | r | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | b | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  meetFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | b | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |   | \stackrel{ | talt elim | }{ | :- | } |  | \rulerChngBegMark{} |  v | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | A | } |  | \rulerChngEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |   \ i -> b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  v -> isigma | _{ | b | } |  | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | A | } |  ICnstr | _{ | b | } |  | \rulerChngEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.kn.e.let}{%
\rulerRule{e.let}{I2}
{%
| | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |  = ftv (| \rulerChngBegMark{} |  Gamma | \rulerChngEndMark{} | ) | 
\\
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  v | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  e | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | e | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | e | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  joinFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |   | \stackrel{ | talt elim | }{ | :- | } |  | \rulerChngBegMark{} |  isigma | _{ | e | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | E | } |  | \rulerChngEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | _{ | E | } |  ICnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | b | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  let i = e in b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | b | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.expr.kn.e.tlet}{%
\rulerRule{e.tlet}{I2}
{%
| | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |  = ftv (| \rulerChngBegMark{} |  Gamma | \rulerChngEndMark{} | ) | 
\\
| | \rulerSameBegMark{} |  (v :-> sigma) ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  e | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | e | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | e | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  joinFIOpts | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |  ICnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerChngBegMark{} |   | \overline{ | v | _{ | g | }} |  | \rulerChngEndMark{} |   | \stackrel{ | talt elim | }{ | :- | } |  | \rulerChngBegMark{} |  isigma | _{ | e | } |  | \rulerChngEndMark{} |  : | \rulerChngBegMark{} |  _ | \rulerChngEndMark{} |  ~> | \rulerChngBegMark{} |  ICnstr | _{ | E | } |  | \rulerChngEndMark{} |  | 
\\
| | \rulerChngBegMark{} |  ICnstr | _{ | E | } |  ICnstr | _{ | e | } |  | \rulerChngEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | b | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  ICnstr | ^{ | k | } |  | \rulerSameEndMark{} |  ; | \rulerSameBegMark{} |  sigma | ^{ | k | } |  | \rulerSameEndMark{} |  :- | ^{ | e | } |  | \rulerSameBegMark{} |  let i :: te = e in b | \rulerSameEndMark{} |  : | \rulerChngBegMark{} |  isigma | _{ | b | } |  | \rulerChngEndMark{} |  ~> | \rulerSameBegMark{} |  ICnstr | _{ | b | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.expr.kn}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I1.expr.kn.scheme}}{Expression quantifier propagation rules}{infer2pass.I1.expr.kn}{I1}
\rulerCmdUse{infer2pass.I1.expr.kn.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.kn.e.char}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.kn.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.kn.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.kn.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.kn.e.let}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.kn.e.tlet}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.I2.expr.kn}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I2.expr.kn.scheme}}{Expression quantifier propagation rules}{infer2pass.I2.expr.kn}{I2}
\rulerCmdUse{infer2pass.I2.expr.kn.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.kn.e.char}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.kn.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.kn.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.kn.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.kn.e.let}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.kn.e.tlet}
\end{rulerRulesetFigure}
}

\rulerCmdDef{infer2pass.HM.match.all.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  tau | _{ | l | } |  <=> tau | _{ | r | } |  ~> Cnstr | }
}
\rulerCmdDef{infer2pass.HM.match.all.m.var}{%
\rulerRule{m.var}{HM}
{%
| tvar | _{ | 1 | } |  = tvar | _{ | 2 | } |  | 
}
{%
|  :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |  <=> tvar | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{infer2pass.HM.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{HM}
{%
| v `notElem` ftv (tau) | 
\\
| Cnstr =  [ v :-> tau ]  | 
}
{%
|  :- | ^{ |  <=>  | } |  v <=> tau ~> Cnstr | 
}
}

\rulerCmdDef{infer2pass.HM.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{HM}
{%
| v `notElem` ftv (tau) | 
\\
| Cnstr =  [ v :-> tau ]  | 
}
{%
|  :- | ^{ |  <=>  | } |  tau <=> v ~> Cnstr | 
}
}

\rulerCmdDef{infer2pass.HM.match.all.m.arrow}{%
\rulerRule{m.arrow}{HM}
{%
|  :- | ^{ |  <=>  | } |  tau | _{ | 2 | }^{ | a | } |  <=> tau | _{ | 1 | }^{ | a | } |  ~> Cnstr | _{ | a | } |  | 
\\
|  :- | ^{ |  <=>  | } |  Cnstr | _{ | a | } |  tau | _{ | 1 | }^{ | r | } |  <=> Cnstr | _{ | a | } |  tau | _{ | 2 | }^{ | r | } |  ~> Cnstr | _{ | r | } |  | 
}
{%
|  :- | ^{ |  <=>  | } |  tau | _{ | 1 | }^{ | a | } |  -> tau | _{ | 1 | }^{ | r | } |  <=> tau | _{ | 2 | }^{ | a | } |  -> tau | _{ | 2 | }^{ | r | } |  ~> Cnstr | _{ | r | } |  Cnstr | _{ | a | } |  | 
}
}

\rulerCmdDef{infer2pass.HM.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.HM.match.all.scheme}}{Type matching rules}{infer2pass.HM.match.all}{HM}
\rulerCmdUse{infer2pass.HM.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.match.all.m.arrow}
\end{rulerRulesetFigure}
}

\rulerCmdDef{infer2pass.I1.tyexpr.base.scheme}{%
\ensuremath{| TGamma :- | ^{ | te | } |  te : tau | }
}
\rulerCmdDef{infer2pass.I1.tyexpr.base.te.int}{%
\rulerRule{te.int}{I1}
{%
}
{%
| TGamma :- | ^{ | te | } |  int : Int | 
}
}

\rulerCmdDef{infer2pass.I1.tyexpr.base.te.char}{%
\rulerRule{te.char}{I1}
{%
}
{%
| TGamma :- | ^{ | te | } |  char : Char | 
}
}

\rulerCmdDef{infer2pass.I1.tyexpr.base.te.var}{%
\rulerRule{te.var}{I1}
{%
| i :-> tau `elem` TGamma | 
}
{%
| TGamma :- | ^{ | te | } |  i : tau | 
}
}

\rulerCmdDef{infer2pass.I1.tyexpr.base.te.all}{%
\rulerRule{te.all}{I1}
{%
| v | \;\mbox{fresh} |  | 
\\
| (i :-> v) , TGamma :- | ^{ | te | } |  te : sigma | 
}
{%
| TGamma :- | ^{ | te | } |  forall i . te : forall v . sigma | 
}
}

\rulerCmdDef{infer2pass.I1.tyexpr.base.te.arr}{%
\rulerRule{te.arr}{I1}
{%
| TGamma :- | ^{ | te | } |  r : sigma | _{ | r | } |  | 
\\
| TGamma :- | ^{ | te | } |  a : sigma | _{ | a | } |  | 
}
{%
| TGamma :- | ^{ | te | } |  a -> r : sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
}
}

\rulerCmdDef{infer2pass.I2.tyexpr.base.scheme}{%
\ensuremath{| TGamma :- | ^{ | te | } |  te : tau | }
}
\rulerCmdDef{infer2pass.I2.tyexpr.base.te.int}{%
\rulerRule{te.int}{I2}
{%
}
{%
| | \rulerSameBegMark{} |  TGamma :- | ^{ | te | } |  int : Int | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.tyexpr.base.te.char}{%
\rulerRule{te.char}{I2}
{%
}
{%
| | \rulerSameBegMark{} |  TGamma :- | ^{ | te | } |  char : Char | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.tyexpr.base.te.var}{%
\rulerRule{te.var}{I2}
{%
| | \rulerSameBegMark{} |  i :-> tau `elem` TGamma | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  TGamma :- | ^{ | te | } |  i : tau | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.tyexpr.base.te.all}{%
\rulerRule{te.all}{I2}
{%
| | \rulerSameBegMark{} |  v | \;\mbox{fresh} |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  (i :-> v) , TGamma :- | ^{ | te | } |  te : sigma | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  TGamma :- | ^{ | te | } |  forall i . te : forall v . sigma | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I2.tyexpr.base.te.arr}{%
\rulerRule{te.arr}{I2}
{%
| | \rulerSameBegMark{} |  TGamma :- | ^{ | te | } |  r : sigma | _{ | r | } |  | \rulerSameEndMark{} |  | 
\\
| | \rulerSameBegMark{} |  TGamma :- | ^{ | te | } |  a : sigma | _{ | a | } |  | \rulerSameEndMark{} |  | 
}
{%
| | \rulerSameBegMark{} |  TGamma :- | ^{ | te | } |  a -> r : sigma | _{ | a | } |  -> sigma | _{ | r | } |  | \rulerSameEndMark{} |  | 
}
}

\rulerCmdDef{infer2pass.I1.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I1.tyexpr.base.scheme}}{Typr expression type rules}{infer2pass.I1.tyexpr.base}{I1}
\rulerCmdUse{infer2pass.I1.tyexpr.base.te.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.tyexpr.base.te.char}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.tyexpr.base.te.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.tyexpr.base.te.all}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.tyexpr.base.te.arr}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.I2.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I2.tyexpr.base.scheme}}{Typr expression type rules}{infer2pass.I2.tyexpr.base}{I2}
\rulerCmdUse{infer2pass.I2.tyexpr.base.te.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.tyexpr.base.te.char}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.tyexpr.base.te.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.tyexpr.base.te.all}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.tyexpr.base.te.arr}
\end{rulerRulesetFigure}
}

\rulerCmdDef{infer2pass.I2.expr.forPaper.scheme}{%
\ensuremath{| ICnstr | ^{ | k | } |  ; Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; tau ~> ICnstr ; Cnstr | }
}
\rulerCmdDef{infer2pass.I2.expr.forPaper.e.int}{%
\rulerCmdUse{infer2pass.I2.expr.base.e.int}
}

\rulerCmdDef{infer2pass.I2.expr.forPaper.e.var}{%
\rulerCmdUse{infer2pass.I2.expr.base.e.var}
}

\rulerCmdDef{infer2pass.I2.expr.forPaper.e.app}{%
\rulerCmdUse{infer2pass.I2.expr.base.e.app}
}

\rulerCmdDef{infer2pass.I2.expr.forPaper.e.lam}{%
\rulerCmdUse{infer2pass.I2.expr.base.e.lam}
}

\rulerCmdDef{infer2pass.I2.expr.forPaper.e.let}{%
\rulerCmdUse{infer2pass.I2.expr.base.e.let}
}

\rulerCmdDef{infer2pass.I2.expr.forPaper.e.tlet}{%
\rulerCmdUse{infer2pass.I2.expr.base.e.tlet}
}

\rulerCmdDef{infer2pass.I1.expr.forPaper.scheme}{%
\ensuremath{| ICnstr | ^{ | k | } |  ; Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : tau ~> ICnstr ; Cnstr | }
}
\rulerCmdDef{infer2pass.I1.expr.forPaper.e.int}{%
\rulerCmdUse{infer2pass.I1.expr.base.e.int}
}

\rulerCmdDef{infer2pass.I1.expr.forPaper.e.var}{%
\rulerCmdUse{infer2pass.I1.expr.base.e.var}
}

\rulerCmdDef{infer2pass.I1.expr.forPaper.e.app}{%
\rulerCmdUse{infer2pass.I1.expr.base.e.app}
}

\rulerCmdDef{infer2pass.I1.expr.forPaper.e.lam}{%
\rulerCmdUse{infer2pass.I1.expr.base.e.lam}
}

\rulerCmdDef{infer2pass.I1.expr.forPaper.e.let}{%
\rulerCmdUse{infer2pass.I1.expr.base.e.let}
}

\rulerCmdDef{infer2pass.I1.expr.forPaper.e.tlet}{%
\rulerCmdUse{infer2pass.I1.expr.base.e.tlet}
}

\rulerCmdDef{infer2pass.HM.expr.forPaper.scheme}{%
\ensuremath{| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  e : tau ~> Cnstr | }
}
\rulerCmdDef{infer2pass.HM.expr.forPaper.e.int}{%
\rulerCmdUse{infer2pass.HM.expr.base.e.int}
}

\rulerCmdDef{infer2pass.HM.expr.forPaper.e.var}{%
\rulerCmdUse{infer2pass.HM.expr.base.e.var}
}

\rulerCmdDef{infer2pass.HM.expr.forPaper.e.app}{%
\rulerCmdUse{infer2pass.HM.expr.base.e.app}
}

\rulerCmdDef{infer2pass.HM.expr.forPaper.e.lam}{%
\rulerCmdUse{infer2pass.HM.expr.base.e.lam}
}

\rulerCmdDef{infer2pass.HM.expr.forPaper.e.let}{%
\rulerCmdUse{infer2pass.HM.expr.base.e.let}
}

\rulerCmdDef{infer2pass.I2.expr.forPaper}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I2.expr.forPaper.scheme}}{Expression type rules}{infer2pass.I2.expr.forPaper}{I2}
\rulerCmdUse{infer2pass.I2.expr.forPaper.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.forPaper.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.forPaper.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.forPaper.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.forPaper.e.let}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.forPaper.e.tlet}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.I1.expr.forPaper}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I1.expr.forPaper.scheme}}{Expression type rules}{infer2pass.I1.expr.forPaper}{I1}
\rulerCmdUse{infer2pass.I1.expr.forPaper.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.forPaper.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.forPaper.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.forPaper.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.forPaper.e.let}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.forPaper.e.tlet}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.HM.expr.forPaper}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.HM.expr.forPaper.scheme}}{Expression type rules}{infer2pass.HM.expr.forPaper}{HM}
\rulerCmdUse{infer2pass.HM.expr.forPaper.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.forPaper.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.forPaper.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.forPaper.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.expr.forPaper.e.let}
\end{rulerRulesetFigure}
}

\rulerCmdDef{infer2pass.I2.match.baseForImpredPaper.scheme}{%
\ensuremath{| fiopt ; ICnstr :- | ^{ |  <=>  | } |  tau | _{ | l | } |  <=> tau | _{ | r | } |  : tau | _{ | f | } |  ~> Cnstr | }
}
\rulerCmdDef{infer2pass.I1.match.baseForImpredPaper.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  tau | _{ | l | } |  <=> tau | _{ | r | } |  ~> Cnstr | }
}
\rulerCmdDef{infer2pass.HM.match.baseForImpredPaper.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  tau | _{ | l | } |  <=> tau | _{ | r | } |  ~> Cnstr | }
}
\rulerCmdDef{infer2pass.HM.match.baseForImpredPaper.m.var}{%
\rulerCmdUse{infer2pass.HM.match.all.m.var}
}

\rulerCmdDef{infer2pass.HM.match.baseForImpredPaper.m.var.l1}{%
\rulerCmdUse{infer2pass.HM.match.all.m.var.l1}
}

\rulerCmdDef{infer2pass.HM.match.baseForImpredPaper.m.var.r1}{%
\rulerCmdUse{infer2pass.HM.match.all.m.var.r1}
}

\rulerCmdDef{infer2pass.HM.match.baseForImpredPaper.m.arrow}{%
\rulerCmdUse{infer2pass.HM.match.all.m.arrow}
}

\rulerCmdDef{infer2pass.I2.match.baseForImpredPaper}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I2.match.baseForImpredPaper.scheme}}{Type matching |<=>|}{infer2pass.I2.match.baseForImpredPaper}{I2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.I1.match.baseForImpredPaper}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I1.match.baseForImpredPaper.scheme}}{Type matching |<=>|}{infer2pass.I1.match.baseForImpredPaper}{I1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.HM.match.baseForImpredPaper}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.HM.match.baseForImpredPaper.scheme}}{Type matching |<=>|}{infer2pass.HM.match.baseForImpredPaper}{HM}
\rulerCmdUse{infer2pass.HM.match.baseForImpredPaper.m.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.match.baseForImpredPaper.m.var.l1}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.match.baseForImpredPaper.m.var.r1}
\hspace{1ex}
\rulerCmdUse{infer2pass.HM.match.baseForImpredPaper.m.arrow}
\end{rulerRulesetFigure}
}

\rulerCmdDef{infer2pass.I2.expr.kn.forPaper.scheme}{%
\ensuremath{| ICnstr | ^{ | k | } |  ; Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; tau ~> ICnstr ; Cnstr | }
}
\rulerCmdDef{infer2pass.I2.expr.kn.forPaper.e.int}{%
\rulerCmdUse{infer2pass.I2.expr.kn.e.int}
}

\rulerCmdDef{infer2pass.I2.expr.kn.forPaper.e.var}{%
\rulerCmdUse{infer2pass.I2.expr.kn.e.var}
}

\rulerCmdDef{infer2pass.I2.expr.kn.forPaper.e.app}{%
\rulerCmdUse{infer2pass.I2.expr.kn.e.app}
}

\rulerCmdDef{infer2pass.I2.expr.kn.forPaper.e.lam}{%
\rulerCmdUse{infer2pass.I2.expr.kn.e.lam}
}

\rulerCmdDef{infer2pass.I2.expr.kn.forPaper.e.let}{%
\rulerCmdUse{infer2pass.I2.expr.kn.e.let}
}

\rulerCmdDef{infer2pass.I1.expr.kn.forPaper.scheme}{%
\ensuremath{| ICnstr | ^{ | k | } |  ; Cnstr | ^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : tau ~> ICnstr ; Cnstr | }
}
\rulerCmdDef{infer2pass.I1.expr.kn.forPaper.e.int}{%
\rulerCmdUse{infer2pass.I1.expr.kn.e.int}
}

\rulerCmdDef{infer2pass.I1.expr.kn.forPaper.e.var}{%
\rulerCmdUse{infer2pass.I1.expr.kn.e.var}
}

\rulerCmdDef{infer2pass.I1.expr.kn.forPaper.e.app}{%
\rulerCmdUse{infer2pass.I1.expr.kn.e.app}
}

\rulerCmdDef{infer2pass.I1.expr.kn.forPaper.e.lam}{%
\rulerCmdUse{infer2pass.I1.expr.kn.e.lam}
}

\rulerCmdDef{infer2pass.I1.expr.kn.forPaper.e.let}{%
\rulerCmdUse{infer2pass.I1.expr.kn.e.let}
}

\rulerCmdDef{infer2pass.HM.expr.kn.forPaper.scheme}{%
\ensuremath{| Cnstr | ^{ | k | } |  ; Gamma :- | ^{ | e | } |  e : tau ~> Cnstr | }
}
\rulerCmdDef{infer2pass.I2.expr.kn.forPaper}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I2.expr.kn.forPaper.scheme}}{Expression quantifier propagation rules}{infer2pass.I2.expr.kn.forPaper}{I2}
\rulerCmdUse{infer2pass.I2.expr.kn.forPaper.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.kn.forPaper.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.kn.forPaper.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.kn.forPaper.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.I2.expr.kn.forPaper.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.I1.expr.kn.forPaper}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.I1.expr.kn.forPaper.scheme}}{Expression quantifier propagation rules}{infer2pass.I1.expr.kn.forPaper}{I1}
\rulerCmdUse{infer2pass.I1.expr.kn.forPaper.e.int}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.kn.forPaper.e.var}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.kn.forPaper.e.app}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.kn.forPaper.e.lam}
\hspace{1ex}
\rulerCmdUse{infer2pass.I1.expr.kn.forPaper.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{infer2pass.HM.expr.kn.forPaper}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{infer2pass.HM.expr.kn.forPaper.scheme}}{Expression quantifier propagation rules}{infer2pass.HM.expr.kn.forPaper}{HM}
\end{rulerRulesetFigure}
}

