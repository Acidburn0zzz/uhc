%include lhs2TeX.fmt
%include afp.fmt
%include ehrules.fmt

\rulerCmdDef{rules3.ANN.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.fit.fit}{%
\rulerRule{fit}{ANN}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.C.fit.scheme}{%
\ensuremath{| gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.fit.fit}{%
\rulerRule{fit}{C}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | 
}
{%
| gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.CG.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.CG.fit.fit}{%
\rulerRule{fit}{CG}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.fit.fit}{%
\rulerRule{fit}{DT}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.EP.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.fit.fit}{%
\rulerRule{fit}{EP}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.EX.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.fit.fit}{%
\rulerRule{fit}{EX}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.HM.fit.scheme}{%
\ensuremath{| gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.fit.fit}{%
\rulerRule{fit}{HM}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | 
}
{%
| gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.HS.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.HS.fit.fit}{%
\rulerRule{fit}{HS}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.I1.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.fit.fit}{%
\rulerRule{fit}{I1}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.fit.fit}{%
\rulerRule{fit}{I2}
{%
| fioFitY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.K.fit.scheme}{%
\ensuremath{|  :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.K.fit.fit}{%
\rulerRule{fit}{K}
{%
|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | 
}
{%
|  :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma | 
}
}

\rulerCmdDef{rules3.MD.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.fit.fit}{%
\rulerRule{fit}{MD}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.NUM.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.fit.fit}{%
\rulerRule{fit}{NUM}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.P.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.fit.fit}{%
\rulerRule{fit}{P}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.TS.fit.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.fit.fit}{%
\rulerRule{fit}{TS}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ | <= | } |  sigma | _{ | l | } |  <= sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.ANN.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.fit.scheme}}{Fitting of types}{rules3.ANN.fit}{ANN}
\rulerCmdUse{rules3.ANN.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.fit.scheme}}{Fitting of types}{rules3.C.fit}{C}
\rulerCmdUse{rules3.C.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.fit.scheme}}{Fitting of types}{rules3.CG.fit}{CG}
\rulerCmdUse{rules3.CG.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.fit.scheme}}{Fitting of types}{rules3.DT.fit}{DT}
\rulerCmdUse{rules3.DT.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.fit.scheme}}{Fitting of types}{rules3.EP.fit}{EP}
\rulerCmdUse{rules3.EP.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.fit.scheme}}{Fitting of types}{rules3.EX.fit}{EX}
\rulerCmdUse{rules3.EX.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.fit.scheme}}{Fitting of types}{rules3.HM.fit}{HM}
\rulerCmdUse{rules3.HM.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.fit.scheme}}{Fitting of types}{rules3.HS.fit}{HS}
\rulerCmdUse{rules3.HS.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.fit.scheme}}{Fitting of types}{rules3.I1.fit}{I1}
\rulerCmdUse{rules3.I1.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I2.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.fit.scheme}}{Fitting of types}{rules3.I2.fit}{I2}
\rulerCmdUse{rules3.I2.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.fit.scheme}}{Fitting of types}{rules3.K.fit}{K}
\rulerCmdUse{rules3.K.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.fit.scheme}}{Fitting of types}{rules3.MD.fit}{MD}
\rulerCmdUse{rules3.MD.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.fit.scheme}}{Fitting of types}{rules3.NUM.fit}{NUM}
\rulerCmdUse{rules3.NUM.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.fit.scheme}}{Fitting of types}{rules3.P.fit}{P}
\rulerCmdUse{rules3.P.fit.fit}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.fit}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.fit.scheme}}{Fitting of types}{rules3.TS.fit}{TS}
\rulerCmdUse{rules3.TS.fit.fit}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <-> | } |  sigma | _{ | l | } |  <-> sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.join.join}{%
\rulerRule{join}{I2}
{%
| fioJoinY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ | <-> | } |  sigma | _{ | l | } |  <-> sigma | _{ | r | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.join.scheme}}{Join of types}{rules3.I2.join}{I2}
\rulerCmdUse{rules3.I2.join.join}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ | <+> | } |  sigma | _{ | l | } |  <+> sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.meet.meet}{%
\rulerRule{meet}{I2}
{%
| fioMeetY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ | <+> | } |  sigma | _{ | l | } |  <+> sigma | _{ | r | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.meet.scheme}}{Join of types}{rules3.I2.meet}{I2}
\rulerCmdUse{rules3.I2.meet.meet}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.tyAltTyElim.scheme}{%
\ensuremath{| fiopt ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | talt elim | }{ | :- | } |  isigma : sigma ~> IVarMp | }
}
\rulerCmdDef{rules3.I2.tyAltTyElim.ty.ae.alts}{%
\rulerRule{ty.ae.alts}{I2}
{%
| tneed === if fioMeetY `elem` fiopt then tneedR else tneedO | 
\\
| tvarv [  | \overline{ | talt | } |  ]  === isigma | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
|  | \overline{ | sigma | _{ | thardH | }} |  ===  [ sigma || (sigma :: thardH / tneed) <-  | \overline{ | talt | } |  ]  | 
\\
|  | \overline{ | sigma | _{ | Qu | }} |  ===  [ sigma | _{ | Qu | } |  || (sigma | _{ | Qu | } |  :: thardS / tneed) <-  | \overline{ | talt | } |  ]  | 
\\
| fiopt ;  []  :- | ^{ |  <=>  | } |  ( | \overline{ | sigma | _{ | thardH | }} |  ,  | \overline{ | sigma | _{ | Qu | }} | )  <=>  ANY : isigma | _{ | thardH | } |  ~> IVarMp | _{ | h | } |  | 
\\
|  ||  | \overline{ | sigma | _{ | thardH | }} |  ,  | \overline{ | sigma | _{ | Qu | }} |  ||  > 0 | 
\\
|  | \overline{ | sigma | _{ | thardS | }} |  ===  [ sigma | _{ | nQu | } |  || (sigma | _{ | nQu | } |  :: thardS / tneed) <-  | \overline{ | talt | } |  ]  | 
\\
| fiopt ; IVarMp | _{ | h | } |  :- | ^{ |  <=>  | } |  IVarMp | _{ | h | } |   | \overline{ | sigma | _{ | thardS | }} |   <=>  isigma | _{ | thardH | } |  : isigma | _{ | thardS | } |  ~> _ | 
\\
| fiopt ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | talt elim | }{ | :- | } |  isigma | _{ | thardS | } |  : sigma ~> VarMp | _{ | e | } |  | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | talt elim | }{ | :- | } |  isigma : sigma ~> VarMp VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.I2.tyAltTyElim.ty.ae.var}{%
\rulerRule{ty.ae.var}{I2}
{%
| tvarv [ _ ]  === isigma | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
| fiopt ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | talt elim | }{ | :- | } |  isigma : tvarv ~>  []  | 
}
}

\rulerCmdDef{rules3.I2.tyAltTyElim.ty.ae.ty}{%
\rulerRule{ty.ae.ty}{I2}
{%
}
{%
| fiopt ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | talt elim | }{ | :- | } |  sigma : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.I2.tyAltTyElim.ty.ae.arrow}{%
\rulerRule{ty.ae.arrow}{I2}
{%
| fiopt | _{ | a | } |  === if ^^ fiopt = fioMeetY ^^ then ^^ fioJoinY ^^ else ^^ fioMeetY | 
\\
| fiopt ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | talt elim | }{ | :- | } |  isigma | _{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
\\
| fiopt | _{ | a | } |  ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | talt elim | }{ | :- | } |  isigma | _{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  | 
}
{%
| fiopt ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | talt elim | }{ | :- | } |  isigma | _{ | a | } |  -> isigma | _{ | r | } |  : sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | a | } |  VarMp | _{ | r | } |  | 
}
}

\rulerCmdDef{rules3.I2.tyAltTyElim}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.tyAltTyElim.scheme}}{Type alternative elimination}{rules3.I2.tyAltTyElim}{I2}
\rulerCmdUse{rules3.I2.tyAltTyElim.ty.ae.alts}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyAltTyElim.ty.ae.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyAltTyElim.ty.ae.ty}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyAltTyElim.ty.ae.arrow}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.tyBtTyElim.scheme}{%
\ensuremath{| bv  | \stackrel{ | /=/ elim | }{ | :- | } |  sigma | _{ | /=/ | } |  : sigma ~> sigma | _{ | e | } |  ; VarMp | }
}
\rulerCmdDef{rules3.I2.tyBtTyElim.ty.eb.any}{%
\rulerRule{ty.eb.any}{I2}
{%
| tvarv `elem` bv | 
}
{%
| bv  | \stackrel{ | /=/ elim | }{ | :- | } |  tvarv /=/ ANY : tvarv ~> tvarv ;  []  | 
}
}

\rulerCmdDef{rules3.I2.tyBtTyElim.ty.eb.var}{%
\rulerRule{ty.eb.var}{I2}
{%
| bv  | \stackrel{ | /=/ elim | }{ | :- | } |  sigma | _{ | b | } |  : sigma ~> tvarv | _{ | e | } |  ; VarMp | 
\\
| tvarv `elem` bv | 
}
{%
| bv  | \stackrel{ | /=/ elim | }{ | :- | } |  tvarv /=/ sigma | _{ | b | } |  : tvarv ~> tvarv ;  [ tvarv | _{ | e | } |  :-> tvarv ] VarMp | 
}
}

\rulerCmdDef{rules3.I2.tyBtTyElim.ty.eb.ty}{%
\rulerRule{ty.eb.ty}{I2}
{%
| bv  | \stackrel{ | /=/ elim | }{ | :- | } |  sigma | _{ | b | } |  : sigma ~> sigma | _{ | e | } |  ; VarMp | 
\\
| tvarv `elem` bv | 
}
{%
| bv  | \stackrel{ | /=/ elim | }{ | :- | } |  tvarv /=/ sigma | _{ | b | } |  : tvarv ~> sigma | _{ | e | } |  ;  [ tvarv :-> sigma | _{ | e | } |  ] VarMp | 
}
}

\rulerCmdDef{rules3.I2.tyBtTyElim}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.tyBtTyElim.scheme}}{Type `both' elimination}{rules3.I2.tyBtTyElim}{I2}
\rulerCmdUse{rules3.I2.tyBtTyElim.ty.eb.any}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyBtTyElim.ty.eb.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyBtTyElim.ty.eb.ty}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.valElimExprAlts.scheme}{%
\ensuremath{| fiopt ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | Gamma talt elim | }{ | :- | } |  Gamma : IVarMp | }
}
\rulerCmdDef{rules3.I2.valElimExprAlts.g.ae.cons}{%
\rulerRule{g.ae.cons}{I2}
{%
| fiopt ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | talt elim | }{ | :- | } |  IVarMp | ^{ | k | } |  isigma : _ ~> IVarMp | _{ | a | } |  | 
\\
| fiopt ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | Gamma talt elim | }{ | :- | } |  IVarMp | _{ | a | } |  Gamma : IVarMp | _{ | g | } |  | 
}
{%
| fiopt ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | Gamma talt elim | }{ | :- | } |  (_ :-> isigma , Gamma) : IVarMp | _{ | g | } |  IVarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.I2.valElimExprAlts}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.valElimExprAlts.scheme}}{Type alternative elimination (for a |Gamma|)}{rules3.I2.valElimExprAlts}{I2}
\rulerCmdUse{rules3.I2.valElimExprAlts.g.ae.cons}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.ANN.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | }
}
\rulerCmdDef{rules3.ANN.decl.base.d.tysig}{%
\rulerRule{d.tysig}{ANN}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.ANN.decl.base.d.val}{%
\rulerRule{d.val}{ANN}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  && fiopt | _{ | e | } |  === strongFIOpts ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  && fiopt | _{ | e | } |  === weakFIOpts | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt | _{ | e | } |  ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : isigma ; _ ~> IVarMp ; VarMp | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.C.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | }
}
\rulerCmdDef{rules3.C.decl.base.d.tysig}{%
\rulerRule{d.tysig}{C}
{%
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | i | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.C.decl.base.d.val}{%
\rulerRule{d.val}{C}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  | 
\\
| VarMp | _{ | p | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.CG.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp ; Transl | }
}
\rulerCmdDef{rules3.CG.decl.base.d.tysig}{%
\rulerRule{d.tysig}{CG}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.CG.decl.base.d.val}{%
\rulerRule{d.val}{CG}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  && fiopt | _{ | e | } |  === strongFIOpts ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  && fiopt | _{ | e | } |  === weakFIOpts | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt | _{ | e | } |  ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  ;  [ p :-> Transl | _{ | e | } |  ]  | 
}
}

\rulerCmdDef{rules3.DT.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | }
}
\rulerCmdDef{rules3.DT.decl.base.d.tysig}{%
\rulerRule{d.tysig}{DT}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.DT.decl.base.d.val}{%
\rulerRule{d.val}{DT}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  && fiopt | _{ | e | } |  === strongFIOpts ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  && fiopt | _{ | e | } |  === weakFIOpts | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt | _{ | e | } |  ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.E.decl.base.scheme}{%
\ensuremath{| Gamma :- | ^{ | d | } |  d : Gamma | _{ | t | } |  | }
}
\rulerCmdDef{rules3.E.decl.base.d.sig.val}{%
\rulerRule{d.sig.val}{E}
{%
| Gamma :- | ^{ | e | } |  e | _{ | identv | } |  : sigma | _{ | identv | } |  | 
\\
| Gamma | _{ | identv | } |  ===  [ identv :-> sigma | _{ | identv | } |  ]  | 
}
{%
| Gamma :- | ^{ | d | } |  (identv :: sigma | _{ | identv | } |  ; identv = e | _{ | identv | } | ) : Gamma | _{ | identv | } |  | 
}
}

\rulerCmdDef{rules3.EP.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp ; Transl | }
}
\rulerCmdDef{rules3.EP.decl.base.d.tysig}{%
\rulerRule{d.tysig}{EP}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.EP.decl.base.d.val}{%
\rulerRule{d.val}{EP}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  && fiopt | _{ | e | } |  === strongFIOpts ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  && fiopt | _{ | e | } |  === weakFIOpts | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt | _{ | e | } |  ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  ;  [ p :-> Transl | _{ | e | } |  ]  | 
}
}

\rulerCmdDef{rules3.EX.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | }
}
\rulerCmdDef{rules3.EX.decl.base.d.tysig}{%
\rulerRule{d.tysig}{EX}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.EX.decl.base.d.val}{%
\rulerRule{d.val}{EX}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| strongFIOpts ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.HM.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | }
}
\rulerCmdDef{rules3.HM.decl.base.d.tysig}{%
\rulerRule{d.tysig}{HM}
{%
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.HM.decl.base.d.val}{%
\rulerRule{d.val}{HM}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ forall ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | s | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf ]  | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | i | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | i | } |  ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  | 
\\
| VarMp | _{ | p | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.HS.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp ; Transl | }
}
\rulerCmdDef{rules3.HS.decl.base.d.tysig}{%
\rulerRule{d.tysig}{HS}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.HS.decl.base.d.val}{%
\rulerRule{d.val}{HS}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  && fiopt | _{ | e | } |  === strongFIOpts ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  && fiopt | _{ | e | } |  === weakFIOpts | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt | _{ | e | } |  ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  ;  [ p :-> Transl | _{ | e | } |  ]  | 
}
}

\rulerCmdDef{rules3.I1.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | }
}
\rulerCmdDef{rules3.I1.decl.base.d.tysig}{%
\rulerRule{d.tysig}{I1}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I1.decl.base.d.val}{%
\rulerRule{d.val}{I1}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| strongFIOpts ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.I2.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | t | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | t | } |  ; VarMp | _{ | p | } |  ; IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.I2.decl.base.d.tysig}{%
\rulerRule{d.tysig}{I2}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| sigma | _{ | v | } |  === tvarv | _{ | v | } |  ^^  &&  ^^ VarMp | _{ | v | } |  ===  [ tvarv | _{ | v | } |  :-> sigma | _{ | q | } |  ]  ^^  &&  ^^ tvarv | _{ | v | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | v | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | t | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | v | } |  VarMp | _{ | t | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I2.decl.base.d.val}{%
\rulerRule{d.val}{I2}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| strongFIOpts ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : isigma | _{ | e | } |  ; _ ~> IVarMp | _{ | e | } |  ; VarMp | _{ | e | } |  | 
\\
| impredFIOpts ; IVarMp | _{ | e | } |  :- | ^{ | <= | } |  isigma | _{ | e | } |  <= IVarMp | _{ | e | } |  sigma | _{ | p | } |  : _ ~> IVarMp | _{ | E | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | t | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | t | }^{ | k | } |  ; VarMp | _{ | p | } |  ; IVarMp | _{ | E | } |  IVarMp | _{ | e | } |  ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.K.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  | }
}
\rulerCmdDef{rules3.K.decl.base.d.tysig}{%
\rulerRule{d.tysig}{K}
{%
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | i | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  | 
}
}

\rulerCmdDef{rules3.K.decl.base.d.val}{%
\rulerRule{d.val}{K}
{%
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| Gamma | _{ | p | }^{ | k | } |  ; sigma | _{ | s | } |  :- | ^{ | p | } |  p : Gamma | _{ | p | } |  | 
\\
| Gamma ; sigma | _{ | s | } |  :- | ^{ | e | } |  e : _ | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  | 
}
}

\rulerCmdDef{rules3.MD.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp ; Transl | }
}
\rulerCmdDef{rules3.MD.decl.base.d.tysig}{%
\rulerRule{d.tysig}{MD}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.MD.decl.base.d.val}{%
\rulerRule{d.val}{MD}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  && fiopt | _{ | e | } |  === strongFIOpts ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  && fiopt | _{ | e | } |  === weakFIOpts | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt | _{ | e | } |  ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  ;  [ p :-> Transl | _{ | e | } |  ]  | 
}
}

\rulerCmdDef{rules3.NUM.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp ; Transl | }
}
\rulerCmdDef{rules3.NUM.decl.base.d.tysig}{%
\rulerRule{d.tysig}{NUM}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.NUM.decl.base.d.val}{%
\rulerRule{d.val}{NUM}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  && fiopt | _{ | e | } |  === strongFIOpts ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  && fiopt | _{ | e | } |  === weakFIOpts | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt | _{ | e | } |  ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  ;  [ p :-> Transl | _{ | e | } |  ]  | 
}
}

\rulerCmdDef{rules3.P.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp ; Transl | }
}
\rulerCmdDef{rules3.P.decl.base.d.tysig}{%
\rulerRule{d.tysig}{P}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.P.decl.base.d.val}{%
\rulerRule{d.val}{P}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  && fiopt | _{ | e | } |  === strongFIOpts ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  && fiopt | _{ | e | } |  === weakFIOpts | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt | _{ | e | } |  ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  ;  [ p :-> Transl | _{ | e | } |  ]  | 
}
}

\rulerCmdDef{rules3.TS.decl.base.scheme}{%
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp ; Transl | }
}
\rulerCmdDef{rules3.TS.decl.base.d.tysig}{%
\rulerRule{d.tysig}{TS}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv ( TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | i | } |  ~> _ ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | i | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . sigma | _{ | i | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | q | } |  ]  | 
}
{%
| _ ; Gamma | _{ | p | } |  ; _ ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (identv :: t) : Gamma | _{ | i | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.TS.decl.base.d.val}{%
\rulerRule{d.val}{TS}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| p :-> sigma | _{ | s | } |  `elem` Gamma | _{ | t | }^{ | k | } |  | 
\\
| sigma | _{ | p | }^{ | k | } |  === sigma | _{ | s | } |  && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | s | } |  && fiopt | _{ | e | } |  === strongFIOpts ^^  ||||  ^^ sigma | _{ | p | }^{ | k | } |  === tvarv && sigma | _{ | e | }^{ | k | } |  === sigma | _{ | p | } |  && fiopt | _{ | e | } |  === weakFIOpts | 
\\
| strongFIOpts ; Gamma | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | }^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt | _{ | e | } |  ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e : _ ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| Gamma | _{ | t | }^{ | k | } |  ; Gamma | _{ | p | }^{ | k | } |  ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; VarMp | ^{ | k | } |  :- | ^{ | d | } |  (p = e) :  []  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | e | } |  ;  [ p :-> Transl | _{ | e | } |  ]  | 
}
}

\rulerCmdDef{rules3.ANN.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.decl.base.scheme}}{Declaration type rules}{rules3.ANN.decl.base}{ANN}
\rulerCmdUse{rules3.ANN.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.decl.base.scheme}}{Declaration type rules}{rules3.C.decl.base}{C}
\rulerCmdUse{rules3.C.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.C.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.decl.base.scheme}}{Declaration type rules}{rules3.CG.decl.base}{CG}
\rulerCmdUse{rules3.CG.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.CG.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.decl.base.scheme}}{Declaration type rules}{rules3.DT.decl.base}{DT}
\rulerCmdUse{rules3.DT.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.DT.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.decl.base.scheme}}{Declaration type rules}{rules3.E.decl.base}{E}
\rulerCmdUse{rules3.E.decl.base.d.sig.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.decl.base.scheme}}{Declaration type rules}{rules3.EP.decl.base}{EP}
\rulerCmdUse{rules3.EP.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.EP.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.decl.base.scheme}}{Declaration type rules}{rules3.EX.decl.base}{EX}
\rulerCmdUse{rules3.EX.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.EX.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.decl.base.scheme}}{Declaration type rules}{rules3.HM.decl.base}{HM}
\rulerCmdUse{rules3.HM.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.HM.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.decl.base.scheme}}{Declaration type rules}{rules3.HS.decl.base}{HS}
\rulerCmdUse{rules3.HS.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.HS.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.decl.base.scheme}}{Declaration type rules}{rules3.I1.decl.base}{I1}
\rulerCmdUse{rules3.I1.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.I1.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I2.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.decl.base.scheme}}{Declaration type rules}{rules3.I2.decl.base}{I2}
\rulerCmdUse{rules3.I2.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.I2.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.decl.base.scheme}}{Declaration type rules}{rules3.K.decl.base}{K}
\rulerCmdUse{rules3.K.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.K.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.decl.base.scheme}}{Declaration type rules}{rules3.MD.decl.base}{MD}
\rulerCmdUse{rules3.MD.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.MD.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.decl.base.scheme}}{Declaration type rules}{rules3.NUM.decl.base}{NUM}
\rulerCmdUse{rules3.NUM.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.decl.base.scheme}}{Declaration type rules}{rules3.P.decl.base}{P}
\rulerCmdUse{rules3.P.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.P.decl.base.d.val}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.decl.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.decl.base.scheme}}{Declaration type rules}{rules3.TS.decl.base}{TS}
\rulerCmdUse{rules3.TS.decl.base.d.tysig}
\hspace{1ex}
\rulerCmdUse{rules3.TS.decl.base.d.val}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.ANN.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.ANN.expr.base.e.int}{%
\rulerRule{e.int}{ANN}
{%
| ppHtmlBlockUID | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
\\
| sigma ~> tyAnnRef | 
\\
| tyAnnRef ~> annKindMap | 
\\
| annKindMap :- tyAnnRef ~> tyAnnExp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : isigma ; sigma ~> IVarMp ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.ANN.expr.base.e.char}{%
\rulerRule{e.char}{ANN}
{%
| ppHtmlBlockUID | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
\\
| sigma ~> tyAnnRef | 
\\
| tyAnnRef ~> annKindMap | 
\\
| annKindMap :- tyAnnRef ~> tyAnnExp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : isigma ; sigma ~> IVarMp ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.ANN.expr.base.e.str}{%
\rulerRule{e.str}{ANN}
{%
| ppHtmlBlockUID | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
\\
| sigma ~> tyAnnRef | 
\\
| tyAnnRef ~> annKindMap | 
\\
| annKindMap :- tyAnnRef ~> tyAnnExp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : isigma ; sigma ~> IVarMp ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.ANN.expr.base.e.iint}{%
\rulerRule{e.iint}{ANN}
{%
| ppHtmlBlockUID | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
\\
| sigma ~> tyAnnRef | 
\\
| tyAnnRef ~> annKindMap | 
\\
| annKindMap :- tyAnnRef ~> tyAnnExp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : isigma ; sigma ~> IVarMp ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.ANN.expr.base.e.var}{%
\rulerRule{e.var}{ANN}
{%
| ppHtmlBlockUID | 
\\
| freshUID | 
\\
| constrUID2 | 
\\
| constrUID | 
\\
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
\\
| sigma ~> tyAnnRef | 
\\
| tyAnnRef ~> annKindMap | 
\\
| annKindMap :- tyAnnRef ~> tyAnnExp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : isigma ; sigma ~> IVarMp ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.ANN.expr.base.e.con}{%
\rulerRule{e.con}{ANN}
{%
| ppHtmlBlockUID | 
\\
| freshUID | 
\\
| constrUID2 | 
\\
| constrUID | 
\\
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
\\
| sigma ~> tyAnnRef | 
\\
| tyAnnRef ~> annKindMap | 
\\
| annKindMap :- tyAnnRef ~> tyAnnExp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : isigma ; sigma ~> IVarMp ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.ANN.expr.base.e.app}{%
\rulerRule{e.app}{ANN}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : isigma ; _ -> sigma ~> IVarMp ; VarMp | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : isigma ; _ ~> IVarMp ; VarMp | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : isigma ; sigma | ^{ | k | } |  ~> IVarMp ; VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.ANN.expr.base.e.app.f}{%
\rulerRule{e.app.f}{ANN}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : isigma ; _ -> sigma ~> IVarMp ; VarMp | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : isigma ; _ ~> IVarMp ; VarMp | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : isigma ; sigma | ^{ | k | } |  ~> IVarMp ; VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.ANN.expr.base.e.apptop}{%
\rulerRule{e.apptop}{ANN}
{%
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : isigma ; sigma ~> IVarMp ; VarMp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : isigma ; sigma ~> IVarMp ; VarMp | 
}
}

\rulerCmdDef{rules3.ANN.expr.base.e.lam}{%
\rulerRule{e.lam}{ANN}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tvarv1 -> tvarv2 <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fiopt ;  []  ++ Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt ; Gamma | _{ | p | } |  ; IVarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : isigma ; sigma | _{ | e | } |  ~> IVarMp ; VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : isigma ; sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> IVarMp ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.ANN.expr.base.e.let}{%
\rulerRule{e.let}{ANN}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | }^{ | nexists | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  | 
\\
| Gamma | _{ | t | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | t | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| Gamma | _{ | q | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | q | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| fiopt ; Gamma | _{ | q | }^{ | nexists | } |  + Gamma | _{ | g | } |  ; IVarMp | ^{ | k | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : isigma ; sigma ~> IVarMp ; VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : isigma ; sigma ~> IVarMp ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.ANN.expr.base.e.ann}{%
\rulerRule{e.ann}{ANN}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (VarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (VarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (VarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . VarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : isigma ; sigma | _{ | e | } |  ~> IVarMp ; VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : isigma ; VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> IVarMp ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.C.expr.base.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.expr.base.e.int}{%
\rulerRule{e.int}{C}
{%
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.C.expr.base.e.char}{%
\rulerRule{e.char}{C}
{%
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.C.expr.base.e.str}{%
\rulerRule{e.str}{C}
{%
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.C.expr.base.e.iint}{%
\rulerRule{e.iint}{C}
{%
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.C.expr.base.e.var}{%
\rulerRule{e.var}{C}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  VarMp | ^{ | k | } |  sigma | _{ | g | } |  <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.C.expr.base.e.con}{%
\rulerRule{e.con}{C}
{%
|  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  ,  ^^  || identc ||  ===  ||  | \overline{ | tvarv | } |  ||  | 
\\
| sigma | _{ | p | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) ,  ^^^  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ]  ===  | \overline{ | tvarv | } |  | 
\\
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  ( | \overline{ | tvarv | } |  -> sigma | _{ | p | } | ) <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.C.expr.base.e.app}{%
\rulerRule{e.app}{C}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| Gamma ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  | 
\\
| Gamma ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : VarMp | _{ | a | } |  sigma ~> VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.C.expr.base.e.apptop}{%
\rulerRule{e.apptop}{C}
{%
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.C.expr.base.e.lam}{%
\rulerRule{e.lam}{C}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tvarv1 -> tvarv2 <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ;  []  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| Gamma | _{ | p | } |  + Gamma ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : VarMp | _{ | e | } |  sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.C.expr.base.e.let}{%
\rulerRule{e.let}{C}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  | 
\\
| Gamma | _{ | p | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.C.expr.base.e.ann}{%
\rulerRule{e.ann}{C}
{%
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  | 
\\
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | a | } |  <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | a | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.CG.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.CG.expr.base.e.int}{%
\rulerRule{e.int}{CG}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  ; Transl (int) | 
}
}

\rulerCmdDef{rules3.CG.expr.base.e.char}{%
\rulerRule{e.char}{CG}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  ; Transl (char) | 
}
}

\rulerCmdDef{rules3.CG.expr.base.e.str}{%
\rulerRule{e.str}{CG}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  ; Transl (str) | 
}
}

\rulerCmdDef{rules3.CG.expr.base.e.iint}{%
\rulerRule{e.iint}{CG}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  ; Transl (integer) | 
}
}

\rulerCmdDef{rules3.CG.expr.base.e.var}{%
\rulerRule{e.var}{CG}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  ; Transl (ident) | 
}
}

\rulerCmdDef{rules3.CG.expr.base.e.con}{%
\rulerRule{e.con}{CG}
{%
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  ; Transl (identc) | 
}
}

\rulerCmdDef{rules3.CG.expr.base.e.app}{%
\rulerRule{e.app}{CG}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ; Transl | _{ | f | } |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.CG.expr.base.e.app.f}{%
\rulerRule{e.app.f}{CG}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ; Transl | _{ | f | } |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.CG.expr.base.e.apptop}{%
\rulerRule{e.apptop}{CG}
{%
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp ; Transl | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp ; Transl | 
}
}

\rulerCmdDef{rules3.CG.expr.base.e.lam}{%
\rulerRule{e.lam}{CG}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tvarv1 -> tvarv2 <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fiopt ;  []  ++ Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt ; Gamma | _{ | p | } |  ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ;  \ p -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.CG.expr.base.e.let}{%
\rulerRule{e.let}{CG}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | }^{ | nexists | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  ;  | \overline{ | Transl | _{ | d | }} |  | 
\\
| Gamma | _{ | t | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | t | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| Gamma | _{ | q | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | q | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| fiopt ; Gamma | _{ | q | }^{ | nexists | } |  + Gamma | _{ | g | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  ; let  | \overline{ | Transl | _{ | d | }} |  ^^ in Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.CG.expr.base.e.ann}{%
\rulerRule{e.ann}{CG}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (VarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (VarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (VarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . VarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
}

\rulerCmdDef{rules3.DT.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.expr.base.e.int}{%
\rulerRule{e.int}{DT}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.DT.expr.base.e.char}{%
\rulerRule{e.char}{DT}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.DT.expr.base.e.str}{%
\rulerRule{e.str}{DT}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.DT.expr.base.e.iint}{%
\rulerRule{e.iint}{DT}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.DT.expr.base.e.var}{%
\rulerRule{e.var}{DT}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.DT.expr.base.e.con}{%
\rulerRule{e.con}{DT}
{%
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.DT.expr.base.e.app}{%
\rulerRule{e.app}{DT}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ -> sigma ~> VarMp | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.DT.expr.base.e.app.f}{%
\rulerRule{e.app.f}{DT}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ -> sigma ~> VarMp | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.DT.expr.base.e.apptop}{%
\rulerRule{e.apptop}{DT}
{%
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.expr.base.e.lam}{%
\rulerRule{e.lam}{DT}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tvarv1 -> tvarv2 <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fiopt ;  []  ++ Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt ; Gamma | _{ | p | } |  ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.DT.expr.base.e.let}{%
\rulerRule{e.let}{DT}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | }^{ | nexists | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  | 
\\
| Gamma | _{ | t | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | t | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| Gamma | _{ | q | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | q | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| fiopt ; Gamma | _{ | q | }^{ | nexists | } |  + Gamma | _{ | g | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.DT.expr.base.e.ann}{%
\rulerRule{e.ann}{DT}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (VarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (VarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (VarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . VarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.E.expr.base.scheme}{%
\ensuremath{| Gamma :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.E.expr.base.e.int}{%
\rulerRule{e.int}{E}
{%
}
{%
| Gamma :- | ^{ | e | } |  int : Int | 
}
}

\rulerCmdDef{rules3.E.expr.base.e.char}{%
\rulerRule{e.char}{E}
{%
}
{%
| Gamma :- | ^{ | e | } |  char : Char | 
}
}

\rulerCmdDef{rules3.E.expr.base.e.str}{%
\rulerRule{e.str}{E}
{%
}
{%
| Gamma :- | ^{ | e | } |  str : tyString | 
}
}

\rulerCmdDef{rules3.E.expr.base.e.iint}{%
\rulerRule{e.iint}{E}
{%
}
{%
| Gamma :- | ^{ | e | } |  integer : tyInteger | 
}
}

\rulerCmdDef{rules3.E.expr.base.e.var}{%
\rulerRule{e.var}{E}
{%
| ident :-> sigma `elem` Gamma | 
}
{%
| Gamma :- | ^{ | e | } |  ident : sigma | 
}
}

\rulerCmdDef{rules3.E.expr.base.e.app}{%
\rulerRule{e.app}{E}
{%
| Gamma :- | ^{ | e | } |  e | _{ | 2 | } |  : sigma | _{ | a | } |  | 
\\
| Gamma :- | ^{ | e | } |  e | _{ | 1 | } |  : sigma | _{ | a | } |  -> sigma | 
}
{%
| Gamma :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | 
}
}

\rulerCmdDef{rules3.E.expr.base.e.lam}{%
\rulerRule{e.lam}{E}
{%
| (identv :-> sigma | _{ | identv | } | ) + Gamma :- | ^{ | e | } |  e : sigma | _{ | e | } |  | 
}
{%
| Gamma :- | ^{ | e | } |   \ identv -> e : sigma | _{ | identv | } |  -> sigma | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.E.expr.base.e.let}{%
\rulerRule{e.let}{E}
{%
| Gamma | _{ | t | } |  ++ Gamma :- | ^{ | d | } |  d : Gamma | _{ | t | } |  | 
\\
| Gamma | _{ | t | } |  ++ Gamma :- | ^{ | e | } |  b : sigma | 
}
{%
| Gamma :- | ^{ | e | } |  let d in b : sigma | 
}
}

\rulerCmdDef{rules3.E.expr.base.e.ann}{%
\rulerRule{e.ann}{E}
{%
|  :- | ^{ | t | } |  t : sigma | 
\\
| Gamma :- | ^{ | e | } |  e : sigma | 
}
{%
| Gamma :- | ^{ | e | } |  (e :: t) : sigma | 
}
}

\rulerCmdDef{rules3.EP.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.EP.expr.base.e.int}{%
\rulerRule{e.int}{EP}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (int) | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.char}{%
\rulerRule{e.char}{EP}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (char) | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.str}{%
\rulerRule{e.str}{EP}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (str) | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.iint}{%
\rulerRule{e.iint}{EP}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (integer) | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.var}{%
\rulerRule{e.var}{EP}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (ident) | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.con}{%
\rulerRule{e.con}{EP}
{%
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (identc) | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.app}{%
\rulerRule{e.app}{EP}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.app.f}{%
\rulerRule{e.app.f}{EP}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.iapp}{%
\rulerRule{e.iapp}{EP}
{%
| implFIOpts ; Gamma ; VarMp | ^{ | k | } |  ; pi | _{ | 2 | } |  => sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : pi | _{ | a | } |  => sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| pi | _{ | a | } |  :> _ : sigma | _{ | a | } |  `elem` | _{ | pi | } |  Gamma | 
\\
| strongFIOpts ; Gamma ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ ( ! e | _{ | 2 | } |  <: pi | _{ | 2 | } |  ! ) : VarMp | _{ | a | } |  sigma ~> VarMp | _{ | a | } |  ; Transl | _{ | f | } |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.apptop}{%
\rulerRule{e.apptop}{EP}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ |  <=  | } |  pvar => tvarv  <=  VarMp | ^{ | k | } |  sigma | _{ | e | }^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | e | } |  ~> VarMp | _{ | E | } |  ; Coe | _{ | lam | } |  | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | E | } |  VarMp | ^{ | k | } |  ; sigma | _{ | e | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  -> sigma ~> VarMp | _{ | e | } |  ;  \  | \overline{ | Transl | _{ | i | }} |  -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.lam}{%
\rulerRule{e.lam}{EP}
{%
| tvarv1 , tvarv2 , pvar | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  pvar => tvarv1 -> tvarv2 <= sigma | ^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | p | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | F | } |  ; Coe | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ;  []  ++ Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  => VarMp | _{ | e | } |  sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ;  | \overline{ | Transl | _{ | i | }} |  ->  \ p -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.ilam}{%
\rulerRule{e.ilam}{EP}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| implFIOpts ; VarMp | ^{ | k | } |  :- | ^{ |  <=  | } |  pi => tvarv  <=  VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : pi | _{ | a | } |  => sigma | _{ | r | } |  ~> VarMp | _{ | P | } |  ; Coe | _{ | lam | } |  | 
\\
| pi | _{ | a | } |  :> _ : sigma | _{ | a | } |  `elem` | _{ | pi | } |  Gamma | 
\\
| fiopt ;  []  ;  []  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> patTyVarMp ; _ | 
\\
| Gamma | _{ | i | } |  ===  [ pi | _{ | a | } |  :> p : sigma | _{ | a | } |  ]  | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma | _{ | p | } |  , Gamma ; patTyVarMp VarMp | _{ | P | } |  VarMp | ^{ | k | } |  ; sigma | _{ | r | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ ( ! p <: pi ! ) -> e : sigma ~> VarMp | _{ | e | } |  ;  \ p -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.let}{%
\rulerRule{e.let}{EP}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | }^{ | nexists | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  ;  | \overline{ | Transl | _{ | d | }} |  | 
\\
| Gamma | _{ | t | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | t | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| Gamma | _{ | q | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | q | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| fiopt ; Gamma | _{ | q | }^{ | nexists | } |  + Gamma | _{ | g | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  ; let  | \overline{ | Transl | _{ | d | }} |  ^^ in Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.EP.expr.base.e.ann}{%
\rulerRule{e.ann}{EP}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (VarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (VarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (VarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . VarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
}

\rulerCmdDef{rules3.EX.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.expr.base.e.int}{%
\rulerRule{e.int}{EX}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.EX.expr.base.e.char}{%
\rulerRule{e.char}{EX}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.EX.expr.base.e.str}{%
\rulerRule{e.str}{EX}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.EX.expr.base.e.iint}{%
\rulerRule{e.iint}{EX}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.EX.expr.base.e.var}{%
\rulerRule{e.var}{EX}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.EX.expr.base.e.con}{%
\rulerRule{e.con}{EX}
{%
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.EX.expr.base.e.app}{%
\rulerRule{e.app}{EX}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ -> sigma ~> VarMp | _{ | f | } |  | 
\\
| instLRFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.EX.expr.base.e.app.f}{%
\rulerRule{e.app.f}{EX}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ -> sigma ~> VarMp | _{ | f | } |  | 
\\
| strongFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.EX.expr.base.e.apptop}{%
\rulerRule{e.apptop}{EX}
{%
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.EX.expr.base.e.lam}{%
\rulerRule{e.lam}{EX}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tvarv1 -> tvarv2 <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fiopt ;  []  ++ Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt ; Gamma | _{ | p | } |  ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.EX.expr.base.e.let}{%
\rulerRule{e.let}{EX}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | }^{ | nexists | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  | 
\\
| Gamma | _{ | t | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | t | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| Gamma | _{ | q | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | q | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| fiopt ; Gamma | _{ | q | }^{ | nexists | } |  + Gamma | _{ | g | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.EX.expr.base.e.ann}{%
\rulerRule{e.ann}{EX}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (VarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (VarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (VarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . VarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.HM.expr.base.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.expr.base.e.int}{%
\rulerRule{e.int}{HM}
{%
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.HM.expr.base.e.char}{%
\rulerRule{e.char}{HM}
{%
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.HM.expr.base.e.str}{%
\rulerRule{e.str}{HM}
{%
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.HM.expr.base.e.iint}{%
\rulerRule{e.iint}{HM}
{%
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.HM.expr.base.e.var}{%
\rulerRule{e.var}{HM}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ forall ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | g | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarv | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarv | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  VarMp | ^{ | k | } |  sigma | _{ | i | } |  <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.HM.expr.base.e.con}{%
\rulerRule{e.con}{HM}
{%
|  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  ,  ^^  || identc ||  ===  ||  | \overline{ | tvarv | } |  ||  | 
\\
| sigma | _{ | p | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) ,  ^^^  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ]  ===  | \overline{ | tvarv | } |  | 
\\
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  ( | \overline{ | tvarv | } |  -> sigma | _{ | p | } | ) <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.HM.expr.base.e.app}{%
\rulerRule{e.app}{HM}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| Gamma ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  | 
\\
| Gamma ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : VarMp | _{ | a | } |  sigma ~> VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.HM.expr.base.e.apptop}{%
\rulerRule{e.apptop}{HM}
{%
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.HM.expr.base.e.lam}{%
\rulerRule{e.lam}{HM}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tvarv1 -> tvarv2 <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ;  []  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| Gamma | _{ | p | } |  + Gamma ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : VarMp | _{ | e | } |  sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.HM.expr.base.e.let}{%
\rulerRule{e.let}{HM}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| Gamma | _{ | q | } |  + Gamma | _{ | g | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.HM.expr.base.e.ann}{%
\rulerRule{e.ann}{HM}
{%
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} | )) . sigma | _{ | a | } |  | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ forall ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | q | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf ]  | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | i | } |  <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | i | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
{%
| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : sigma | _{ | a | } |  ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.HS.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.HS.expr.base.e.int}{%
\rulerRule{e.int}{HS}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (int) | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.char}{%
\rulerRule{e.char}{HS}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (char) | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.str}{%
\rulerRule{e.str}{HS}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (str) | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.iint}{%
\rulerRule{e.iint}{HS}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (integer) | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.var}{%
\rulerRule{e.var}{HS}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (ident) | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.con}{%
\rulerRule{e.con}{HS}
{%
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (identc) | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.app}{%
\rulerRule{e.app}{HS}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.app.f}{%
\rulerRule{e.app.f}{HS}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.iapp}{%
\rulerRule{e.iapp}{HS}
{%
| implFIOpts ; Gamma ; VarMp | ^{ | k | } |  ; pi | _{ | 2 | } |  => sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : pi | _{ | a | } |  => sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| pi | _{ | a | } |  :> _ : sigma | _{ | a | } |  `elem` | _{ | pi | } |  Gamma | 
\\
| strongFIOpts ; Gamma ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ ( ! e | _{ | 2 | } |  <: pi | _{ | 2 | } |  ! ) : VarMp | _{ | a | } |  sigma ~> VarMp | _{ | a | } |  ; Transl | _{ | f | } |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.apptop}{%
\rulerRule{e.apptop}{HS}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ |  <=  | } |  pvar => tvarv  <=  VarMp | ^{ | k | } |  sigma | _{ | e | }^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | e | } |  ~> VarMp | _{ | E | } |  ; Coe | _{ | lam | } |  | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | E | } |  VarMp | ^{ | k | } |  ; sigma | _{ | e | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  -> sigma ~> VarMp | _{ | e | } |  ;  \  | \overline{ | Transl | _{ | i | }} |  -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.lam}{%
\rulerRule{e.lam}{HS}
{%
| tvarv1 , tvarv2 , pvar | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  pvar => tvarv1 -> tvarv2 <= sigma | ^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | p | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | F | } |  ; Coe | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ;  []  ++ Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  => VarMp | _{ | e | } |  sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ;  | \overline{ | Transl | _{ | i | }} |  ->  \ p -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.ilam}{%
\rulerRule{e.ilam}{HS}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| implFIOpts ; VarMp | ^{ | k | } |  :- | ^{ |  <=  | } |  pi => tvarv  <=  VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : pi | _{ | a | } |  => sigma | _{ | r | } |  ~> VarMp | _{ | P | } |  ; Coe | _{ | lam | } |  | 
\\
| pi | _{ | a | } |  :> _ : sigma | _{ | a | } |  `elem` | _{ | pi | } |  Gamma | 
\\
| fiopt ;  []  ;  []  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> patTyVarMp ; _ | 
\\
| Gamma | _{ | i | } |  ===  [ pi | _{ | a | } |  :> p : sigma | _{ | a | } |  ]  | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma | _{ | p | } |  , Gamma ; patTyVarMp VarMp | _{ | P | } |  VarMp | ^{ | k | } |  ; sigma | _{ | r | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ ( ! p <: pi ! ) -> e : sigma ~> VarMp | _{ | e | } |  ;  \ p -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.let}{%
\rulerRule{e.let}{HS}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | }^{ | nexists | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  ;  | \overline{ | Transl | _{ | d | }} |  | 
\\
| Gamma | _{ | t | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | t | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| Gamma | _{ | q | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | q | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| fiopt ; Gamma | _{ | q | }^{ | nexists | } |  + Gamma | _{ | g | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  ; let  | \overline{ | Transl | _{ | d | }} |  ^^ in Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.HS.expr.base.e.ann}{%
\rulerRule{e.ann}{HS}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (VarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (VarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (VarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . VarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
}

\rulerCmdDef{rules3.I1.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.expr.base.e.int}{%
\rulerRule{e.int}{I1}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I1.expr.base.e.char}{%
\rulerRule{e.char}{I1}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I1.expr.base.e.str}{%
\rulerRule{e.str}{I1}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I1.expr.base.e.iint}{%
\rulerRule{e.iint}{I1}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I1.expr.base.e.var}{%
\rulerRule{e.var}{I1}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I1.expr.base.e.con}{%
\rulerRule{e.con}{I1}
{%
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I1.expr.base.e.app}{%
\rulerRule{e.app}{I1}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ -> sigma ~> VarMp | _{ | f | } |  | 
\\
| instLRFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.I1.expr.base.e.app.f}{%
\rulerRule{e.app.f}{I1}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ -> sigma ~> VarMp | _{ | f | } |  | 
\\
| strongFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.I1.expr.base.e.apptop}{%
\rulerRule{e.apptop}{I1}
{%
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I1.expr.base.e.lam}{%
\rulerRule{e.lam}{I1}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tvarv1 -> tvarv2 <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fiopt ;  []  ++ Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt ; Gamma | _{ | p | } |  ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.I1.expr.base.e.let}{%
\rulerRule{e.let}{I1}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| fiopt ; Gamma | _{ | q | } |  + Gamma | _{ | g | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.I1.expr.base.e.ann}{%
\rulerRule{e.ann}{I1}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (VarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (VarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (VarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . VarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.I2.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.I2.expr.base.e.int}{%
\rulerRule{e.int}{I2}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : Int ; sigma ~> IVarMp | ^{ | k | } |  ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I2.expr.base.e.char}{%
\rulerRule{e.char}{I2}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : Char ; sigma ~> IVarMp | ^{ | k | } |  ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I2.expr.base.e.str}{%
\rulerRule{e.str}{I2}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : tyString ; sigma ~> IVarMp | ^{ | k | } |  ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I2.expr.base.e.iint}{%
\rulerRule{e.iint}{I2}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : tyInteger ; sigma ~> IVarMp | ^{ | k | } |  ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I2.expr.base.e.var}{%
\rulerRule{e.var}{I2}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : IVarMp | ^{ | k | } |  sigma | _{ | g | } |  ; sigma ~> IVarMp | ^{ | k | } |  ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I2.expr.base.e.con}{%
\rulerRule{e.con}{I2}
{%
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : IVarMp | ^{ | k | } |  sigma | _{ | g | } |  ; sigma ~> IVarMp | ^{ | k | } |  ; VarMp VarMp | ^{ | k | } |  | 
}
}

\rulerCmdDef{rules3.I2.expr.base.e.app}{%
\rulerRule{e.app}{I2}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : isigma | _{ | f | } |  ; _ -> sigma ~> IVarMp | _{ | f | } |  ; VarMp | _{ | f | } |  | 
\\
| impredFIOpts ; IVarMp | _{ | f | } |  :- | ^{ | <= | } |  isigma | _{ | f | } |  <= IVarMp | _{ | f | } |  (tvarv -> sigma | ^{ | k | } | ) : _ ~> IVarMp | _{ | F | } |  | 
\\
| instLRFIOpts ; Gamma ; IVarMp | _{ | F | } |  IVarMp | _{ | f | } |  ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : isigma | _{ | a | } |  ; _ ~> IVarMp | _{ | a | } |  ; VarMp | _{ | a | } |  | 
\\
| fioBindToTyAltsY , instLFIOpts ; IVarMp | _{ | a | } |  :- | ^{ | <= | } |  isigma | _{ | a | } |  <= IVarMp | _{ | a | } |  tvarv : _ ~> IVarMp | _{ | A | } |  | 
\\
| IVarMp | _{ | 1 | } |  === IVarMp | _{ | A | } |  IVarMp | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : IVarMp | _{ | 1 | } |  sigma | ^{ | k | } |  ; sigma | ^{ | k | } |  ~> IVarMp | _{ | 1 | } |  ; VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.I2.expr.base.e.app.f}{%
\rulerRule{e.app.f}{I2}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : isigma | _{ | f | } |  ; _ -> sigma ~> IVarMp | _{ | f | } |  ; VarMp | _{ | f | } |  | 
\\
| impredFIOpts ; IVarMp | _{ | f | } |  :- | ^{ | <= | } |  isigma | _{ | f | } |  <= IVarMp | _{ | f | } |  (tvarv -> sigma | ^{ | k | } | ) : _ ~> IVarMp | _{ | F | } |  | 
\\
| strongFIOpts ; Gamma ; IVarMp | _{ | F | } |  IVarMp | _{ | f | } |  ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : isigma | _{ | a | } |  ; _ ~> IVarMp | _{ | a | } |  ; VarMp | _{ | a | } |  | 
\\
| impredFIOpts ; IVarMp | _{ | a | } |  :- | ^{ | <= | } |  isigma | _{ | a | } |  <= IVarMp | _{ | a | } |  tvarv : _ ~> IVarMp | _{ | A | } |  | 
\\
| IVarMp | _{ | 1 | } |  === IVarMp | _{ | A | } |  IVarMp | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  ~ e | _{ | 2 | } |  : IVarMp | _{ | 1 | } |  sigma | ^{ | k | } |  ; sigma | ^{ | k | } |  ~> IVarMp | _{ | 1 | } |  ; VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.I2.expr.base.e.apptop}{%
\rulerRule{e.apptop}{I2}
{%
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | _{ | e | }^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : isigma ; sigma ~> IVarMp ; VarMp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : isigma ; sigma ~> IVarMp ; VarMp | 
}
}

\rulerCmdDef{rules3.I2.expr.base.e.lam}{%
\rulerRule{e.lam}{I2}
{%
|  | \overline{ | tvarv | _{ | g | }} |  === ftv (Gamma) | 
\\
| meetFIOpts ; IVarMp | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | talt elim | }{ | :- | } |  sigma | ^{ | k | } |  : sigma | _{ | e | }^{ | k | } |  ~> elimVarMp | 
\\
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fioBindLBeforeRN , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  VarMp | ^{ | k | } |  (tvarv1 -> tvarv2) <= VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fioBindRFirstY , fiopt ; elimVarMp :- | ^{ | <= | } |  tvarv1 -> tvarv2 <= sigma | _{ | e | }^{ | k | } |  : _ ~> IVarMp | _{ | F | } |  | 
\\
| fiopt ;  []  ++ Gamma ;  []  ; IVarMp | _{ | F | } |  tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| Gamma | _{ | l | } |  ++ _ === Gamma | _{ | p | } |  | 
\\
| VarMp | _{ | 2 | } |  === VarMp | _{ | F | } |  ||\> ftv (VarMp | ^{ | k | } |  (tvarv1 -> tvarv2)) | 
\\
| fiopt ; Gamma | _{ | p | } |  ; VarMp | _{ | p | } |  IVarMp | _{ | F | } |  IVarMp | ^{ | k | } |  ; VarMp | _{ | 3 | } |  ; tvarv2 :- | ^{ | e | } |  e : isigma | _{ | e | } |  ; sigma | _{ | e | } |  ~> IVarMp | _{ | e | } |  ; VarMp | _{ | e | } |  | 
\\
| VarMp | _{ | 3 | } |  === VarMp | _{ | Gamma | } |  VarMp | _{ | p | } |  VarMp | _{ | 2 | } |  (VarMp | ^{ | k | } |  ||>> IVarMp | _{ | F | } | ) VarMp | ^{ | k | } |  | 
\\
| meetFIOpts ; IVarMp | _{ | e | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | Gamma talt elim | }{ | :- | } |  Gamma | _{ | l | } |  : VarMp | _{ | Gamma | } |  | 
\\
| IVarMp | _{ | 1 | } |  === VarMp | _{ | Gamma | } |  IVarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : IVarMp | _{ | 1 | } |  sigma | _{ | p | } |  -> VarMp | _{ | Gamma | } |  isigma | _{ | e | } |  ; sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> IVarMp | _{ | 1 | } |  ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.I2.expr.base.e.let}{%
\rulerRule{e.let}{I2}
{%
|  | \overline{ | tvarv | _{ | g | }} |  === ftv (Gamma) | 
\\
| VarMp | _{ | t | } |  Gamma | _{ | t | } |  ; Gamma | _{ | t | } |  ++ Gamma ; Gamma | _{ | p | } |  ;  []  ; VarMp | _{ | t | }^{ | ex | } |  VarMp | _{ | t | } |  ; VarMp | _{ | p | } |  IVarMp | ^{ | k | } |  ; VarMp | _{ | Gamma | } |  VarMp | _{ | p | } |  VarMp | ^{ | k | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | t | } |  ; VarMp | _{ | p | } |  ; IVarMp | _{ | d | } |  ; VarMp | _{ | d | } |  | 
\\
| joinFIOpts ; IVarMp | _{ | d | } |  ;  | \overline{ | tvarv | _{ | g | }} |   | \stackrel{ | Gamma talt elim | }{ | :- | } |  Gamma | _{ | l | } |  : VarMp | _{ | Gamma | } |  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| VarMp | _{ | t | }^{ | ex | } |  ===  [ tvarv | _{ | g | } |  :-> VarMp sigma || (i :-> tvarv | _{ | g | } | ) <- Gamma | _{ | t | } |  , exists ^  | \overline{ | tvarv | } |  . sigma === VarMp | _{ | t | } |  tvarv | _{ | g | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| VarMp | _{ | q | } |  ===  [ tvarv | _{ | g | } |  :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> tvarv | _{ | g | } | ) <- Gamma | _{ | l | } |  , sigma === VarMp | _{ | d | } |  tvarv | _{ | g | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) \\ ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| VarMp | _{ | l | }^{ | ex | } |  ===  [ tvarv | _{ | g | } |  :-> VarMp sigma || (i :-> tvarv | _{ | g | } | ) <- Gamma | _{ | l | } |  , exists ^  | \overline{ | tvarv | } |  . sigma === VarMp | _{ | q | } |  VarMp | _{ | d | } |  tvarv | _{ | g | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| fiopt ; Gamma | _{ | p | } |  ; VarMp | _{ | Gamma | } |  IVarMp | _{ | d | } |  ; VarMp | _{ | l | }^{ | ex | } |  VarMp | _{ | q | } |  VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : isigma ; sigma ~> IVarMp | _{ | e | } |  ; VarMp | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : isigma ; sigma ~> IVarMp | _{ | e | } |  ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.I2.expr.base.e.ann}{%
\rulerRule{e.ann}{I2}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (IVarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (IVarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (IVarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . IVarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  VarMp | ^{ | k | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  | 
\\
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : isigma | _{ | e | } |  ; sigma | _{ | e | } |  ~> IVarMp | _{ | e | } |  ; VarMp | _{ | e | } |  | 
\\
| fioBindToTyAltsY , fiopt ; IVarMp | _{ | e | } |  :- | ^{ | <= | } |  isigma | _{ | e | } |  <= sigma | _{ | q | } |  : isigma ~> IVarMp | 
}
{%
| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : isigma ; VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> IVarMp IVarMp | _{ | e | } |  ; VarMp | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.K.expr.base.scheme}{%
\ensuremath{| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.K.expr.base.e.int}{%
\rulerRule{e.int}{K}
{%
|  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma | 
}
}

\rulerCmdDef{rules3.K.expr.base.e.char}{%
\rulerRule{e.char}{K}
{%
|  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma | 
}
}

\rulerCmdDef{rules3.K.expr.base.e.str}{%
\rulerRule{e.str}{K}
{%
|  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma | 
}
}

\rulerCmdDef{rules3.K.expr.base.e.iint}{%
\rulerRule{e.iint}{K}
{%
|  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma | 
}
}

\rulerCmdDef{rules3.K.expr.base.e.var}{%
\rulerRule{e.var}{K}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
|  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma | 
}
}

\rulerCmdDef{rules3.K.expr.base.e.con}{%
\rulerRule{e.con}{K}
{%
|  | \overline{ | sigma | _{ | p | }} |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
}
{%
| Gamma ; ... -> sigma | _{ | r | } |  :- | ^{ | e | } |  (,) :  | \overline{ | sigma | _{ | p | }} |  -> sigma | _{ | r | } |  | 
}
}

\rulerCmdDef{rules3.K.expr.base.e.app}{%
\rulerRule{e.app}{K}
{%
| Gamma ; ANY -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : sigma | _{ | a | } |  -> sigma | 
\\
| Gamma ; sigma | _{ | a | } |  :- | ^{ | e | } |  e | _{ | 2 | } |  : _ | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | 
}
}

\rulerCmdDef{rules3.K.expr.base.e.lam}{%
\rulerRule{e.lam}{K}
{%
|  :- | ^{ | <= | } |  ANY -> ANY <= sigma | ^{ | k | } |  : sigma | _{ | p | } |  -> sigma | _{ | r | } |  | 
\\
|  []  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | p | } |  + Gamma ; sigma | _{ | r | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : sigma | _{ | p | } |  -> sigma | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.K.expr.base.e.let}{%
\rulerRule{e.let}{K}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | } |  ++ Gamma ; Gamma | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | p | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma | 
}
}

\rulerCmdDef{rules3.K.expr.base.e.ann}{%
\rulerRule{e.ann}{K}
{%
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  | 
\\
|  :- | ^{ | <= | } |  sigma | _{ | a | } |  <= sigma | ^{ | k | } |  : _ | 
\\
| Gamma ; sigma | _{ | a | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : sigma | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.MD.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.MD.expr.base.e.int}{%
\rulerRule{e.int}{MD}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (int) | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.char}{%
\rulerRule{e.char}{MD}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (char) | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.str}{%
\rulerRule{e.str}{MD}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (str) | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.iint}{%
\rulerRule{e.iint}{MD}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (integer) | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.var}{%
\rulerRule{e.var}{MD}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (ident) | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.con}{%
\rulerRule{e.con}{MD}
{%
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (identc) | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.app}{%
\rulerRule{e.app}{MD}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.app.f}{%
\rulerRule{e.app.f}{MD}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.iapp}{%
\rulerRule{e.iapp}{MD}
{%
| implFIOpts ; Gamma ; VarMp | ^{ | k | } |  ; pi | _{ | 2 | } |  => sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : pi | _{ | a | } |  => sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| pi | _{ | a | } |  :> _ : sigma | _{ | a | } |  `elem` | _{ | pi | } |  Gamma | 
\\
| strongFIOpts ; Gamma ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ ( ! e | _{ | 2 | } |  <: pi | _{ | 2 | } |  ! ) : VarMp | _{ | a | } |  sigma ~> VarMp | _{ | a | } |  ; Transl | _{ | f | } |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.apptop}{%
\rulerRule{e.apptop}{MD}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ |  <=  | } |  pvar => tvarv  <=  VarMp | ^{ | k | } |  sigma | _{ | e | }^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | e | } |  ~> VarMp | _{ | E | } |  ; Coe | _{ | lam | } |  | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | E | } |  VarMp | ^{ | k | } |  ; sigma | _{ | e | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  -> sigma ~> VarMp | _{ | e | } |  ;  \  | \overline{ | Transl | _{ | i | }} |  -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.lam}{%
\rulerRule{e.lam}{MD}
{%
| tvarv1 , tvarv2 , pvar | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  pvar => tvarv1 -> tvarv2 <= sigma | ^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | p | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | F | } |  ; Coe | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ;  []  ++ Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  => VarMp | _{ | e | } |  sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ;  | \overline{ | Transl | _{ | i | }} |  ->  \ p -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.ilam}{%
\rulerRule{e.ilam}{MD}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| implFIOpts ; VarMp | ^{ | k | } |  :- | ^{ |  <=  | } |  pi => tvarv  <=  VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : pi | _{ | a | } |  => sigma | _{ | r | } |  ~> VarMp | _{ | P | } |  ; Coe | _{ | lam | } |  | 
\\
| pi | _{ | a | } |  :> _ : sigma | _{ | a | } |  `elem` | _{ | pi | } |  Gamma | 
\\
| fiopt ;  []  ;  []  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> patTyVarMp ; _ | 
\\
| Gamma | _{ | i | } |  ===  [ pi | _{ | a | } |  :> p : sigma | _{ | a | } |  ]  | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma | _{ | p | } |  , Gamma ; patTyVarMp VarMp | _{ | P | } |  VarMp | ^{ | k | } |  ; sigma | _{ | r | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ ( ! p <: pi ! ) -> e : sigma ~> VarMp | _{ | e | } |  ;  \ p -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.let}{%
\rulerRule{e.let}{MD}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | }^{ | nexists | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  ;  | \overline{ | Transl | _{ | d | }} |  | 
\\
| Gamma | _{ | t | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | t | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| Gamma | _{ | q | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | q | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| fiopt ; Gamma | _{ | q | }^{ | nexists | } |  + Gamma | _{ | g | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  ; let  | \overline{ | Transl | _{ | d | }} |  ^^ in Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.MD.expr.base.e.ann}{%
\rulerRule{e.ann}{MD}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (VarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (VarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (VarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . VarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.NUM.expr.base.e.int}{%
\rulerRule{e.int}{NUM}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (int) | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.char}{%
\rulerRule{e.char}{NUM}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (char) | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.str}{%
\rulerRule{e.str}{NUM}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (str) | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.iint}{%
\rulerRule{e.iint}{NUM}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (integer) | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.var}{%
\rulerRule{e.var}{NUM}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (ident) | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.con}{%
\rulerRule{e.con}{NUM}
{%
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (identc) | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.app}{%
\rulerRule{e.app}{NUM}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.app.f}{%
\rulerRule{e.app.f}{NUM}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.iapp}{%
\rulerRule{e.iapp}{NUM}
{%
| implFIOpts ; Gamma ; VarMp | ^{ | k | } |  ; pi | _{ | 2 | } |  => sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : pi | _{ | a | } |  => sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| pi | _{ | a | } |  :> _ : sigma | _{ | a | } |  `elem` | _{ | pi | } |  Gamma | 
\\
| strongFIOpts ; Gamma ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ ( ! e | _{ | 2 | } |  <: pi | _{ | 2 | } |  ! ) : VarMp | _{ | a | } |  sigma ~> VarMp | _{ | a | } |  ; Transl | _{ | f | } |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.apptop}{%
\rulerRule{e.apptop}{NUM}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ |  <=  | } |  pvar => tvarv  <=  VarMp | ^{ | k | } |  sigma | _{ | e | }^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | e | } |  ~> VarMp | _{ | E | } |  ; Coe | _{ | lam | } |  | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | E | } |  VarMp | ^{ | k | } |  ; sigma | _{ | e | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  -> sigma ~> VarMp | _{ | e | } |  ;  \  | \overline{ | Transl | _{ | i | }} |  -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.lam}{%
\rulerRule{e.lam}{NUM}
{%
| tvarv1 , tvarv2 , pvar | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  pvar => tvarv1 -> tvarv2 <= sigma | ^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | p | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | F | } |  ; Coe | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ;  []  ++ Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  => VarMp | _{ | e | } |  sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ;  | \overline{ | Transl | _{ | i | }} |  ->  \ p -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.ilam}{%
\rulerRule{e.ilam}{NUM}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| implFIOpts ; VarMp | ^{ | k | } |  :- | ^{ |  <=  | } |  pi => tvarv  <=  VarMp | ^{ | k | } |  sigma | ^{ | k | } |  : pi | _{ | a | } |  => sigma | _{ | r | } |  ~> VarMp | _{ | P | } |  ; Coe | _{ | lam | } |  | 
\\
| pi | _{ | a | } |  :> _ : sigma | _{ | a | } |  `elem` | _{ | pi | } |  Gamma | 
\\
| fiopt ;  []  ;  []  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> patTyVarMp ; _ | 
\\
| Gamma | _{ | i | } |  ===  [ pi | _{ | a | } |  :> p : sigma | _{ | a | } |  ]  | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma | _{ | p | } |  , Gamma ; patTyVarMp VarMp | _{ | P | } |  VarMp | ^{ | k | } |  ; sigma | _{ | r | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ ( ! p <: pi ! ) -> e : sigma ~> VarMp | _{ | e | } |  ;  \ p -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.let}{%
\rulerRule{e.let}{NUM}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | }^{ | nexists | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  ;  | \overline{ | Transl | _{ | d | }} |  | 
\\
| Gamma | _{ | t | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | t | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| Gamma | _{ | q | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | q | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| fiopt ; Gamma | _{ | q | }^{ | nexists | } |  + Gamma | _{ | g | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  ; let  | \overline{ | Transl | _{ | d | }} |  ^^ in Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.NUM.expr.base.e.ann}{%
\rulerRule{e.ann}{NUM}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (VarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (VarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (VarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . VarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
}

\rulerCmdDef{rules3.P.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.P.expr.base.e.int}{%
\rulerRule{e.int}{P}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (int) | 
}
}

\rulerCmdDef{rules3.P.expr.base.e.char}{%
\rulerRule{e.char}{P}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (char) | 
}
}

\rulerCmdDef{rules3.P.expr.base.e.str}{%
\rulerRule{e.str}{P}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (str) | 
}
}

\rulerCmdDef{rules3.P.expr.base.e.iint}{%
\rulerRule{e.iint}{P}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (integer) | 
}
}

\rulerCmdDef{rules3.P.expr.base.e.var}{%
\rulerRule{e.var}{P}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (ident) | 
}
}

\rulerCmdDef{rules3.P.expr.base.e.con}{%
\rulerRule{e.con}{P}
{%
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (identc) | 
}
}

\rulerCmdDef{rules3.P.expr.base.e.app}{%
\rulerRule{e.app}{P}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.P.expr.base.e.app.f}{%
\rulerRule{e.app.f}{P}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.P.expr.base.e.apptop}{%
\rulerRule{e.apptop}{P}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ |  <=  | } |  pvar => tvarv  <=  VarMp | ^{ | k | } |  sigma | _{ | e | }^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | e | } |  ~> VarMp | _{ | E | } |  ; Coe | _{ | lam | } |  | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | E | } |  VarMp | ^{ | k | } |  ; sigma | _{ | e | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  -> sigma ~> VarMp | _{ | e | } |  ;  \  | \overline{ | Transl | _{ | i | }} |  -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.P.expr.base.e.lam}{%
\rulerRule{e.lam}{P}
{%
| tvarv1 , tvarv2 , pvar | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  pvar => tvarv1 -> tvarv2 <= sigma | ^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | p | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | F | } |  ; Coe | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ;  []  ++ Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  => VarMp | _{ | e | } |  sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ;  | \overline{ | Transl | _{ | i | }} |  ->  \ p -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.P.expr.base.e.let}{%
\rulerRule{e.let}{P}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | }^{ | nexists | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  ;  | \overline{ | Transl | _{ | d | }} |  | 
\\
| Gamma | _{ | t | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | t | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| Gamma | _{ | q | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | q | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| fiopt ; Gamma | _{ | q | }^{ | nexists | } |  + Gamma | _{ | g | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  ; let  | \overline{ | Transl | _{ | d | }} |  ^^ in Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.P.expr.base.e.ann}{%
\rulerRule{e.ann}{P}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (VarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (VarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (VarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . VarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
}

\rulerCmdDef{rules3.TS.expr.base.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.TS.expr.base.e.int}{%
\rulerRule{e.int}{TS}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Int <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  int : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (int) | 
}
}

\rulerCmdDef{rules3.TS.expr.base.e.char}{%
\rulerRule{e.char}{TS}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  Char <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  char : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (char) | 
}
}

\rulerCmdDef{rules3.TS.expr.base.e.str}{%
\rulerRule{e.str}{TS}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyString <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  str : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (str) | 
}
}

\rulerCmdDef{rules3.TS.expr.base.e.iint}{%
\rulerRule{e.iint}{TS}
{%
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  tyInteger <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  integer : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (integer) | 
}
}

\rulerCmdDef{rules3.TS.expr.base.e.var}{%
\rulerRule{e.var}{TS}
{%
| ident :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  ident : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (ident) | 
}
}

\rulerCmdDef{rules3.TS.expr.base.e.con}{%
\rulerRule{e.con}{TS}
{%
| identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= sigma | ^{ | k | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  identc : sigma ~> VarMp VarMp | ^{ | k | } |  ; Coe Transl (identc) | 
}
}

\rulerCmdDef{rules3.TS.expr.base.e.app}{%
\rulerRule{e.app}{TS}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.TS.expr.base.e.app.f}{%
\rulerRule{e.app.f}{TS}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; pvar => tvarv -> sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : _ => sigma | _{ | a | } |  -> sigma ~> VarMp | _{ | f | } |  ; Transl | _{ | f | } |  | 
\\
| instLFIOpts ; Gamma ; VarMp | _{ | f | } |  ; tvarv :- | ^{ | e | } |  e | _{ | 2 | } |  : _ ~> VarMp | _{ | a | } |  ; Transl | _{ | a | } |  | 
\\
| Gamma :- | ^{ | pi | } |  VarMp | _{ | a | } |  pvar ~>  | \overline{ | Transl | _{ | a | }} |  : _ | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^ e | _{ | 2 | } |  : sigma | ^{ | k | } |  ~> VarMp | _{ | a | } |  ;  \ Transl | _{ | f | } |  ^^  | \overline{ | Transl | _{ | a | }} |  ^^ Transl | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.TS.expr.base.e.apptop}{%
\rulerRule{e.apptop}{TS}
{%
| tvarv , pvar | \;\mbox{fresh} |  | 
\\
| sigma | _{ | e | }^{ | k | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | e | }^{ | k | } |  =/= ANY | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ |  <=  | } |  pvar => tvarv  <=  VarMp | ^{ | k | } |  sigma | _{ | e | }^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | e | } |  ~> VarMp | _{ | E | } |  ; Coe | _{ | lam | } |  | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | E | } |  VarMp | ^{ | k | } |  ; sigma | _{ | e | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  ^^  | \overline{ | e | _{ | 2 | } |  | } |  : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  -> sigma ~> VarMp | _{ | e | } |  ;  \  | \overline{ | Transl | _{ | i | }} |  -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.TS.expr.base.e.lam}{%
\rulerRule{e.lam}{TS}
{%
| tvarv1 , tvarv2 , pvar | \;\mbox{fresh} |  | 
\\
| fioBindRFirstY , fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  pvar => tvarv1 -> tvarv2 <= sigma | ^{ | k | } |  :  | \overline{ | pi | _{ | a | }} |  => sigma | _{ | p | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | F | } |  ; Coe | 
\\
| Gamma | _{ | i | } |  === inst | _{ | pi | } |  ( | \overline{ | pi | _{ | a | }} | ) | 
\\
|  [ _ :~>  | \overline{ | Transl | _{ | i | }} |  ]  === Gamma | _{ | i | } |  | 
\\
| fiopt ;  []  ++ Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; tvarv1 :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
\\
| fiopt ; Gamma | _{ | i | } |  , Gamma ; VarMp | _{ | p | } |  ; tvarv2 :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |   \ p -> e : VarMp | _{ | e | } |   | \overline{ | pi | _{ | a | }} |  => VarMp | _{ | e | } |  sigma | _{ | p | } |  -> sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ;  | \overline{ | Transl | _{ | i | }} |  ->  \ p -> Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.TS.expr.base.e.let}{%
\rulerRule{e.let}{TS}
{%
| Gamma | _{ | t | } |  ; Gamma | _{ | t | }^{ | nexists | } |  ++ Gamma ; Gamma | _{ | p | } |  ; VarMp | ^{ | k | } |  ; VarMp | _{ | p | } |  :- | ^{ | d | } |  d : Gamma | _{ | t | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; VarMp | _{ | d | } |  ;  | \overline{ | Transl | _{ | d | }} |  | 
\\
| Gamma | _{ | t | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | t | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| Gamma | _{ | l | } |  ++ Gamma | _{ | g | } |  === Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | q | } |  ===  [ i :-> forall  | \overline{ | alpha | } |  . sigma || (i :-> sigma) <- VarMp | _{ | d | } |  Gamma | _{ | l | } |  ,  | \overline{ | alpha | } |  === ftv (sigma) - ftv (VarMp | _{ | d | } |  Gamma | _{ | g | } | ) ]  | 
\\
| Gamma | _{ | q | }^{ | nexists | } |  ===  [ i :-> VarMp sigma || (i :-> exists ^  | \overline{ | tvarv | } |  . sigma) <- Gamma | _{ | q | } |  , VarMp ===  | \overline{ | tvarv :-> tvarf | } |  , tvarf | \;\mbox{fresh} |  ]  | 
\\
| fiopt ; Gamma | _{ | q | }^{ | nexists | } |  + Gamma | _{ | g | } |  ; VarMp | _{ | d | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  b : sigma ~> VarMp | _{ | e | } |  ; Transl | _{ | e | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  let d in b : sigma ~> VarMp | _{ | e | } |  ; let  | \overline{ | Transl | _{ | d | }} |  ^^ in Transl | _{ | e | } |  | 
}
}

\rulerCmdDef{rules3.TS.expr.base.e.ann}{%
\rulerRule{e.ann}{TS}
{%
|  | \overline{ | tvarv | _{ | TGamma | }} |  === ftv (VarMp | ^{ | k | } |  TGamma) | 
\\
| TGamma :- | ^{ | t | } |  t : sigma | _{ | a | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
|  | \overline{ | tvarv | _{ | Gamma | }} |  === ftv (VarMp | ^{ | k | } |  Gamma) | 
\\
| sigma | _{ | q | } |  === forall ^ (ftv (VarMp | ^{ | k | } |  sigma | _{ | a | } | ) \\ (tySVar  | \overline{ | tvarv | _{ | t | }} |  +  | \overline{ | tvarv | _{ | Gamma | }} |  +  | \overline{ | tvarv | _{ | TGamma | }} | )) . VarMp | ^{ | k | } |  sigma | _{ | a | } |  | 
\\
| fiopt ; VarMp | ^{ | k | } |  :- | ^{ | <= | } |  sigma | _{ | q | } |  <= sigma | ^{ | k | } |  : _ ~> VarMp | _{ | F | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | F | } |  VarMp | ^{ | k | } |  ; sigma | _{ | q | } |  :- | ^{ | e | } |  e : sigma | _{ | e | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
{%
| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  (e :: t) : VarMp | _{ | e | } |  sigma | _{ | q | } |  ~> VarMp | _{ | e | } |  ; Transl | 
}
}

\rulerCmdDef{rules3.ANN.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.expr.base.scheme}}{Expression type rules}{rules3.ANN.expr.base}{ANN}
\rulerCmdUse{rules3.ANN.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.expr.base.scheme}}{Expression type rules}{rules3.C.expr.base}{C}
\rulerCmdUse{rules3.C.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.expr.base.scheme}}{Expression type rules}{rules3.CG.expr.base}{CG}
\rulerCmdUse{rules3.CG.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.expr.base.scheme}}{Expression type rules}{rules3.DT.expr.base}{DT}
\rulerCmdUse{rules3.DT.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.expr.base.scheme}}{Expression type rules}{rules3.E.expr.base}{E}
\rulerCmdUse{rules3.E.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.expr.base.scheme}}{Expression type rules}{rules3.EP.expr.base}{EP}
\rulerCmdUse{rules3.EP.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.iapp}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.ilam}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.expr.base.scheme}}{Expression type rules}{rules3.EX.expr.base}{EX}
\rulerCmdUse{rules3.EX.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.expr.base.scheme}}{Expression type rules}{rules3.HM.expr.base}{HM}
\rulerCmdUse{rules3.HM.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.expr.base.scheme}}{Expression type rules}{rules3.HS.expr.base}{HS}
\rulerCmdUse{rules3.HS.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.iapp}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.ilam}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.expr.base.scheme}}{Expression type rules}{rules3.I1.expr.base}{I1}
\rulerCmdUse{rules3.I1.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I2.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.expr.base.scheme}}{Expression type rules}{rules3.I2.expr.base}{I2}
\rulerCmdUse{rules3.I2.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.expr.base.scheme}}{Expression type rules}{rules3.K.expr.base}{K}
\rulerCmdUse{rules3.K.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.expr.base.scheme}}{Expression type rules}{rules3.MD.expr.base}{MD}
\rulerCmdUse{rules3.MD.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.iapp}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.ilam}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.expr.base.scheme}}{Expression type rules}{rules3.NUM.expr.base}{NUM}
\rulerCmdUse{rules3.NUM.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.iapp}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.ilam}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.expr.base.scheme}}{Expression type rules}{rules3.P.expr.base}{P}
\rulerCmdUse{rules3.P.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.base.e.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.expr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.expr.base.scheme}}{Expression type rules}{rules3.TS.expr.base}{TS}
\rulerCmdUse{rules3.TS.expr.base.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.base.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.base.e.str}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.base.e.iint}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.base.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.base.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.base.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.base.e.app.f}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.base.e.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.base.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.base.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.base.e.ann}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.E.expr.onlyE.scheme}{%
\ensuremath{| Gamma :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.E.expr.onlyE.e.prod}{%
\rulerRule{e.prod}{E}
{%
| Gamma :- | ^{ | e | } |  e | _{ | 2 | } |  : sigma | _{ | 2 | } |  | 
\\
| Gamma :- | ^{ | e | } |  e | _{ | 1 | } |  : sigma | _{ | 1 | } |  | 
}
{%
| Gamma :- | ^{ | e | } |  (e | _{ | 1 | } |  , e | _{ | 2 | } | ) : (sigma | _{ | 1 | } |  , sigma | _{ | 2 | } | ) | 
}
}

\rulerCmdDef{rules3.E.expr.onlyE.e.pred}{%
\rulerRule{e.pred}{E}
{%
| Gamma :- | ^{ | e | } |  e : pi -> sigma | 
\\
| Gamma :- | ^{ | pi | } |  pi | 
}
{%
| Gamma :- | ^{ | e | } |  e : sigma | 
}
}

\rulerCmdDef{rules3.K.expr.onlyE.scheme}{%
\ensuremath{| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.K.expr.onlyE.e.prod}{%
\rulerRule{e.prod}{K}
{%
| Gamma ; sigma | _{ | 2 | }^{ | k | } |  :- | ^{ | e | } |  e | _{ | 2 | } |  : sigma | _{ | 2 | } |  | 
\\
| Gamma ; sigma | _{ | 1 | }^{ | k | } |  :- | ^{ | e | } |  e | _{ | 1 | } |  : sigma | _{ | 1 | } |  | 
}
{%
| Gamma ; (sigma | _{ | 1 | }^{ | k | } |  , sigma | _{ | 2 | }^{ | k | } | ) :- | ^{ | e | } |  (e | _{ | 1 | } |  , e | _{ | 2 | } | ) : (sigma | _{ | 1 | } |  , sigma | _{ | 2 | } | ) | 
}
}

\rulerCmdDef{rules3.K.expr.onlyE.e.pred}{%
\rulerRule{e.pred}{K}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : pi -> sigma | 
\\
| Gamma :- | ^{ | pi | } |  pi | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | 
}
}

\rulerCmdDef{rules3.E.expr.onlyE}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.expr.onlyE.scheme}}{Expression type rules}{rules3.E.expr.onlyE}{E}
\rulerCmdUse{rules3.E.expr.onlyE.e.prod}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.onlyE.e.pred}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.expr.onlyE}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.expr.onlyE.scheme}}{Expression type rules}{rules3.K.expr.onlyE}{K}
\rulerCmdUse{rules3.K.expr.onlyE.e.prod}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.onlyE.e.pred}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.ANN.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.all.m.any.l}{%
\rulerRule{m.any.l}{ANN}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.any.r}{%
\rulerRule{m.any.r}{ANN}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.con}{%
\rulerRule{m.con}{ANN}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.var}{%
\rulerRule{m.var}{ANN}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{ANN}
{%
| fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{ANN}
{%
| fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{ANN}
{%
| fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{ANN}
{%
| fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{ANN}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{ANN}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.forall.r2}{%
\rulerRule{m.forall.r2}{ANN}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{ANN}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{ANN}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.exists.r2}{%
\rulerRule{m.exists.r2}{ANN}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === inst | _{ | exists | } |  (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.arrow}{%
\rulerRule{m.arrow}{ANN}
{%
| fioLeaveRInstN , fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.ANN.match.all.m.prod}{%
\rulerRule{m.prod}{ANN}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  | 
}
}

\rulerCmdDef{rules3.C.match.all.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.all.m.any.l}{%
\rulerRule{m.any.l}{C}
{%
}
{%
| gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.C.match.all.m.any.r}{%
\rulerRule{m.any.r}{C}
{%
}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.C.match.all.m.con}{%
\rulerRule{m.con}{C}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.C.match.all.m.var}{%
\rulerRule{m.var}{C}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.C.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{C}
{%
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.C.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{C}
{%
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.C.match.all.m.arrow}{%
\rulerRule{m.arrow}{C}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  | 
\\
| gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.C.match.all.m.prod}{%
\rulerRule{m.prod}{C}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  | 
\\
| gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  | 
}
}

\rulerCmdDef{rules3.CG.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.CG.match.all.m.any.l}{%
\rulerRule{m.any.l}{CG}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.any.r}{%
\rulerRule{m.any.r}{CG}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.con}{%
\rulerRule{m.con}{CG}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.var}{%
\rulerRule{m.var}{CG}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{CG}
{%
| fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{CG}
{%
| fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{CG}
{%
| fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{CG}
{%
| fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{CG}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{CG}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.forall.r2}{%
\rulerRule{m.forall.r2}{CG}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{CG}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{CG}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.exists.r2}{%
\rulerRule{m.exists.r2}{CG}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === inst | _{ | exists | } |  (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.arrow}{%
\rulerRule{m.arrow}{CG}
{%
| fioLeaveRInstN , fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.CG.match.all.m.prod}{%
\rulerRule{m.prod}{CG}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  | 
}
}

\rulerCmdDef{rules3.DT.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.all.m.any.l}{%
\rulerRule{m.any.l}{DT}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.any.r}{%
\rulerRule{m.any.r}{DT}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.con}{%
\rulerRule{m.con}{DT}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.var}{%
\rulerRule{m.var}{DT}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{DT}
{%
| fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{DT}
{%
| fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{DT}
{%
| fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{DT}
{%
| fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{DT}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{DT}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.forall.r2}{%
\rulerRule{m.forall.r2}{DT}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{DT}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{DT}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.exists.r2}{%
\rulerRule{m.exists.r2}{DT}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === inst | _{ | exists | } |  (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.arrow}{%
\rulerRule{m.arrow}{DT}
{%
| fioLeaveRInstN , fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.DT.match.all.m.prod}{%
\rulerRule{m.prod}{DT}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  | 
}
}

\rulerCmdDef{rules3.EP.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.all.m.any.l}{%
\rulerRule{m.any.l}{EP}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.any.r}{%
\rulerRule{m.any.r}{EP}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.con}{%
\rulerRule{m.con}{EP}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.var}{%
\rulerRule{m.var}{EP}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{EP}
{%
| fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{EP}
{%
| fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{EP}
{%
| fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{EP}
{%
| fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{EP}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{EP}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.forall.r2}{%
\rulerRule{m.forall.r2}{EP}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{EP}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{EP}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.exists.r2}{%
\rulerRule{m.exists.r2}{EP}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === inst | _{ | exists | } |  (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.arrow}{%
\rulerRule{m.arrow}{EP}
{%
| fioLeaveRInstN , fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.EP.match.all.m.prod}{%
\rulerRule{m.prod}{EP}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.EX.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.all.m.any.l}{%
\rulerRule{m.any.l}{EX}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.any.r}{%
\rulerRule{m.any.r}{EX}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.con}{%
\rulerRule{m.con}{EX}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.var}{%
\rulerRule{m.var}{EX}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{EX}
{%
| fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{EX}
{%
| fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{EX}
{%
| fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{EX}
{%
| fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{EX}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{EX}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{EX}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{EX}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.arrow}{%
\rulerRule{m.arrow}{EX}
{%
| fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.EX.match.all.m.prod}{%
\rulerRule{m.prod}{EX}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  | 
}
}

\rulerCmdDef{rules3.HM.match.all.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.match.all.m.any.l}{%
\rulerRule{m.any.l}{HM}
{%
}
{%
| gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.HM.match.all.m.any.r}{%
\rulerRule{m.any.r}{HM}
{%
}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.HM.match.all.m.con}{%
\rulerRule{m.con}{HM}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.HM.match.all.m.var}{%
\rulerRule{m.var}{HM}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.HM.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{HM}
{%
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.HM.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{HM}
{%
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.HM.match.all.m.arrow}{%
\rulerRule{m.arrow}{HM}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  | 
\\
| gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.HM.match.all.m.prod}{%
\rulerRule{m.prod}{HM}
{%
| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  | 
\\
| gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  | 
}
}

\rulerCmdDef{rules3.HS.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.HS.match.all.m.any.l}{%
\rulerRule{m.any.l}{HS}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.any.r}{%
\rulerRule{m.any.r}{HS}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.con}{%
\rulerRule{m.con}{HS}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.var}{%
\rulerRule{m.var}{HS}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{HS}
{%
| fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{HS}
{%
| fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{HS}
{%
| fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{HS}
{%
| fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{HS}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{HS}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.forall.r2}{%
\rulerRule{m.forall.r2}{HS}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{HS}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{HS}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.exists.r2}{%
\rulerRule{m.exists.r2}{HS}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === inst | _{ | exists | } |  (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.arrow}{%
\rulerRule{m.arrow}{HS}
{%
| fioLeaveRInstN , fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.HS.match.all.m.prod}{%
\rulerRule{m.prod}{HS}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.I1.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.all.m.any.l}{%
\rulerRule{m.any.l}{I1}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.any.r}{%
\rulerRule{m.any.r}{I1}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.con}{%
\rulerRule{m.con}{I1}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.var}{%
\rulerRule{m.var}{I1}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{I1}
{%
| fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{I1}
{%
| fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{I1}
{%
| fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{I1}
{%
| fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{I1}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{I1}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{I1}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{I1}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.arrow}{%
\rulerRule{m.arrow}{I1}
{%
| fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.I1.match.all.m.prod}{%
\rulerRule{m.prod}{I1}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  | 
}
}

\rulerCmdDef{rules3.I2.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.all.m.any.l}{%
\rulerRule{m.any.l}{I2}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.any.r}{%
\rulerRule{m.any.r}{I2}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.con}{%
\rulerRule{m.con}{I2}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.var}{%
\rulerRule{m.var}{I2}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{I2}
{%
| fioBindToTyAltsN , fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{I2}
{%
| fioBindToTyAltsN , fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.var.l3}{%
\rulerRule{m.var.l3}{I2}
{%
| fioBindToTyAltsY , fioBindLFirstY `elem` fiopt | 
\\
| sigma | _{ | 2 | } |  =/= _ [ _ ]  | 
\\
| sigma === tvarv | _{ | 1 | } |  [ sigma | _{ | 2 | } |  :: thardS / tneedR ]  | 
\\
| VarMp ===  [ tvarv | _{ | 1 | } |  :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv | _{ | 1 | } |   <=>  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.var.l4}{%
\rulerRule{m.var.l4}{I2}
{%
| fioBindToTyAltsY , fioBindLFirstN `elem` fiopt | 
\\
| sigma | _{ | 2 | } |  =/= _ [ _ ]  | 
\\
| sigma === tvarv | _{ | 1 | } |  [ sigma | _{ | 2 | } |  :: thardS / tneedR ]  | 
\\
| VarMp ===  [ tvarv | _{ | 1 | } |  :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv | _{ | 1 | } |   <=>  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{I2}
{%
| fioBindToTyAltsN , fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{I2}
{%
| fioBindToTyAltsN , fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.var.r3}{%
\rulerRule{m.var.r3}{I2}
{%
| fioBindToTyAltsY , fioBindRFirstY `elem` fiopt | 
\\
| sigma | _{ | 1 | } |  =/= _ [ _ ]  | 
\\
| sigma === tvarv | _{ | 2 | } |  [ sigma | _{ | 1 | } |  :: thardS / tneedO ]  | 
\\
| VarMp ===  [ tvarv | _{ | 2 | } |  :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | } |   <=>  tvarv | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.var.r4}{%
\rulerRule{m.var.r4}{I2}
{%
| fioBindToTyAltsY , fioBindRFirstN `elem` fiopt | 
\\
| sigma | _{ | 1 | } |  =/= _ [ _ ]  | 
\\
| sigma === tvarv | _{ | 2 | } |  [ sigma | _{ | 1 | } |  :: thardS / tneedO ]  | 
\\
| VarMp ===  [ tvarv | _{ | 2 | } |  :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | } |   <=>  tvarv | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{I2}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{I2}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{I2}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{I2}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.arrow}{%
\rulerRule{m.arrow}{I2}
{%
| fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.prod}{%
\rulerRule{m.prod}{I2}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.alt}{%
\rulerRule{m.alt}{I2}
{%
| sigma === tvarv | _{ | 2 | } |  [  | \overline{ | talt | _{ | 1 | }} |  ,  | \overline{ | talt | _{ | 2 | }} |  ]  | 
\\
| VarMp ===  [ tvarv | _{ | 1 | } |  :-> sigma , tvarv | _{ | 2 | } |  :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  tvarv | _{ | 1 | } |  [  | \overline{ | talt | _{ | 1 | }} |  ]   <=  tvarv | _{ | 2 | } |  [  | \overline{ | talt | _{ | 2 | }} |  ]  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.alt.l1}{%
\rulerRule{m.alt.l1}{I2}
{%
| sigma === tvarv | _{ | 1 | } |  [ sigma | _{ | 2 | } |  :: thardS / tneedR ,  | \overline{ | talt | _{ | 1 | }} |  ]  | 
\\
| VarMp ===  [ tvarv | _{ | 1 | } |  :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  tvarv | _{ | 1 | } |  [  | \overline{ | talt | _{ | 1 | }} |  ]   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.alt.r1}{%
\rulerRule{m.alt.r1}{I2}
{%
| sigma === tvarv | _{ | 2 | } |  [ sigma | _{ | 1 | } |  :: thardS / tneedO ,  | \overline{ | talt | _{ | 2 | }} |  ]  | 
\\
| VarMp ===  [ tvarv | _{ | 2 | } |  :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  tvarv | _{ | 2 | } |  [  | \overline{ | talt | _{ | 2 | }} |  ]  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.forall.l2}{%
\rulerRule{m.forall.l2}{I2}
{%
|  | \overline{ | tvarv | _{ | /=/ | }} |   | \stackrel{ | /=/ elim | }{ | :- | } |  sigma | _{ | m | } |  : sigma ~> _ ; VarMp | _{ | e | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <+>  | } |  sigma | _{ | i | } |   <+>  sigma | _{ | 2 | } |  : sigma | _{ | m | } |  ~> VarMp | _{ | m | } |  | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> (tvarv | _{ | /=/ | } |  /=/ ANY) | } |  ,  ^^  | \overline{ | tvarv | _{ | /=/ | }} |  | \;\mbox{fresh} |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <+>  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <+>  sigma | _{ | 2 | } |  : forall ^  | \overline{ | tvarv | _{ | /=/ | }} |  . sigma ~> VarMp | _{ | e | } |  VarMp | _{ | m | } |  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.exists.l2}{%
\rulerRule{m.exists.l2}{I2}
{%
|  | \overline{ | tvarv | _{ | /=/ | }} |   | \stackrel{ | /=/ elim | }{ | :- | } |  sigma | _{ | m | } |  : sigma ~> _ ; VarMp | _{ | e | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <+>  | } |  sigma | _{ | i | } |   <+>  sigma | _{ | 2 | } |  : sigma | _{ | m | } |  ~> VarMp | _{ | m | } |  | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> (tvarv | _{ | /=/ | } |  /=/ ANY) | } |  ,  ^^  | \overline{ | tvarv | _{ | /=/ | }} |  | \;\mbox{fresh} |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <+>  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <+>  sigma | _{ | 2 | } |  : exists ^  | \overline{ | tvarv | _{ | /=/ | }} |  . VarMp | _{ | e | } |  sigma ~> VarMp | _{ | e | } |  VarMp | _{ | m | } |  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.forall.l3}{%
\rulerRule{m.forall.l3}{I2}
{%
|  | \overline{ | tvarv | _{ | /=/ | }} |   | \stackrel{ | /=/ elim | }{ | :- | } |  sigma | _{ | m | } |  : sigma ~> _ ; VarMp | _{ | e | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <->  | } |  sigma | _{ | i | } |   <->  sigma | _{ | 2 | } |  : sigma | _{ | m | } |  ~> VarMp | _{ | m | } |  | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> (tvarv | _{ | /=/ | } |  /=/ ANY) | } |  ,  ^^  | \overline{ | tvarv | _{ | /=/ | }} |  | \;\mbox{fresh} |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <->  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <->  sigma | _{ | 2 | } |  : forall ^  | \overline{ | tvarv | _{ | /=/ | }} |  . VarMp | _{ | e | } |  sigma ~> VarMp | _{ | e | } |  VarMp | _{ | m | } |  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.exists.l3}{%
\rulerRule{m.exists.l3}{I2}
{%
|  | \overline{ | tvarv | _{ | /=/ | }} |   | \stackrel{ | /=/ elim | }{ | :- | } |  sigma | _{ | m | } |  : sigma ~> _ ; VarMp | _{ | e | } |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <->  | } |  sigma | _{ | i | } |   <->  sigma | _{ | 2 | } |  : sigma | _{ | m | } |  ~> VarMp | _{ | m | } |  | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> (tvarv | _{ | /=/ | } |  /=/ ANY) | } |  ,  ^^  | \overline{ | tvarv | _{ | /=/ | }} |  | \;\mbox{fresh} |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <->  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <->  sigma | _{ | 2 | } |  : exists ^  | \overline{ | tvarv | _{ | /=/ | }} |  . sigma ~> VarMp | _{ | e | } |  VarMp | _{ | m | } |  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.both}{%
\rulerRule{m.both}{I2}
{%
| fiopt ; gVarMp :- | ^{ |  <+->  | } |  sigma | _{ | 1 | } |   <+->  sigma | _{ | 2 | } |  : sigma ~> VarMp | _{ | m | } |  | 
\\
| VarMp ===  [ tvarv | _{ | 1 | } |  , tvarv | _{ | 2 | } |  :-> tvarv | _{ | 2 | } |  /=/ sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <+->  | } |  tvarv | _{ | 1 | } |  /=/ sigma | _{ | 1 | } |   <+->  tvarv | _{ | 2 | } |  /=/ sigma | _{ | 2 | } |  : tvarv | _{ | 2 | } |  /=/ sigma ~> VarMp VarMp | _{ | m | } |  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.both.l1}{%
\rulerRule{m.both.l1}{I2}
{%
| VarMp ===  [ tvarv :-> tvarv /=/ sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <+->  | } |  tvarv /=/ ANY  <+->  sigma : tvarv /=/ sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.both.l2}{%
\rulerRule{m.both.l2}{I2}
{%
| fiopt ; gVarMp :- | ^{ |  <+->  | } |  sigma | _{ | 1 | } |   <+->  sigma | _{ | 2 | } |  : sigma ~> VarMp | _{ | m | } |  | 
\\
| VarMp ===  [ tvarv :-> tvarv /=/ sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <+->  | } |  tvarv /=/ sigma | _{ | 1 | } |   <+->  sigma | _{ | 2 | } |  : tvarv /=/ sigma ~> VarMp VarMp | _{ | m | } |  | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.alt.l2}{%
\rulerRule{m.alt.l2}{I2}
{%
| sigma === tvarv | _{ | 1 | } |  [ sigma | _{ | 2 | } |  :: thardH / tneedR ,  | \overline{ | talt | _{ | 1 | }} |  ]  | 
\\
| VarMp ===  [ tvarv | _{ | 1 | } |  :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <+>  | } |  tvarv | _{ | 1 | } |  [  | \overline{ | talt | _{ | 1 | }} |  ]   <+>  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.I2.match.all.m.alt.l3}{%
\rulerRule{m.alt.l3}{I2}
{%
| sigma === tvarv | _{ | 1 | } |  [ sigma | _{ | 2 | } |  :: thardH / tneedO ,  | \overline{ | talt | _{ | 1 | }} |  ]  | 
\\
| VarMp ===  [ tvarv | _{ | 1 | } |  :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <->  | } |  tvarv | _{ | 1 | } |  [  | \overline{ | talt | _{ | 1 | }} |  ]   <->  sigma | _{ | 2 | } |  : sigma ~> VarMp | 
}
}

\rulerCmdDef{rules3.K.match.all.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.K.match.all.m.any.l}{%
\rulerRule{m.any.l}{K}
{%
}
{%
|  :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma | 
}
}

\rulerCmdDef{rules3.K.match.all.m.any.r}{%
\rulerRule{m.any.r}{K}
{%
}
{%
|  :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma | 
}
}

\rulerCmdDef{rules3.K.match.all.m.con}{%
\rulerRule{m.con}{K}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
|  :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  | 
}
}

\rulerCmdDef{rules3.K.match.all.m.arrow}{%
\rulerRule{m.arrow}{K}
{%
|  :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  | 
\\
|  :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  | 
}
{%
|  :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
}
}

\rulerCmdDef{rules3.K.match.all.m.prod}{%
\rulerRule{m.prod}{K}
{%
|  :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  | 
\\
|  :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  | 
}
{%
|  :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (sigma | _{ | l | } |  , sigma | _{ | r | } | ) | 
}
}

\rulerCmdDef{rules3.MD.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.all.m.any.l}{%
\rulerRule{m.any.l}{MD}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.any.r}{%
\rulerRule{m.any.r}{MD}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.con}{%
\rulerRule{m.con}{MD}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.var}{%
\rulerRule{m.var}{MD}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{MD}
{%
| fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{MD}
{%
| fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{MD}
{%
| fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{MD}
{%
| fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{MD}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{MD}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.forall.r2}{%
\rulerRule{m.forall.r2}{MD}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{MD}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{MD}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.exists.r2}{%
\rulerRule{m.exists.r2}{MD}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === inst | _{ | exists | } |  (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.arrow}{%
\rulerRule{m.arrow}{MD}
{%
| fioLeaveRInstN , fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.MD.match.all.m.prod}{%
\rulerRule{m.prod}{MD}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.NUM.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.all.m.any.l}{%
\rulerRule{m.any.l}{NUM}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.any.r}{%
\rulerRule{m.any.r}{NUM}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.con}{%
\rulerRule{m.con}{NUM}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.var}{%
\rulerRule{m.var}{NUM}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{NUM}
{%
| fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{NUM}
{%
| fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{NUM}
{%
| fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{NUM}
{%
| fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{NUM}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{NUM}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.forall.r2}{%
\rulerRule{m.forall.r2}{NUM}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{NUM}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{NUM}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.exists.r2}{%
\rulerRule{m.exists.r2}{NUM}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === inst | _{ | exists | } |  (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.arrow}{%
\rulerRule{m.arrow}{NUM}
{%
| fioLeaveRInstN , fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.NUM.match.all.m.prod}{%
\rulerRule{m.prod}{NUM}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.P.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.all.m.any.l}{%
\rulerRule{m.any.l}{P}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.P.match.all.m.any.r}{%
\rulerRule{m.any.r}{P}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.P.match.all.m.con}{%
\rulerRule{m.con}{P}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.P.match.all.m.var}{%
\rulerRule{m.var}{P}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.P.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{P}
{%
| fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.P.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{P}
{%
| fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.P.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{P}
{%
| fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.P.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{P}
{%
| fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.P.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{P}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.P.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{P}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.P.match.all.m.forall.r2}{%
\rulerRule{m.forall.r2}{P}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.P.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{P}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.P.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{P}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.P.match.all.m.exists.r2}{%
\rulerRule{m.exists.r2}{P}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === inst | _{ | exists | } |  (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.P.match.all.m.arrow}{%
\rulerRule{m.arrow}{P}
{%
| fioLeaveRInstN , fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.P.match.all.m.prod}{%
\rulerRule{m.prod}{P}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.TS.match.all.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.all.m.any.l}{%
\rulerRule{m.any.l}{TS}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  ANY  <=>  sigma : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.any.r}{%
\rulerRule{m.any.r}{TS}
{%
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  ANY : sigma ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.con}{%
\rulerRule{m.con}{TS}
{%
| identc | _{ | 1 | } |  === identc | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  identc | _{ | 1 | } |   <=>  identc | _{ | 2 | } |  : identc | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.var}{%
\rulerRule{m.var}{TS}
{%
| tvar | _{ | 1 | } |  === tvar | _{ | 2 | } |  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvar | _{ | 1 | } |   <=>  tvar | _{ | 2 | } |  : tvar | _{ | 2 | } |  ~>  []  ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.var.l1}{%
\rulerRule{m.var.l1}{TS}
{%
| fioBindLFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.var.l2}{%
\rulerRule{m.var.l2}{TS}
{%
| fioBindLFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  tvarv  <=>  sigma : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.var.r1}{%
\rulerRule{m.var.r1}{TS}
{%
| fioBindRFirstY `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.var.r2}{%
\rulerRule{m.var.r2}{TS}
{%
| fioBindRFirstN `elem` fiopt | 
\\
| VarMp ===  [ tvarv :-> sigma ]  | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma  <=>  tvarv : sigma ~> VarMp ; acoreCoeId | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.forall.l}{%
\rulerRule{m.forall.l}{TS}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.forall.r}{%
\rulerRule{m.forall.r}{TS}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarf | } |  ,  ^^  | \overline{ | tvarf | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.forall.r2}{%
\rulerRule{m.forall.r2}{TS}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  forall ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.exists.l}{%
\rulerRule{m.exists.l}{TS}
{%
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 1 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tcon | } |  ,  ^^  | \overline{ | tcon | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | i | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 1 | } |   <=  sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.exists.r}{%
\rulerRule{m.exists.r}{TS}
{%
| fioLeaveRInstN `elem` fiopt | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | alpha | } |  sigma | _{ | 2 | } |  ,  ^^ VarMp | _{ | alpha | } |  ===  | \overline{ | alpha :-> tvarv | } |  ,  ^^  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| VarMp === VarMp | _{ | f | } |  \\ | _{ |  | \overline{ | tvarv | } |  | }^{ | dom | } |   | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : VarMp (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.exists.r2}{%
\rulerRule{m.exists.r2}{TS}
{%
| fioLeaveRInstY `elem` fiopt | 
\\
| sigma | _{ | i | } |  === inst | _{ | exists | } |  (exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } | ) | 
\\
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  sigma | _{ | i | } |  : sigma ~> VarMp ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=  | } |  sigma | _{ | 1 | } |   <=  exists ^  | \overline{ | alpha | } |  . sigma | _{ | 2 | } |  : sigma ~> VarMp ; Coe | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.arrow}{%
\rulerRule{m.arrow}{TS}
{%
| fioLeaveRInstN , fioBindRFirstY , fioBindLFirstY , fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 2 | }^{ | a | } |   <=>  sigma | _{ | 1 | }^{ | a | } |  : sigma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | a | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | a | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | a | } |  -> sigma | _{ | 1 | }^{ | r | } |   <=>  sigma | _{ | 2 | }^{ | a | } |  -> sigma | _{ | 2 | }^{ | r | } |  : VarMp | _{ | r | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  VarMp | _{ | a | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.TS.match.all.m.prod}{%
\rulerRule{m.prod}{TS}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | 1 | }^{ | l | } |   <=>  sigma | _{ | 2 | }^{ | l | } |  : sigma | _{ | l | } |  ~> VarMp | _{ | l | } |  ; Coe | 
\\
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  VarMp | _{ | l | } |  sigma | _{ | 1 | }^{ | r | } |   <=>  VarMp | _{ | l | } |  sigma | _{ | 2 | }^{ | r | } |  : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; gVarMp :- | ^{ |  <=>  | } |  (sigma | _{ | 1 | }^{ | l | } |  , sigma | _{ | 1 | }^{ | r | } | )  <=>  (sigma | _{ | 2 | }^{ | l | } |  , sigma | _{ | 2 | }^{ | r | } | ) : (VarMp | _{ | r | } |  sigma | _{ | l | } |  , sigma | _{ | r | } | ) ~> VarMp | _{ | r | } |  VarMp | _{ | l | } |  ; Coe | 
}
}

\rulerCmdDef{rules3.ANN.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.all.scheme}}{Type matching rules}{rules3.ANN.match.all}{ANN}
\rulerCmdUse{rules3.ANN.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.exists.r2}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.all.scheme}}{Type matching rules}{rules3.C.match.all}{C}
\rulerCmdUse{rules3.C.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.all.scheme}}{Type matching rules}{rules3.CG.match.all}{CG}
\rulerCmdUse{rules3.CG.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.exists.r2}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.all.scheme}}{Type matching rules}{rules3.DT.match.all}{DT}
\rulerCmdUse{rules3.DT.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.exists.r2}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.all.scheme}}{Type matching rules}{rules3.EP.match.all}{EP}
\rulerCmdUse{rules3.EP.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.exists.r2}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.all.scheme}}{Type matching rules}{rules3.EX.match.all}{EX}
\rulerCmdUse{rules3.EX.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.all.scheme}}{Type matching rules}{rules3.HM.match.all}{HM}
\rulerCmdUse{rules3.HM.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.all.scheme}}{Type matching rules}{rules3.HS.match.all}{HS}
\rulerCmdUse{rules3.HS.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.exists.r2}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.all.scheme}}{Type matching rules}{rules3.I1.match.all}{I1}
\rulerCmdUse{rules3.I1.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I2.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.all.scheme}}{Type matching rules}{rules3.I2.match.all}{I2}
\rulerCmdUse{rules3.I2.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.var.l3}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.var.l4}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.var.r3}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.var.r4}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.alt}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.alt.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.alt.r1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.forall.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.exists.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.forall.l3}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.exists.l3}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.both}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.both.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.both.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.alt.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.all.m.alt.l3}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.all.scheme}}{Type matching rules}{rules3.K.match.all}{K}
\rulerCmdUse{rules3.K.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.all.scheme}}{Type matching rules}{rules3.MD.match.all}{MD}
\rulerCmdUse{rules3.MD.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.exists.r2}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.all.scheme}}{Type matching rules}{rules3.NUM.match.all}{NUM}
\rulerCmdUse{rules3.NUM.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.exists.r2}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.all.scheme}}{Type matching rules}{rules3.P.match.all}{P}
\rulerCmdUse{rules3.P.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.exists.r2}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.all.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.all}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.all.scheme}}{Type matching rules}{rules3.TS.match.all}{TS}
\rulerCmdUse{rules3.TS.match.all.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.any.r}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.exists.r2}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.all.m.prod}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.ANN.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.ANN.patexpr.base.p.int}{%
\rulerRule{p.int}{ANN}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.ANN.patexpr.base.p.char}{%
\rulerRule{p.char}{ANN}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.ANN.patexpr.base.p.str}{%
\rulerRule{p.str}{ANN}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.ANN.patexpr.base.p.con}{%
\rulerRule{p.con}{ANN}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.ANN.patexpr.base.p.var}{%
\rulerRule{p.var}{ANN}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.ANN.patexpr.base.p.varas}{%
\rulerRule{p.varas}{ANN}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.ANN.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{ANN}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.ANN.patexpr.base.p.app}{%
\rulerRule{p.app}{ANN}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.ANN.patexpr.base.p.ann}{%
\rulerRule{p.ann}{ANN}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.C.patexpr.base.scheme}{%
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  ; Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.C.patexpr.base.p.int}{%
\rulerRule{p.int}{C}
{%
| VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  VarMp | _{ | p | }^{ | k | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.C.patexpr.base.p.char}{%
\rulerRule{p.char}{C}
{%
| VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  VarMp | _{ | p | }^{ | k | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.C.patexpr.base.p.str}{%
\rulerRule{p.str}{C}
{%
| VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  VarMp | _{ | p | }^{ | k | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.C.patexpr.base.p.con}{%
\rulerRule{p.con}{C}
{%
|  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  ,  ^^  || identc ||  ===  ||  | \overline{ | tvarv | } |  ||  | 
\\
| sigma | _{ | p | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) ,  ^^^  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ]  ===  | \overline{ | tvarv | } |  | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : ANY ; Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  -> sigma | _{ | p | } |  | 
}
}

\rulerCmdDef{rules3.C.patexpr.base.p.var}{%
\rulerRule{p.var}{C}
{%
| sigma | _{ | p | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | p | } |  =/= ANY | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.C.patexpr.base.p.varas}{%
\rulerRule{p.varas}{C}
{%
| sigma | _{ | p | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | p | } |  =/= ANY | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : VarMp | _{ | p | } |  sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.C.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{C}
{%
| VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  VarMp | _{ | p | }^{ | k | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : VarMp | _{ | p | } |  sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.C.patexpr.base.p.app}{%
\rulerRule{p.app}{C}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| VarMp | _{ | f | } |  ; Gamma | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.CG.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.CG.patexpr.base.p.int}{%
\rulerRule{p.int}{CG}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.CG.patexpr.base.p.char}{%
\rulerRule{p.char}{CG}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.CG.patexpr.base.p.str}{%
\rulerRule{p.str}{CG}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.CG.patexpr.base.p.con}{%
\rulerRule{p.con}{CG}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.CG.patexpr.base.p.var}{%
\rulerRule{p.var}{CG}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.CG.patexpr.base.p.varas}{%
\rulerRule{p.varas}{CG}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.CG.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{CG}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.CG.patexpr.base.p.app}{%
\rulerRule{p.app}{CG}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.CG.patexpr.base.p.ann}{%
\rulerRule{p.ann}{CG}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.DT.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.DT.patexpr.base.p.int}{%
\rulerRule{p.int}{DT}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.DT.patexpr.base.p.char}{%
\rulerRule{p.char}{DT}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.DT.patexpr.base.p.str}{%
\rulerRule{p.str}{DT}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.DT.patexpr.base.p.con}{%
\rulerRule{p.con}{DT}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.DT.patexpr.base.p.var}{%
\rulerRule{p.var}{DT}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.DT.patexpr.base.p.varas}{%
\rulerRule{p.varas}{DT}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.DT.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{DT}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.DT.patexpr.base.p.app}{%
\rulerRule{p.app}{DT}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.DT.patexpr.base.p.ann}{%
\rulerRule{p.ann}{DT}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EP.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.EP.patexpr.base.p.int}{%
\rulerRule{p.int}{EP}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EP.patexpr.base.p.char}{%
\rulerRule{p.char}{EP}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EP.patexpr.base.p.str}{%
\rulerRule{p.str}{EP}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EP.patexpr.base.p.con}{%
\rulerRule{p.con}{EP}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  ; Coe | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.EP.patexpr.base.p.var}{%
\rulerRule{p.var}{EP}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EP.patexpr.base.p.varas}{%
\rulerRule{p.varas}{EP}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EP.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{EP}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EP.patexpr.base.p.app}{%
\rulerRule{p.app}{EP}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.EP.patexpr.base.p.ann}{%
\rulerRule{p.ann}{EP}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EX.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.EX.patexpr.base.p.int}{%
\rulerRule{p.int}{EX}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EX.patexpr.base.p.char}{%
\rulerRule{p.char}{EX}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EX.patexpr.base.p.str}{%
\rulerRule{p.str}{EX}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EX.patexpr.base.p.con}{%
\rulerRule{p.con}{EX}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instLRFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.EX.patexpr.base.p.var}{%
\rulerRule{p.var}{EX}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EX.patexpr.base.p.varas}{%
\rulerRule{p.varas}{EX}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EX.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{EX}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.EX.patexpr.base.p.app}{%
\rulerRule{p.app}{EX}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.EX.patexpr.base.p.ann}{%
\rulerRule{p.ann}{EX}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HM.patexpr.base.scheme}{%
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  ; Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.HM.patexpr.base.p.int}{%
\rulerRule{p.int}{HM}
{%
| VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  VarMp | _{ | p | }^{ | k | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HM.patexpr.base.p.char}{%
\rulerRule{p.char}{HM}
{%
| VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  VarMp | _{ | p | }^{ | k | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HM.patexpr.base.p.str}{%
\rulerRule{p.str}{HM}
{%
| VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  VarMp | _{ | p | }^{ | k | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HM.patexpr.base.p.con}{%
\rulerRule{p.con}{HM}
{%
|  | \overline{ | tvarv | } |  | \;\mbox{fresh} |  ,  ^^  || identc ||  ===  ||  | \overline{ | tvarv | } |  ||  | 
\\
| sigma | _{ | p | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) ,  ^^^  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ]  ===  | \overline{ | tvarv | } |  | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : ANY ; Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  -> sigma | _{ | p | } |  | 
}
}

\rulerCmdDef{rules3.HM.patexpr.base.p.var}{%
\rulerRule{p.var}{HM}
{%
| sigma | _{ | p | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | p | } |  =/= ANY | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HM.patexpr.base.p.varas}{%
\rulerRule{p.varas}{HM}
{%
| sigma | _{ | p | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | p | } |  =/= ANY | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : VarMp | _{ | p | } |  sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HM.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{HM}
{%
| VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  VarMp | _{ | p | }^{ | k | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : VarMp | _{ | p | } |  sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HM.patexpr.base.p.app}{%
\rulerRule{p.app}{HM}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| VarMp | _{ | f | } |  ; Gamma | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| VarMp | _{ | p | }^{ | k | } |  ; Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.HS.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.HS.patexpr.base.p.int}{%
\rulerRule{p.int}{HS}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HS.patexpr.base.p.char}{%
\rulerRule{p.char}{HS}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HS.patexpr.base.p.str}{%
\rulerRule{p.str}{HS}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HS.patexpr.base.p.con}{%
\rulerRule{p.con}{HS}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  ; Coe | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.HS.patexpr.base.p.var}{%
\rulerRule{p.var}{HS}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HS.patexpr.base.p.varas}{%
\rulerRule{p.varas}{HS}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HS.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{HS}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.HS.patexpr.base.p.app}{%
\rulerRule{p.app}{HS}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.HS.patexpr.base.p.ann}{%
\rulerRule{p.ann}{HS}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I1.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.I1.patexpr.base.p.int}{%
\rulerRule{p.int}{I1}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I1.patexpr.base.p.char}{%
\rulerRule{p.char}{I1}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I1.patexpr.base.p.str}{%
\rulerRule{p.str}{I1}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I1.patexpr.base.p.con}{%
\rulerRule{p.con}{I1}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instLRFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.I1.patexpr.base.p.var}{%
\rulerRule{p.var}{I1}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I1.patexpr.base.p.varas}{%
\rulerRule{p.varas}{I1}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I1.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{I1}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I1.patexpr.base.p.app}{%
\rulerRule{p.app}{I1}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.I1.patexpr.base.p.ann}{%
\rulerRule{p.ann}{I1}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I2.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.I2.patexpr.base.p.int}{%
\rulerRule{p.int}{I2}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I2.patexpr.base.p.char}{%
\rulerRule{p.char}{I2}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I2.patexpr.base.p.str}{%
\rulerRule{p.str}{I2}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I2.patexpr.base.p.con}{%
\rulerRule{p.con}{I2}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instLRFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.I2.patexpr.base.p.var}{%
\rulerRule{p.var}{I2}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| sigma | _{ | p | } |  === tvarv | _{ | v | } |  ^^  &&  ^^ VarMp | _{ | v | } |  ===  [ tvarv | _{ | v | } |  :-> sigma | _{ | i | } |  ]  ^^  &&  ^^ tvarv | _{ | v | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | v | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I2.patexpr.base.p.varas}{%
\rulerRule{p.varas}{I2}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | i | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| sigma | _{ | p | } |  === tvarv | _{ | v | } |  ^^  &&  ^^ VarMp | _{ | v | } |  ===  [ tvarv | _{ | v | } |  :-> sigma | _{ | i | } |  ]  ^^  &&  ^^ tvarv | _{ | v | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | v | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I2.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{I2}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.I2.patexpr.base.p.app}{%
\rulerRule{p.app}{I2}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.I2.patexpr.base.p.ann}{%
\rulerRule{p.ann}{I2}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.K.patexpr.base.scheme}{%
\ensuremath{| Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : Gamma | }
}
\rulerCmdDef{rules3.K.patexpr.base.p.int}{%
\rulerRule{p.int}{K}
{%
|  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Gamma | 
}
}

\rulerCmdDef{rules3.K.patexpr.base.p.char}{%
\rulerRule{p.char}{K}
{%
|  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Gamma | 
}
}

\rulerCmdDef{rules3.K.patexpr.base.p.str}{%
\rulerRule{p.str}{K}
{%
|  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : Gamma | 
}
}

\rulerCmdDef{rules3.K.patexpr.base.p.con}{%
\rulerRule{p.con}{K}
{%
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  _ : Gamma | 
}
}

\rulerCmdDef{rules3.K.patexpr.base.p.var}{%
\rulerRule{p.var}{K}
{%
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | ^{ | k | } |  ]  | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : Gamma | _{ | i | } |  + Gamma | 
}
}

\rulerCmdDef{rules3.K.patexpr.base.p.varas}{%
\rulerRule{p.varas}{K}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : Gamma | _{ | p | } |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | ^{ | k | } |  ]  | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : Gamma | _{ | i | } |  + Gamma | _{ | p | } |  | 
}
}

\rulerCmdDef{rules3.K.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{K}
{%
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
\\
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : Gamma | _{ | p | } |  | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : Gamma | _{ | p | } |  | 
}
}

\rulerCmdDef{rules3.K.patexpr.base.p.app}{%
\rulerRule{p.app}{K}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| Gamma ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : Gamma | _{ | f | } |  | 
\\
| Gamma | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : Gamma | _{ | a | } |  | 
}
{%
| Gamma ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : Gamma | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.MD.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.MD.patexpr.base.p.int}{%
\rulerRule{p.int}{MD}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.MD.patexpr.base.p.char}{%
\rulerRule{p.char}{MD}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.MD.patexpr.base.p.str}{%
\rulerRule{p.str}{MD}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.MD.patexpr.base.p.con}{%
\rulerRule{p.con}{MD}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  ; Coe | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.MD.patexpr.base.p.var}{%
\rulerRule{p.var}{MD}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.MD.patexpr.base.p.varas}{%
\rulerRule{p.varas}{MD}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.MD.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{MD}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.MD.patexpr.base.p.app}{%
\rulerRule{p.app}{MD}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.MD.patexpr.base.p.ann}{%
\rulerRule{p.ann}{MD}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.NUM.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.NUM.patexpr.base.p.int}{%
\rulerRule{p.int}{NUM}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.NUM.patexpr.base.p.char}{%
\rulerRule{p.char}{NUM}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.NUM.patexpr.base.p.str}{%
\rulerRule{p.str}{NUM}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.NUM.patexpr.base.p.con}{%
\rulerRule{p.con}{NUM}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  ; Coe | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.NUM.patexpr.base.p.var}{%
\rulerRule{p.var}{NUM}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.NUM.patexpr.base.p.varas}{%
\rulerRule{p.varas}{NUM}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.NUM.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{NUM}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.NUM.patexpr.base.p.app}{%
\rulerRule{p.app}{NUM}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.NUM.patexpr.base.p.ann}{%
\rulerRule{p.ann}{NUM}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.P.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.P.patexpr.base.p.int}{%
\rulerRule{p.int}{P}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.P.patexpr.base.p.char}{%
\rulerRule{p.char}{P}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.P.patexpr.base.p.str}{%
\rulerRule{p.str}{P}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.P.patexpr.base.p.con}{%
\rulerRule{p.con}{P}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  ; Coe | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.P.patexpr.base.p.var}{%
\rulerRule{p.var}{P}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.P.patexpr.base.p.varas}{%
\rulerRule{p.varas}{P}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.P.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{P}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.P.patexpr.base.p.app}{%
\rulerRule{p.app}{P}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.P.patexpr.base.p.ann}{%
\rulerRule{p.ann}{P}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.TS.patexpr.base.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.TS.patexpr.base.p.int}{%
\rulerRule{p.int}{TS}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Int : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  int : Int ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.TS.patexpr.base.p.char}{%
\rulerRule{p.char}{TS}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= Char : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  char : Char ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.TS.patexpr.base.p.str}{%
\rulerRule{p.str}{TS}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tyString : _ ~> VarMp | _{ | f | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  str : tyString ; Gamma ~> VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.TS.patexpr.base.p.con}{%
\rulerRule{p.con}{TS}
{%
| tvarv1 , tvarv2 | \;\mbox{fresh} |  | 
\\
| "un" identc :-> sigma | _{ | g | } |  `elem` Gamma | 
\\
| instFIOpts ;  []  :- | ^{ | <= | } |  sigma | _{ | g | } |  <= tvarv1 -> tvarv2 : sigma | _{ | pf | } |  ~> VarMp | _{ | p | } |  ; Coe | 
\\
| fiopt ; VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= tvarv1 : sigma | _{ | r | } |  ~> VarMp | _{ | r | } |  ; Coe | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identc : sigma | _{ | r | } |  ; Gamma ~> VarMp | _{ | r | } |  VarMp | _{ | p | } |  VarMp | _{ | p | }^{ | k | } |  ; VarMp | _{ | p | } |  sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.TS.patexpr.base.p.var}{%
\rulerRule{p.var}{TS}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma ~> VarMp | _{ | p | }^{ | k | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.TS.patexpr.base.p.varas}{%
\rulerRule{p.varas}{TS}
{%
| sigma | _{ | v | } |  === sigma | ^{ | k | } |  ,  ^^^ sigma | _{ | v | } |  =/= ANY | 
\\
| sigma | _{ | p | } |  === VarMp | _{ | i | } |  sigma' ,  ^^ exists ^  | \overline{ | tvarv | } |  . sigma' === sigma | _{ | v | } |  ,  ^^ VarMp | _{ | i | } |  ===  | \overline{ |  [ tvarv :-> tvarf | _{ | i | } |  ]  | } |  ,  ^^  | \overline{ | tvarf | _{ | i | } |  | } |  | \;\mbox{fresh} |  | 
\\
| Gamma | _{ | i | } |  ===  [ identv :-> sigma | _{ | p | } |  ]  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | p | } |  :- | ^{ | p | } |  p : _ ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  identv @ p : sigma | _{ | p | } |  ; Gamma | _{ | i | } |  + Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.TS.patexpr.base.p.apptop}{%
\rulerRule{p.apptop}{TS}
{%
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | a | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; sigma | _{ | a | } |  -> sigma | _{ | r | } |  | 
\\
|  | \overline{ | sigma | } |  ===  [ sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } |  ],  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n | } | ) === sigma | _{ | r | } |  | 
\\
|  ||  | \overline{ | sigma | } |  ||  ^^  === n | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.TS.patexpr.base.p.app}{%
\rulerRule{p.app}{TS}
{%
| sigma | _{ | f | } |  , sigma | _{ | a | } |  === (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } | ) , sigma | _{ | n | } |  ,  ^^^ (sigma | _{ | 1 | } |  , ... , sigma | _{ | n - 1 | } |  , sigma | _{ | n | } | ) === sigma | ^{ | k | } |  | 
\\
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | _{ | f | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  : sigma ; Gamma | _{ | f | } |  ~> VarMp | _{ | f | } |  ; sigma | _{ | pf | } |  | 
\\
| fiopt ; Gamma | _{ | f | } |  ; VarMp | _{ | f | } |  ; sigma | _{ | a | } |  :- | ^{ | p | } |  p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; _ | 
}
{%
| fiopt ; Gamma ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p | _{ | 1 | } |  ^^ p | _{ | 2 | } |  : sigma ; Gamma | _{ | a | } |  ~> VarMp | _{ | a | } |  ; sigma | _{ | pf | } |  | 
}
}

\rulerCmdDef{rules3.TS.patexpr.base.p.ann}{%
\rulerRule{p.ann}{TS}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ; _ | 
\\
| fiopt ; VarMp | _{ | p | }^{ | k | } |  :- | ^{ | <= | } |  sigma | ^{ | k | } |  <= sigma | _{ | t | } |  : sigma ~> VarMp | _{ | f | } |  ; Coe | 
\\
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | f | } |  VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; _ | 
}
{%
| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  (p :: t) : sigma | _{ | p | } |  ; Gamma | _{ | p | } |  ~> VarMp | _{ | p | } |  ; ANY | 
}
}

\rulerCmdDef{rules3.ANN.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.patexpr.base.scheme}}{Pattern expression type rules}{rules3.ANN.patexpr.base}{ANN}
\rulerCmdUse{rules3.ANN.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.patexpr.base.scheme}}{Pattern expression type rules}{rules3.C.patexpr.base}{C}
\rulerCmdUse{rules3.C.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.base.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.patexpr.base.scheme}}{Pattern expression type rules}{rules3.CG.patexpr.base}{CG}
\rulerCmdUse{rules3.CG.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.patexpr.base.scheme}}{Pattern expression type rules}{rules3.DT.patexpr.base}{DT}
\rulerCmdUse{rules3.DT.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.patexpr.base.scheme}}{Pattern expression type rules}{rules3.EP.patexpr.base}{EP}
\rulerCmdUse{rules3.EP.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.patexpr.base.scheme}}{Pattern expression type rules}{rules3.EX.patexpr.base}{EX}
\rulerCmdUse{rules3.EX.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.patexpr.base.scheme}}{Pattern expression type rules}{rules3.HM.patexpr.base}{HM}
\rulerCmdUse{rules3.HM.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.base.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.patexpr.base.scheme}}{Pattern expression type rules}{rules3.HS.patexpr.base}{HS}
\rulerCmdUse{rules3.HS.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.patexpr.base.scheme}}{Pattern expression type rules}{rules3.I1.patexpr.base}{I1}
\rulerCmdUse{rules3.I1.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I2.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.patexpr.base.scheme}}{Pattern expression type rules}{rules3.I2.patexpr.base}{I2}
\rulerCmdUse{rules3.I2.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.patexpr.base.scheme}}{Pattern expression type rules}{rules3.K.patexpr.base}{K}
\rulerCmdUse{rules3.K.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.base.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.patexpr.base.scheme}}{Pattern expression type rules}{rules3.MD.patexpr.base}{MD}
\rulerCmdUse{rules3.MD.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.patexpr.base.scheme}}{Pattern expression type rules}{rules3.NUM.patexpr.base}{NUM}
\rulerCmdUse{rules3.NUM.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.patexpr.base.scheme}}{Pattern expression type rules}{rules3.P.patexpr.base}{P}
\rulerCmdUse{rules3.P.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.patexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.patexpr.base.scheme}}{Pattern expression type rules}{rules3.TS.patexpr.base}{TS}
\rulerCmdUse{rules3.TS.patexpr.base.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.base.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.base.p.str}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.base.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.base.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.base.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.base.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.base.p.app}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.base.p.ann}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.ANN.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.ANN.tyexpr.base.t.con}{%
\rulerRule{t.con}{ANN}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.ANN.tyexpr.base.t.app}{%
\rulerRule{t.app}{ANN}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.ANN.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{ANN}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.ANN.tyexpr.base.t.var}{%
\rulerRule{t.var}{ANN}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.ANN.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{ANN}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.ANN.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{ANN}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.C.tyexpr.base.scheme}{%
\ensuremath{| TGamma :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.C.tyexpr.base.t.con}{%
\rulerRule{t.con}{C}
{%
| identc :-> sigma `elem` TGamma | 
}
{%
| TGamma :- | ^{ | t | } |  identc : sigma | 
}
}

\rulerCmdDef{rules3.C.tyexpr.base.t.app}{%
\rulerRule{t.app}{C}
{%
| TGamma :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  | 
\\
| TGamma :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  | 
}
{%
| TGamma :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.C.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{C}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma :- | ^{ | t | } |  ... : tvarv | 
}
}

\rulerCmdDef{rules3.CG.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.CG.tyexpr.base.t.con}{%
\rulerRule{t.con}{CG}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.CG.tyexpr.base.t.app}{%
\rulerRule{t.app}{CG}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.CG.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{CG}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.CG.tyexpr.base.t.var}{%
\rulerRule{t.var}{CG}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.CG.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{CG}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.CG.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{CG}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.DT.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.DT.tyexpr.base.t.con}{%
\rulerRule{t.con}{DT}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.DT.tyexpr.base.t.app}{%
\rulerRule{t.app}{DT}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.DT.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{DT}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.DT.tyexpr.base.t.var}{%
\rulerRule{t.var}{DT}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.DT.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{DT}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.DT.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{DT}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.E.tyexpr.base.scheme}{%
\ensuremath{|  :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.E.tyexpr.base.t.con}{%
\rulerRule{t.con}{E}
{%
}
{%
|  :- | ^{ | t | } |  identc :  identc | 
}
}

\rulerCmdDef{rules3.E.tyexpr.base.t.app}{%
\rulerRule{t.app}{E}
{%
|  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  | 
\\
|  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  | 
}
{%
|  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.EP.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.EP.tyexpr.base.t.con}{%
\rulerRule{t.con}{EP}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.EP.tyexpr.base.t.app}{%
\rulerRule{t.app}{EP}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.EP.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{EP}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.EP.tyexpr.base.t.var}{%
\rulerRule{t.var}{EP}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.EP.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{EP}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.EP.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{EP}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.EX.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.EX.tyexpr.base.t.con}{%
\rulerRule{t.con}{EX}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.EX.tyexpr.base.t.app}{%
\rulerRule{t.app}{EX}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.EX.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{EX}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.EX.tyexpr.base.t.var}{%
\rulerRule{t.var}{EX}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.EX.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{EX}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.EX.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{EX}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.HM.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.HM.tyexpr.base.t.con}{%
\rulerRule{t.con}{HM}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.HM.tyexpr.base.t.app}{%
\rulerRule{t.app}{HM}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.HM.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{HM}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.HM.tyexpr.base.t.var}{%
\rulerRule{t.var}{HM}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.HM.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{HM}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.HS.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.HS.tyexpr.base.t.con}{%
\rulerRule{t.con}{HS}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.HS.tyexpr.base.t.app}{%
\rulerRule{t.app}{HS}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.HS.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{HS}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.HS.tyexpr.base.t.var}{%
\rulerRule{t.var}{HS}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.HS.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{HS}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.HS.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{HS}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.I1.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.I1.tyexpr.base.t.con}{%
\rulerRule{t.con}{I1}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.I1.tyexpr.base.t.app}{%
\rulerRule{t.app}{I1}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.I1.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{I1}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.I1.tyexpr.base.t.var}{%
\rulerRule{t.var}{I1}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.I1.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{I1}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.I1.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{I1}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.I2.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.I2.tyexpr.base.t.con}{%
\rulerRule{t.con}{I2}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.I2.tyexpr.base.t.app}{%
\rulerRule{t.app}{I2}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.I2.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{I2}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.I2.tyexpr.base.t.var}{%
\rulerRule{t.var}{I2}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.I2.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{I2}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.I2.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{I2}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.K.tyexpr.base.scheme}{%
\ensuremath{| TGamma :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.K.tyexpr.base.t.con}{%
\rulerRule{t.con}{K}
{%
| identc :-> sigma `elem` TGamma | 
}
{%
| TGamma :- | ^{ | t | } |  identc : sigma | 
}
}

\rulerCmdDef{rules3.K.tyexpr.base.t.app}{%
\rulerRule{t.app}{K}
{%
| TGamma :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  | 
\\
| TGamma :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  | 
}
{%
| TGamma :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  | 
}
}

\rulerCmdDef{rules3.MD.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.MD.tyexpr.base.t.con}{%
\rulerRule{t.con}{MD}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.MD.tyexpr.base.t.app}{%
\rulerRule{t.app}{MD}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.MD.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{MD}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.MD.tyexpr.base.t.var}{%
\rulerRule{t.var}{MD}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.MD.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{MD}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.MD.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{MD}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.NUM.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.NUM.tyexpr.base.t.con}{%
\rulerRule{t.con}{NUM}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.NUM.tyexpr.base.t.app}{%
\rulerRule{t.app}{NUM}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.NUM.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{NUM}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.NUM.tyexpr.base.t.var}{%
\rulerRule{t.var}{NUM}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.NUM.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{NUM}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.NUM.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{NUM}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.P.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.P.tyexpr.base.t.con}{%
\rulerRule{t.con}{P}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.P.tyexpr.base.t.app}{%
\rulerRule{t.app}{P}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.P.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{P}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.P.tyexpr.base.t.var}{%
\rulerRule{t.var}{P}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.P.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{P}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.P.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{P}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.TS.tyexpr.base.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.TS.tyexpr.base.t.con}{%
\rulerRule{t.con}{TS}
{%
| identc :-> sigma `elem` TGamma | ^{ | k | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identc : sigma ~> TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.TS.tyexpr.base.t.app}{%
\rulerRule{t.app}{TS}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  : sigma | _{ | f | } |  ~> TGamma | _{ | f | } |  ;  | \overline{ | tvarv | _{ | f | }} |  | 
\\
| TGamma | _{ | f | } |  :- | ^{ | t | } |  t | _{ | 2 | } |  : sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t | _{ | 1 | } |  ^^ t | _{ | 2 | } |  : sigma | _{ | f | } |  sigma | _{ | a | } |  ~> TGamma | _{ | a | } |  ;  | \overline{ | tvarv | _{ | a | }} |  ++  | \overline{ | tvarv | _{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.TS.tyexpr.base.t.wild}{%
\rulerRule{t.wild}{TS}
{%
| tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  ... : tvarv ~> TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.TS.tyexpr.base.t.var}{%
\rulerRule{t.var}{TS}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  []  | 
}
}

\rulerCmdDef{rules3.TS.tyexpr.base.t.var.w}{%
\rulerRule{t.var.w}{TS}
{%
| identv :-> sigma `elem` TGamma | ^{ | k | } |  ^^  ||||  ^^ TGamma | _{ | i | } |  === (identv :-> tvarv) && sigma === tvarv && tvarv | \;\mbox{fresh} |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |   % identv : sigma ~> TGamma | _{ | i | } |  + TGamma | ^{ | k | } |  ;  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.TS.tyexpr.base.t.quant}{%
\rulerRule{t.quant}{TS}
{%
| tvarv | \;\mbox{fresh} |  | 
\\
| TGamma | _{ | i | } |  ===  [ identv :-> tvarv ]  | 
\\
|  []  ++ (TGamma | _{ | i | } |  ++ TGamma | ^{ | k | } | ) :- | ^{ | t | } |  t : sigma | _{ | t | } |  ~> TGamma | _{ | t | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
\\
| TGamma | _{ | l | } |  ++ _ === TGamma | _{ | t | } |  | 
}
{%
| TGamma | ^{ | k | } |  :- | ^{ | t | } |  Qu identv . t :  Qu tvarv . sigma | _{ | t | } |  ~> TGamma | _{ | l | } |  + TGamma | ^{ | k | } |  ;  | \overline{ | tvarv | _{ | t | }} |  | 
}
}

\rulerCmdDef{rules3.ANN.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.tyexpr.base.scheme}}{Type expression type rules}{rules3.ANN.tyexpr.base}{ANN}
\rulerCmdUse{rules3.ANN.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.tyexpr.base.scheme}}{Type expression type rules}{rules3.C.tyexpr.base}{C}
\rulerCmdUse{rules3.C.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.C.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.C.tyexpr.base.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.tyexpr.base.scheme}}{Type expression type rules}{rules3.CG.tyexpr.base}{CG}
\rulerCmdUse{rules3.CG.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.tyexpr.base.scheme}}{Type expression type rules}{rules3.DT.tyexpr.base}{DT}
\rulerCmdUse{rules3.DT.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.tyexpr.base.scheme}}{Type expression type rules}{rules3.E.tyexpr.base}{E}
\rulerCmdUse{rules3.E.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.E.tyexpr.base.t.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.tyexpr.base.scheme}}{Type expression type rules}{rules3.EP.tyexpr.base}{EP}
\rulerCmdUse{rules3.EP.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.tyexpr.base.scheme}}{Type expression type rules}{rules3.EX.tyexpr.base}{EX}
\rulerCmdUse{rules3.EX.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.EX.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.EX.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.EX.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.EX.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.tyexpr.base.scheme}}{Type expression type rules}{rules3.HM.tyexpr.base}{HM}
\rulerCmdUse{rules3.HM.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.HM.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.HM.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.HM.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.tyexpr.base.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.tyexpr.base.scheme}}{Type expression type rules}{rules3.HS.tyexpr.base}{HS}
\rulerCmdUse{rules3.HS.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.tyexpr.base.scheme}}{Type expression type rules}{rules3.I1.tyexpr.base}{I1}
\rulerCmdUse{rules3.I1.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.I1.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.I1.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.I1.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.I1.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I2.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.tyexpr.base.scheme}}{Type expression type rules}{rules3.I2.tyexpr.base}{I2}
\rulerCmdUse{rules3.I2.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.tyexpr.base.scheme}}{Type expression type rules}{rules3.K.tyexpr.base}{K}
\rulerCmdUse{rules3.K.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.K.tyexpr.base.t.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.tyexpr.base.scheme}}{Type expression type rules}{rules3.MD.tyexpr.base}{MD}
\rulerCmdUse{rules3.MD.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.tyexpr.base.scheme}}{Type expression type rules}{rules3.NUM.tyexpr.base}{NUM}
\rulerCmdUse{rules3.NUM.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.tyexpr.base.scheme}}{Type expression type rules}{rules3.P.tyexpr.base}{P}
\rulerCmdUse{rules3.P.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.tyexpr.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.tyexpr.base.scheme}}{Type expression type rules}{rules3.TS.tyexpr.base}{TS}
\rulerCmdUse{rules3.TS.tyexpr.base.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyexpr.base.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyexpr.base.t.wild}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyexpr.base.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyexpr.base.t.var.w}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyexpr.base.t.quant}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.ANN.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.ANN.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{ANN}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.ANN.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{ANN}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.ANN.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{ANN}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.ANN.tyqu.base.ty.qu.app}{%
\rulerRule{ty.qu.app}{ANN}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | f | } |  : sigma | _{ | f | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  | 
\\
| coco `elem`  [ cocoY , cocoN ]  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | a | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma | _{ | f | } |  ^^ sigma | _{ | a | } |  : Qu tvarv . (sigma | _{ | f | }^{ | q | } |  ^^ sigma | _{ | a | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.ANN.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{ANN}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.CG.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.CG.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{CG}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.CG.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{CG}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.CG.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{CG}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.CG.tyqu.base.ty.qu.app}{%
\rulerRule{ty.qu.app}{CG}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | f | } |  : sigma | _{ | f | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  | 
\\
| coco `elem`  [ cocoY , cocoN ]  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | a | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma | _{ | f | } |  ^^ sigma | _{ | a | } |  : Qu tvarv . (sigma | _{ | f | }^{ | q | } |  ^^ sigma | _{ | a | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.CG.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{CG}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.DT.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.DT.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{DT}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.DT.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{DT}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.DT.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{DT}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.DT.tyqu.base.ty.qu.app}{%
\rulerRule{ty.qu.app}{DT}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | f | } |  : sigma | _{ | f | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  | 
\\
| coco `elem`  [ cocoY , cocoN ]  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | a | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma | _{ | f | } |  ^^ sigma | _{ | a | } |  : Qu tvarv . (sigma | _{ | f | }^{ | q | } |  ^^ sigma | _{ | a | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.DT.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{DT}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.EP.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.EP.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{EP}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.EP.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{EP}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.EP.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{EP}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.EP.tyqu.base.ty.qu.app}{%
\rulerRule{ty.qu.app}{EP}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | f | } |  : sigma | _{ | f | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  | 
\\
| coco `elem`  [ cocoY , cocoN ]  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | a | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma | _{ | f | } |  ^^ sigma | _{ | a | } |  : Qu tvarv . (sigma | _{ | f | }^{ | q | } |  ^^ sigma | _{ | a | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.EP.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{EP}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.EX.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.EX.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{EX}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.EX.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{EX}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.EX.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{EX}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.EX.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{EX}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.HS.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.HS.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{HS}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.HS.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{HS}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.HS.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{HS}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.HS.tyqu.base.ty.qu.app}{%
\rulerRule{ty.qu.app}{HS}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | f | } |  : sigma | _{ | f | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  | 
\\
| coco `elem`  [ cocoY , cocoN ]  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | a | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma | _{ | f | } |  ^^ sigma | _{ | a | } |  : Qu tvarv . (sigma | _{ | f | }^{ | q | } |  ^^ sigma | _{ | a | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.HS.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{HS}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.I1.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.I1.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{I1}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.I1.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{I1}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.I1.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{I1}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.I1.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{I1}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.I2.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.I2.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{I2}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.I2.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{I2}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.I2.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{I2}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.I2.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{I2}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.MD.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.MD.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{MD}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.MD.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{MD}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.MD.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{MD}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.MD.tyqu.base.ty.qu.app}{%
\rulerRule{ty.qu.app}{MD}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | f | } |  : sigma | _{ | f | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  | 
\\
| coco `elem`  [ cocoY , cocoN ]  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | a | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma | _{ | f | } |  ^^ sigma | _{ | a | } |  : Qu tvarv . (sigma | _{ | f | }^{ | q | } |  ^^ sigma | _{ | a | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.MD.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{MD}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.NUM.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.NUM.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{NUM}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.NUM.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{NUM}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.NUM.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{NUM}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.NUM.tyqu.base.ty.qu.app}{%
\rulerRule{ty.qu.app}{NUM}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | f | } |  : sigma | _{ | f | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  | 
\\
| coco `elem`  [ cocoY , cocoN ]  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | a | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma | _{ | f | } |  ^^ sigma | _{ | a | } |  : Qu tvarv . (sigma | _{ | f | }^{ | q | } |  ^^ sigma | _{ | a | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.NUM.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{NUM}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.P.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.P.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{P}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.P.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{P}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.P.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{P}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.P.tyqu.base.ty.qu.app}{%
\rulerRule{ty.qu.app}{P}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | f | } |  : sigma | _{ | f | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  | 
\\
| coco `elem`  [ cocoY , cocoN ]  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | a | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma | _{ | f | } |  ^^ sigma | _{ | a | } |  : Qu tvarv . (sigma | _{ | f | }^{ | q | } |  ^^ sigma | _{ | a | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.P.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{P}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.TS.tyqu.base.scheme}{%
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | _{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }} |  | }
}
\rulerCmdDef{rules3.TS.tyqu.base.ty.qu.var}{%
\rulerRule{ty.qu.var}{TS}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  tvarv : Qu tvarv . tvarv ~>  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.TS.tyqu.base.ty.qu.arrow}{%
\rulerRule{ty.qu.arrow}{TS}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoN :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  sigma | _{ | a | } |  -> sigma | _{ | r | } |  : forall ^ tvarv . sigma | _{ | a | }^{ | q | } |  -> sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.TS.tyqu.base.ty.qu.prod}{%
\rulerRule{ty.qu.prod}{TS}
{%
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | r | } |  : sigma | _{ | r | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoY :- | ^{ | Qu | } |  sigma | _{ | l | } |  : sigma | _{ | l | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | r | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; _ :- | ^{ | Qu | } |  (sigma | _{ | l | } |  , sigma | _{ | r | } | ) : exists ^ tvarv . (sigma | _{ | l | }^{ | q | } |  , sigma | _{ | r | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | l | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | r | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.TS.tyqu.base.ty.qu.app}{%
\rulerRule{ty.qu.app}{TS}
{%
| Qu === if coco === cocoY then forall else exists | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | f | } |  : sigma | _{ | f | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  | 
\\
| coco `elem`  [ cocoY , cocoN ]  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; cocoNo :- | ^{ | Qu | } |  sigma | _{ | a | } |  : sigma | _{ | a | }^{ | q | } |  ~>  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
\\
| tvarv `elem` ( | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `intersect`  | \overline{ | tvarv | _{ | a | }^{ | f | }} | ) \\  | \overline{ | tvarv | _{ | g | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma | _{ | f | } |  ^^ sigma | _{ | a | } |  : Qu tvarv . (sigma | _{ | f | }^{ | q | } |  ^^ sigma | _{ | a | }^{ | q | } | ) ~>  | \overline{ | tvarv | _{ | f | }^{ | f | }} |  `union`  | \overline{ | tvarv | _{ | a | }^{ | f | }} |  | 
}
}

\rulerCmdDef{rules3.TS.tyqu.base.ty.qu.quant}{%
\rulerRule{ty.qu.quant}{TS}
{%
| tvarv `notElem`  | \overline{ | tvarv | _{ | g | }} |  | 
\\
| tvarv +  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  sigma : sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  | 
}
{%
|  | \overline{ | tvarv | _{ | g | }} |  ; coco :- | ^{ | Qu | } |  Qu tvarv . sigma : Qu tvarv . sigma | ^{ | q | } |  ~>  | \overline{ | tvarv | ^{ | f | }} |  \\  [ tvarv ]  | 
}
}

\rulerCmdDef{rules3.ANN.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.tyqu.base.scheme}}{Type quantification rules}{rules3.ANN.tyqu.base}{ANN}
\rulerCmdUse{rules3.ANN.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyqu.base.ty.qu.app}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.tyqu.base.scheme}}{Type quantification rules}{rules3.CG.tyqu.base}{CG}
\rulerCmdUse{rules3.CG.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyqu.base.ty.qu.app}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.tyqu.base.scheme}}{Type quantification rules}{rules3.DT.tyqu.base}{DT}
\rulerCmdUse{rules3.DT.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyqu.base.ty.qu.app}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.tyqu.base.scheme}}{Type quantification rules}{rules3.EP.tyqu.base}{EP}
\rulerCmdUse{rules3.EP.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyqu.base.ty.qu.app}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.tyqu.base.scheme}}{Type quantification rules}{rules3.EX.tyqu.base}{EX}
\rulerCmdUse{rules3.EX.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.EX.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.EX.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.tyqu.base.scheme}}{Type quantification rules}{rules3.HS.tyqu.base}{HS}
\rulerCmdUse{rules3.HS.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyqu.base.ty.qu.app}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.tyqu.base.scheme}}{Type quantification rules}{rules3.I1.tyqu.base}{I1}
\rulerCmdUse{rules3.I1.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.I1.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.I1.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I2.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.tyqu.base.scheme}}{Type quantification rules}{rules3.I2.tyqu.base}{I2}
\rulerCmdUse{rules3.I2.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.tyqu.base.scheme}}{Type quantification rules}{rules3.MD.tyqu.base}{MD}
\rulerCmdUse{rules3.MD.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyqu.base.ty.qu.app}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.tyqu.base.scheme}}{Type quantification rules}{rules3.NUM.tyqu.base}{NUM}
\rulerCmdUse{rules3.NUM.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyqu.base.ty.qu.app}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.tyqu.base.scheme}}{Type quantification rules}{rules3.P.tyqu.base}{P}
\rulerCmdUse{rules3.P.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyqu.base.ty.qu.app}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.tyqu.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.tyqu.base.scheme}}{Type quantification rules}{rules3.TS.tyqu.base}{TS}
\rulerCmdUse{rules3.TS.tyqu.base.ty.qu.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyqu.base.ty.qu.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyqu.base.ty.qu.prod}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyqu.base.ty.qu.app}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyqu.base.ty.qu.quant}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.I2.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.I2.expr.base.e.int}
}

\rulerCmdDef{rules3.I2.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.I2.expr.base.e.var}
}

\rulerCmdDef{rules3.I2.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.I2.expr.base.e.app}
}

\rulerCmdDef{rules3.I2.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.I2.expr.base.e.lam}
}

\rulerCmdDef{rules3.I2.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.I2.expr.base.e.let}
}

\rulerCmdDef{rules3.HS.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.HS.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.HS.expr.base.e.int}
}

\rulerCmdDef{rules3.HS.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.HS.expr.base.e.var}
}

\rulerCmdDef{rules3.HS.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.HS.expr.base.e.app}
}

\rulerCmdDef{rules3.HS.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.HS.expr.base.e.lam}
}

\rulerCmdDef{rules3.HS.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.HS.expr.base.e.let}
}

\rulerCmdDef{rules3.NUM.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.NUM.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.NUM.expr.base.e.int}
}

\rulerCmdDef{rules3.NUM.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.NUM.expr.base.e.var}
}

\rulerCmdDef{rules3.NUM.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.NUM.expr.base.e.app}
}

\rulerCmdDef{rules3.NUM.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.NUM.expr.base.e.lam}
}

\rulerCmdDef{rules3.NUM.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.NUM.expr.base.e.let}
}

\rulerCmdDef{rules3.MD.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.MD.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.MD.expr.base.e.int}
}

\rulerCmdDef{rules3.MD.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.MD.expr.base.e.var}
}

\rulerCmdDef{rules3.MD.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.MD.expr.base.e.app}
}

\rulerCmdDef{rules3.MD.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.MD.expr.base.e.lam}
}

\rulerCmdDef{rules3.MD.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.MD.expr.base.e.let}
}

\rulerCmdDef{rules3.EP.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.EP.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.EP.expr.base.e.int}
}

\rulerCmdDef{rules3.EP.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.EP.expr.base.e.var}
}

\rulerCmdDef{rules3.EP.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.EP.expr.base.e.app}
}

\rulerCmdDef{rules3.EP.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.EP.expr.base.e.lam}
}

\rulerCmdDef{rules3.EP.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.EP.expr.base.e.let}
}

\rulerCmdDef{rules3.TS.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.TS.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.TS.expr.base.e.int}
}

\rulerCmdDef{rules3.TS.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.TS.expr.base.e.var}
}

\rulerCmdDef{rules3.TS.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.TS.expr.base.e.app}
}

\rulerCmdDef{rules3.TS.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.TS.expr.base.e.lam}
}

\rulerCmdDef{rules3.TS.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.TS.expr.base.e.let}
}

\rulerCmdDef{rules3.P.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.P.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.P.expr.base.e.int}
}

\rulerCmdDef{rules3.P.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.P.expr.base.e.var}
}

\rulerCmdDef{rules3.P.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.P.expr.base.e.app}
}

\rulerCmdDef{rules3.P.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.P.expr.base.e.lam}
}

\rulerCmdDef{rules3.P.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.P.expr.base.e.let}
}

\rulerCmdDef{rules3.CG.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.CG.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.CG.expr.base.e.int}
}

\rulerCmdDef{rules3.CG.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.CG.expr.base.e.var}
}

\rulerCmdDef{rules3.CG.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.CG.expr.base.e.app}
}

\rulerCmdDef{rules3.CG.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.CG.expr.base.e.lam}
}

\rulerCmdDef{rules3.CG.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.CG.expr.base.e.let}
}

\rulerCmdDef{rules3.ANN.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.ANN.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.ANN.expr.base.e.int}
}

\rulerCmdDef{rules3.ANN.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.ANN.expr.base.e.var}
}

\rulerCmdDef{rules3.ANN.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.ANN.expr.base.e.app}
}

\rulerCmdDef{rules3.ANN.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.ANN.expr.base.e.lam}
}

\rulerCmdDef{rules3.ANN.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.ANN.expr.base.e.let}
}

\rulerCmdDef{rules3.DT.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.DT.expr.base.e.int}
}

\rulerCmdDef{rules3.DT.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.DT.expr.base.e.var}
}

\rulerCmdDef{rules3.DT.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.DT.expr.base.e.app}
}

\rulerCmdDef{rules3.DT.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.DT.expr.base.e.lam}
}

\rulerCmdDef{rules3.DT.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.DT.expr.base.e.let}
}

\rulerCmdDef{rules3.EX.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.EX.expr.base.e.int}
}

\rulerCmdDef{rules3.EX.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.EX.expr.base.e.var}
}

\rulerCmdDef{rules3.EX.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.EX.expr.base.e.app}
}

\rulerCmdDef{rules3.EX.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.EX.expr.base.e.lam}
}

\rulerCmdDef{rules3.EX.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.EX.expr.base.e.let}
}

\rulerCmdDef{rules3.I1.expr.baseExplImpl.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.I1.expr.base.e.int}
}

\rulerCmdDef{rules3.I1.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.I1.expr.base.e.var}
}

\rulerCmdDef{rules3.I1.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.I1.expr.base.e.app}
}

\rulerCmdDef{rules3.I1.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.I1.expr.base.e.lam}
}

\rulerCmdDef{rules3.I1.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.I1.expr.base.e.let}
}

\rulerCmdDef{rules3.HM.expr.baseExplImpl.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.HM.expr.base.e.int}
}

\rulerCmdDef{rules3.HM.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.HM.expr.base.e.var}
}

\rulerCmdDef{rules3.HM.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.HM.expr.base.e.app}
}

\rulerCmdDef{rules3.HM.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.HM.expr.base.e.lam}
}

\rulerCmdDef{rules3.HM.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.HM.expr.base.e.let}
}

\rulerCmdDef{rules3.C.expr.baseExplImpl.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.C.expr.base.e.int}
}

\rulerCmdDef{rules3.C.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.C.expr.base.e.var}
}

\rulerCmdDef{rules3.C.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.C.expr.base.e.app}
}

\rulerCmdDef{rules3.C.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.C.expr.base.e.lam}
}

\rulerCmdDef{rules3.C.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.C.expr.base.e.let}
}

\rulerCmdDef{rules3.K.expr.baseExplImpl.scheme}{%
\ensuremath{| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.K.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.K.expr.base.e.int}
}

\rulerCmdDef{rules3.K.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.K.expr.base.e.var}
}

\rulerCmdDef{rules3.K.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.K.expr.base.e.app}
}

\rulerCmdDef{rules3.K.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.K.expr.base.e.lam}
}

\rulerCmdDef{rules3.K.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.K.expr.base.e.let}
}

\rulerCmdDef{rules3.K.expr.baseExplImpl.e.pred}{%
\rulerCmdUse{rules3.K.expr.onlyE.e.pred}
}

\rulerCmdDef{rules3.E.expr.baseExplImpl.scheme}{%
\ensuremath{| Gamma :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.E.expr.baseExplImpl.e.int}{%
\rulerCmdUse{rules3.E.expr.base.e.int}
}

\rulerCmdDef{rules3.E.expr.baseExplImpl.e.var}{%
\rulerCmdUse{rules3.E.expr.base.e.var}
}

\rulerCmdDef{rules3.E.expr.baseExplImpl.e.app}{%
\rulerCmdUse{rules3.E.expr.base.e.app}
}

\rulerCmdDef{rules3.E.expr.baseExplImpl.e.lam}{%
\rulerCmdUse{rules3.E.expr.base.e.lam}
}

\rulerCmdDef{rules3.E.expr.baseExplImpl.e.let}{%
\rulerCmdUse{rules3.E.expr.base.e.let}
}

\rulerCmdDef{rules3.E.expr.baseExplImpl.e.pred}{%
\rulerCmdUse{rules3.E.expr.onlyE.e.pred}
}

\rulerCmdDef{rules3.I2.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.I2.expr.baseExplImpl}{I2}
\rulerCmdUse{rules3.I2.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.HS.expr.baseExplImpl}{HS}
\rulerCmdUse{rules3.HS.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.NUM.expr.baseExplImpl}{NUM}
\rulerCmdUse{rules3.NUM.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.MD.expr.baseExplImpl}{MD}
\rulerCmdUse{rules3.MD.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.EP.expr.baseExplImpl}{EP}
\rulerCmdUse{rules3.EP.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.TS.expr.baseExplImpl}{TS}
\rulerCmdUse{rules3.TS.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.P.expr.baseExplImpl}{P}
\rulerCmdUse{rules3.P.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.CG.expr.baseExplImpl}{CG}
\rulerCmdUse{rules3.CG.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.ANN.expr.baseExplImpl}{ANN}
\rulerCmdUse{rules3.ANN.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.DT.expr.baseExplImpl}{DT}
\rulerCmdUse{rules3.DT.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.EX.expr.baseExplImpl}{EX}
\rulerCmdUse{rules3.EX.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.I1.expr.baseExplImpl}{I1}
\rulerCmdUse{rules3.I1.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.HM.expr.baseExplImpl}{HM}
\rulerCmdUse{rules3.HM.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.C.expr.baseExplImpl}{C}
\rulerCmdUse{rules3.C.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseExplImpl.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.K.expr.baseExplImpl}{K}
\rulerCmdUse{rules3.K.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseExplImpl.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseExplImpl.e.pred}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.expr.baseExplImpl}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.expr.baseExplImpl.scheme}}{Expression type rules}{rules3.E.expr.baseExplImpl}{E}
\rulerCmdUse{rules3.E.expr.baseExplImpl.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseExplImpl.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseExplImpl.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseExplImpl.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseExplImpl.e.let}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseExplImpl.e.pred}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.I2.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.I2.expr.base.e.int}
}

\rulerCmdDef{rules3.I2.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.I2.expr.base.e.char}
}

\rulerCmdDef{rules3.I2.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.I2.expr.base.e.var}
}

\rulerCmdDef{rules3.I2.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.I2.expr.base.e.app}
}

\rulerCmdDef{rules3.I2.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.I2.expr.base.e.lam}
}

\rulerCmdDef{rules3.I2.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.I2.expr.base.e.ann}
}

\rulerCmdDef{rules3.I2.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.I2.expr.base.e.let}
}

\rulerCmdDef{rules3.HS.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.HS.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.HS.expr.base.e.int}
}

\rulerCmdDef{rules3.HS.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.HS.expr.base.e.char}
}

\rulerCmdDef{rules3.HS.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.HS.expr.base.e.var}
}

\rulerCmdDef{rules3.HS.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.HS.expr.base.e.app}
}

\rulerCmdDef{rules3.HS.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.HS.expr.base.e.lam}
}

\rulerCmdDef{rules3.HS.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.HS.expr.base.e.ann}
}

\rulerCmdDef{rules3.HS.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.HS.expr.base.e.let}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.NUM.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.NUM.expr.base.e.int}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.NUM.expr.base.e.char}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.NUM.expr.base.e.var}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.NUM.expr.base.e.app}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.NUM.expr.base.e.lam}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.NUM.expr.base.e.ann}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.NUM.expr.base.e.let}
}

\rulerCmdDef{rules3.MD.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.MD.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.MD.expr.base.e.int}
}

\rulerCmdDef{rules3.MD.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.MD.expr.base.e.char}
}

\rulerCmdDef{rules3.MD.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.MD.expr.base.e.var}
}

\rulerCmdDef{rules3.MD.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.MD.expr.base.e.app}
}

\rulerCmdDef{rules3.MD.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.MD.expr.base.e.lam}
}

\rulerCmdDef{rules3.MD.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.MD.expr.base.e.ann}
}

\rulerCmdDef{rules3.MD.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.MD.expr.base.e.let}
}

\rulerCmdDef{rules3.EP.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.EP.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.EP.expr.base.e.int}
}

\rulerCmdDef{rules3.EP.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.EP.expr.base.e.char}
}

\rulerCmdDef{rules3.EP.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.EP.expr.base.e.var}
}

\rulerCmdDef{rules3.EP.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.EP.expr.base.e.app}
}

\rulerCmdDef{rules3.EP.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.EP.expr.base.e.lam}
}

\rulerCmdDef{rules3.EP.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.EP.expr.base.e.ann}
}

\rulerCmdDef{rules3.EP.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.EP.expr.base.e.let}
}

\rulerCmdDef{rules3.TS.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.TS.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.TS.expr.base.e.int}
}

\rulerCmdDef{rules3.TS.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.TS.expr.base.e.char}
}

\rulerCmdDef{rules3.TS.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.TS.expr.base.e.var}
}

\rulerCmdDef{rules3.TS.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.TS.expr.base.e.app}
}

\rulerCmdDef{rules3.TS.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.TS.expr.base.e.lam}
}

\rulerCmdDef{rules3.TS.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.TS.expr.base.e.ann}
}

\rulerCmdDef{rules3.TS.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.TS.expr.base.e.let}
}

\rulerCmdDef{rules3.P.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.P.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.P.expr.base.e.int}
}

\rulerCmdDef{rules3.P.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.P.expr.base.e.char}
}

\rulerCmdDef{rules3.P.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.P.expr.base.e.var}
}

\rulerCmdDef{rules3.P.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.P.expr.base.e.app}
}

\rulerCmdDef{rules3.P.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.P.expr.base.e.lam}
}

\rulerCmdDef{rules3.P.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.P.expr.base.e.ann}
}

\rulerCmdDef{rules3.P.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.P.expr.base.e.let}
}

\rulerCmdDef{rules3.CG.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.CG.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.CG.expr.base.e.int}
}

\rulerCmdDef{rules3.CG.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.CG.expr.base.e.char}
}

\rulerCmdDef{rules3.CG.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.CG.expr.base.e.var}
}

\rulerCmdDef{rules3.CG.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.CG.expr.base.e.app}
}

\rulerCmdDef{rules3.CG.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.CG.expr.base.e.lam}
}

\rulerCmdDef{rules3.CG.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.CG.expr.base.e.ann}
}

\rulerCmdDef{rules3.CG.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.CG.expr.base.e.let}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.ANN.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.ANN.expr.base.e.int}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.ANN.expr.base.e.char}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.ANN.expr.base.e.var}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.ANN.expr.base.e.app}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.ANN.expr.base.e.lam}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.ANN.expr.base.e.ann}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.ANN.expr.base.e.let}
}

\rulerCmdDef{rules3.DT.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.DT.expr.base.e.int}
}

\rulerCmdDef{rules3.DT.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.DT.expr.base.e.char}
}

\rulerCmdDef{rules3.DT.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.DT.expr.base.e.var}
}

\rulerCmdDef{rules3.DT.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.DT.expr.base.e.app}
}

\rulerCmdDef{rules3.DT.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.DT.expr.base.e.lam}
}

\rulerCmdDef{rules3.DT.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.DT.expr.base.e.ann}
}

\rulerCmdDef{rules3.DT.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.DT.expr.base.e.let}
}

\rulerCmdDef{rules3.EX.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.EX.expr.base.e.int}
}

\rulerCmdDef{rules3.EX.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.EX.expr.base.e.char}
}

\rulerCmdDef{rules3.EX.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.EX.expr.base.e.var}
}

\rulerCmdDef{rules3.EX.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.EX.expr.base.e.app}
}

\rulerCmdDef{rules3.EX.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.EX.expr.base.e.lam}
}

\rulerCmdDef{rules3.EX.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.EX.expr.base.e.ann}
}

\rulerCmdDef{rules3.EX.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.EX.expr.base.e.let}
}

\rulerCmdDef{rules3.I1.expr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.I1.expr.base.e.int}
}

\rulerCmdDef{rules3.I1.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.I1.expr.base.e.char}
}

\rulerCmdDef{rules3.I1.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.I1.expr.base.e.var}
}

\rulerCmdDef{rules3.I1.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.I1.expr.base.e.app}
}

\rulerCmdDef{rules3.I1.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.I1.expr.base.e.lam}
}

\rulerCmdDef{rules3.I1.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.I1.expr.base.e.ann}
}

\rulerCmdDef{rules3.I1.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.I1.expr.base.e.let}
}

\rulerCmdDef{rules3.HM.expr.baseForEH1.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.HM.expr.base.e.int}
}

\rulerCmdDef{rules3.HM.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.HM.expr.base.e.char}
}

\rulerCmdDef{rules3.HM.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.HM.expr.base.e.var}
}

\rulerCmdDef{rules3.HM.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.HM.expr.base.e.app}
}

\rulerCmdDef{rules3.HM.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.HM.expr.base.e.lam}
}

\rulerCmdDef{rules3.HM.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.HM.expr.base.e.ann}
}

\rulerCmdDef{rules3.HM.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.HM.expr.base.e.let}
}

\rulerCmdDef{rules3.C.expr.baseForEH1.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.C.expr.base.e.int}
}

\rulerCmdDef{rules3.C.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.C.expr.base.e.char}
}

\rulerCmdDef{rules3.C.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.C.expr.base.e.var}
}

\rulerCmdDef{rules3.C.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.C.expr.base.e.app}
}

\rulerCmdDef{rules3.C.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.C.expr.base.e.lam}
}

\rulerCmdDef{rules3.C.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.C.expr.base.e.ann}
}

\rulerCmdDef{rules3.C.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.C.expr.base.e.let}
}

\rulerCmdDef{rules3.K.expr.baseForEH1.scheme}{%
\ensuremath{| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.K.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.K.expr.base.e.int}
}

\rulerCmdDef{rules3.K.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.K.expr.base.e.char}
}

\rulerCmdDef{rules3.K.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.K.expr.base.e.var}
}

\rulerCmdDef{rules3.K.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.K.expr.base.e.app}
}

\rulerCmdDef{rules3.K.expr.baseForEH1.e.prod}{%
\rulerCmdUse{rules3.K.expr.onlyE.e.prod}
}

\rulerCmdDef{rules3.K.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.K.expr.base.e.lam}
}

\rulerCmdDef{rules3.K.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.K.expr.base.e.ann}
}

\rulerCmdDef{rules3.K.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.K.expr.base.e.let}
}

\rulerCmdDef{rules3.E.expr.baseForEH1.scheme}{%
\ensuremath{| Gamma :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.E.expr.baseForEH1.e.int}{%
\rulerCmdUse{rules3.E.expr.base.e.int}
}

\rulerCmdDef{rules3.E.expr.baseForEH1.e.char}{%
\rulerCmdUse{rules3.E.expr.base.e.char}
}

\rulerCmdDef{rules3.E.expr.baseForEH1.e.var}{%
\rulerCmdUse{rules3.E.expr.base.e.var}
}

\rulerCmdDef{rules3.E.expr.baseForEH1.e.app}{%
\rulerCmdUse{rules3.E.expr.base.e.app}
}

\rulerCmdDef{rules3.E.expr.baseForEH1.e.prod}{%
\rulerCmdUse{rules3.E.expr.onlyE.e.prod}
}

\rulerCmdDef{rules3.E.expr.baseForEH1.e.lam}{%
\rulerCmdUse{rules3.E.expr.base.e.lam}
}

\rulerCmdDef{rules3.E.expr.baseForEH1.e.ann}{%
\rulerCmdUse{rules3.E.expr.base.e.ann}
}

\rulerCmdDef{rules3.E.expr.baseForEH1.e.let}{%
\rulerCmdUse{rules3.E.expr.base.e.let}
}

\rulerCmdDef{rules3.I2.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.expr.baseForEH1.scheme}}{Expression type rules}{rules3.I2.expr.baseForEH1}{I2}
\rulerCmdUse{rules3.I2.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.expr.baseForEH1.scheme}}{Expression type rules}{rules3.HS.expr.baseForEH1}{HS}
\rulerCmdUse{rules3.HS.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.expr.baseForEH1.scheme}}{Expression type rules}{rules3.NUM.expr.baseForEH1}{NUM}
\rulerCmdUse{rules3.NUM.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.expr.baseForEH1.scheme}}{Expression type rules}{rules3.MD.expr.baseForEH1}{MD}
\rulerCmdUse{rules3.MD.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.expr.baseForEH1.scheme}}{Expression type rules}{rules3.EP.expr.baseForEH1}{EP}
\rulerCmdUse{rules3.EP.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.expr.baseForEH1.scheme}}{Expression type rules}{rules3.TS.expr.baseForEH1}{TS}
\rulerCmdUse{rules3.TS.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.expr.baseForEH1.scheme}}{Expression type rules}{rules3.P.expr.baseForEH1}{P}
\rulerCmdUse{rules3.P.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.expr.baseForEH1.scheme}}{Expression type rules}{rules3.CG.expr.baseForEH1}{CG}
\rulerCmdUse{rules3.CG.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.expr.baseForEH1.scheme}}{Expression type rules}{rules3.ANN.expr.baseForEH1}{ANN}
\rulerCmdUse{rules3.ANN.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.expr.baseForEH1.scheme}}{Expression type rules}{rules3.DT.expr.baseForEH1}{DT}
\rulerCmdUse{rules3.DT.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.expr.baseForEH1.scheme}}{Expression type rules}{rules3.EX.expr.baseForEH1}{EX}
\rulerCmdUse{rules3.EX.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.expr.baseForEH1.scheme}}{Expression type rules}{rules3.I1.expr.baseForEH1}{I1}
\rulerCmdUse{rules3.I1.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.expr.baseForEH1.scheme}}{Expression type rules}{rules3.HM.expr.baseForEH1}{HM}
\rulerCmdUse{rules3.HM.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.expr.baseForEH1.scheme}}{Expression type rules}{rules3.C.expr.baseForEH1}{C}
\rulerCmdUse{rules3.C.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.expr.baseForEH1.scheme}}{Expression type rules}{rules3.K.expr.baseForEH1}{K}
\rulerCmdUse{rules3.K.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH1.e.prod}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.expr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.expr.baseForEH1.scheme}}{Expression type rules}{rules3.E.expr.baseForEH1}{E}
\rulerCmdUse{rules3.E.expr.baseForEH1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH1.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH1.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH1.e.prod}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH1.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH1.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH1.e.let}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.I2.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.I2.expr.base.e.int}
}

\rulerCmdDef{rules3.I2.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.I2.expr.base.e.char}
}

\rulerCmdDef{rules3.I2.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.I2.expr.base.e.var}
}

\rulerCmdDef{rules3.I2.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.I2.expr.base.e.con}
}

\rulerCmdDef{rules3.I2.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.I2.expr.base.e.app}
}

\rulerCmdDef{rules3.I2.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.I2.expr.base.e.lam}
}

\rulerCmdDef{rules3.I2.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.I2.expr.base.e.ann}
}

\rulerCmdDef{rules3.I2.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.I2.expr.base.e.let}
}

\rulerCmdDef{rules3.HS.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.HS.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.HS.expr.base.e.int}
}

\rulerCmdDef{rules3.HS.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.HS.expr.base.e.char}
}

\rulerCmdDef{rules3.HS.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.HS.expr.base.e.var}
}

\rulerCmdDef{rules3.HS.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.HS.expr.base.e.con}
}

\rulerCmdDef{rules3.HS.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.HS.expr.base.e.app}
}

\rulerCmdDef{rules3.HS.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.HS.expr.base.e.lam}
}

\rulerCmdDef{rules3.HS.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.HS.expr.base.e.ann}
}

\rulerCmdDef{rules3.HS.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.HS.expr.base.e.let}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.NUM.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.NUM.expr.base.e.int}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.NUM.expr.base.e.char}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.NUM.expr.base.e.var}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.NUM.expr.base.e.con}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.NUM.expr.base.e.app}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.NUM.expr.base.e.lam}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.NUM.expr.base.e.ann}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.NUM.expr.base.e.let}
}

\rulerCmdDef{rules3.MD.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.MD.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.MD.expr.base.e.int}
}

\rulerCmdDef{rules3.MD.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.MD.expr.base.e.char}
}

\rulerCmdDef{rules3.MD.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.MD.expr.base.e.var}
}

\rulerCmdDef{rules3.MD.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.MD.expr.base.e.con}
}

\rulerCmdDef{rules3.MD.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.MD.expr.base.e.app}
}

\rulerCmdDef{rules3.MD.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.MD.expr.base.e.lam}
}

\rulerCmdDef{rules3.MD.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.MD.expr.base.e.ann}
}

\rulerCmdDef{rules3.MD.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.MD.expr.base.e.let}
}

\rulerCmdDef{rules3.EP.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.EP.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.EP.expr.base.e.int}
}

\rulerCmdDef{rules3.EP.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.EP.expr.base.e.char}
}

\rulerCmdDef{rules3.EP.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.EP.expr.base.e.var}
}

\rulerCmdDef{rules3.EP.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.EP.expr.base.e.con}
}

\rulerCmdDef{rules3.EP.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.EP.expr.base.e.app}
}

\rulerCmdDef{rules3.EP.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.EP.expr.base.e.lam}
}

\rulerCmdDef{rules3.EP.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.EP.expr.base.e.ann}
}

\rulerCmdDef{rules3.EP.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.EP.expr.base.e.let}
}

\rulerCmdDef{rules3.TS.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.TS.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.TS.expr.base.e.int}
}

\rulerCmdDef{rules3.TS.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.TS.expr.base.e.char}
}

\rulerCmdDef{rules3.TS.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.TS.expr.base.e.var}
}

\rulerCmdDef{rules3.TS.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.TS.expr.base.e.con}
}

\rulerCmdDef{rules3.TS.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.TS.expr.base.e.app}
}

\rulerCmdDef{rules3.TS.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.TS.expr.base.e.lam}
}

\rulerCmdDef{rules3.TS.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.TS.expr.base.e.ann}
}

\rulerCmdDef{rules3.TS.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.TS.expr.base.e.let}
}

\rulerCmdDef{rules3.P.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.P.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.P.expr.base.e.int}
}

\rulerCmdDef{rules3.P.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.P.expr.base.e.char}
}

\rulerCmdDef{rules3.P.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.P.expr.base.e.var}
}

\rulerCmdDef{rules3.P.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.P.expr.base.e.con}
}

\rulerCmdDef{rules3.P.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.P.expr.base.e.app}
}

\rulerCmdDef{rules3.P.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.P.expr.base.e.lam}
}

\rulerCmdDef{rules3.P.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.P.expr.base.e.ann}
}

\rulerCmdDef{rules3.P.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.P.expr.base.e.let}
}

\rulerCmdDef{rules3.CG.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.CG.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.CG.expr.base.e.int}
}

\rulerCmdDef{rules3.CG.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.CG.expr.base.e.char}
}

\rulerCmdDef{rules3.CG.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.CG.expr.base.e.var}
}

\rulerCmdDef{rules3.CG.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.CG.expr.base.e.con}
}

\rulerCmdDef{rules3.CG.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.CG.expr.base.e.app}
}

\rulerCmdDef{rules3.CG.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.CG.expr.base.e.lam}
}

\rulerCmdDef{rules3.CG.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.CG.expr.base.e.ann}
}

\rulerCmdDef{rules3.CG.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.CG.expr.base.e.let}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.ANN.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.ANN.expr.base.e.int}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.ANN.expr.base.e.char}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.ANN.expr.base.e.var}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.ANN.expr.base.e.con}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.ANN.expr.base.e.app}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.ANN.expr.base.e.lam}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.ANN.expr.base.e.ann}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.ANN.expr.base.e.let}
}

\rulerCmdDef{rules3.DT.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.DT.expr.base.e.int}
}

\rulerCmdDef{rules3.DT.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.DT.expr.base.e.char}
}

\rulerCmdDef{rules3.DT.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.DT.expr.base.e.var}
}

\rulerCmdDef{rules3.DT.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.DT.expr.base.e.con}
}

\rulerCmdDef{rules3.DT.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.DT.expr.base.e.app}
}

\rulerCmdDef{rules3.DT.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.DT.expr.base.e.lam}
}

\rulerCmdDef{rules3.DT.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.DT.expr.base.e.ann}
}

\rulerCmdDef{rules3.DT.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.DT.expr.base.e.let}
}

\rulerCmdDef{rules3.EX.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.EX.expr.base.e.int}
}

\rulerCmdDef{rules3.EX.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.EX.expr.base.e.char}
}

\rulerCmdDef{rules3.EX.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.EX.expr.base.e.var}
}

\rulerCmdDef{rules3.EX.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.EX.expr.base.e.con}
}

\rulerCmdDef{rules3.EX.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.EX.expr.base.e.app}
}

\rulerCmdDef{rules3.EX.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.EX.expr.base.e.lam}
}

\rulerCmdDef{rules3.EX.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.EX.expr.base.e.ann}
}

\rulerCmdDef{rules3.EX.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.EX.expr.base.e.let}
}

\rulerCmdDef{rules3.I1.expr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.I1.expr.base.e.int}
}

\rulerCmdDef{rules3.I1.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.I1.expr.base.e.char}
}

\rulerCmdDef{rules3.I1.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.I1.expr.base.e.var}
}

\rulerCmdDef{rules3.I1.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.I1.expr.base.e.con}
}

\rulerCmdDef{rules3.I1.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.I1.expr.base.e.app}
}

\rulerCmdDef{rules3.I1.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.I1.expr.base.e.lam}
}

\rulerCmdDef{rules3.I1.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.I1.expr.base.e.ann}
}

\rulerCmdDef{rules3.I1.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.I1.expr.base.e.let}
}

\rulerCmdDef{rules3.HM.expr.baseForEH2.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.HM.expr.base.e.int}
}

\rulerCmdDef{rules3.HM.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.HM.expr.base.e.char}
}

\rulerCmdDef{rules3.HM.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.HM.expr.base.e.var}
}

\rulerCmdDef{rules3.HM.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.HM.expr.base.e.con}
}

\rulerCmdDef{rules3.HM.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.HM.expr.base.e.app}
}

\rulerCmdDef{rules3.HM.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.HM.expr.base.e.lam}
}

\rulerCmdDef{rules3.HM.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.HM.expr.base.e.ann}
}

\rulerCmdDef{rules3.HM.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.HM.expr.base.e.let}
}

\rulerCmdDef{rules3.C.expr.baseForEH2.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.C.expr.base.e.int}
}

\rulerCmdDef{rules3.C.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.C.expr.base.e.char}
}

\rulerCmdDef{rules3.C.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.C.expr.base.e.var}
}

\rulerCmdDef{rules3.C.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.C.expr.base.e.con}
}

\rulerCmdDef{rules3.C.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.C.expr.base.e.app}
}

\rulerCmdDef{rules3.C.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.C.expr.base.e.lam}
}

\rulerCmdDef{rules3.C.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.C.expr.base.e.ann}
}

\rulerCmdDef{rules3.C.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.C.expr.base.e.let}
}

\rulerCmdDef{rules3.K.expr.baseForEH2.scheme}{%
\ensuremath{| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.K.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.K.expr.base.e.int}
}

\rulerCmdDef{rules3.K.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.K.expr.base.e.char}
}

\rulerCmdDef{rules3.K.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.K.expr.base.e.var}
}

\rulerCmdDef{rules3.K.expr.baseForEH2.e.con}{%
\rulerCmdUse{rules3.K.expr.base.e.con}
}

\rulerCmdDef{rules3.K.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.K.expr.base.e.app}
}

\rulerCmdDef{rules3.K.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.K.expr.base.e.lam}
}

\rulerCmdDef{rules3.K.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.K.expr.base.e.ann}
}

\rulerCmdDef{rules3.K.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.K.expr.base.e.let}
}

\rulerCmdDef{rules3.E.expr.baseForEH2.scheme}{%
\ensuremath{| Gamma :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.E.expr.baseForEH2.e.int}{%
\rulerCmdUse{rules3.E.expr.base.e.int}
}

\rulerCmdDef{rules3.E.expr.baseForEH2.e.char}{%
\rulerCmdUse{rules3.E.expr.base.e.char}
}

\rulerCmdDef{rules3.E.expr.baseForEH2.e.var}{%
\rulerCmdUse{rules3.E.expr.base.e.var}
}

\rulerCmdDef{rules3.E.expr.baseForEH2.e.app}{%
\rulerCmdUse{rules3.E.expr.base.e.app}
}

\rulerCmdDef{rules3.E.expr.baseForEH2.e.lam}{%
\rulerCmdUse{rules3.E.expr.base.e.lam}
}

\rulerCmdDef{rules3.E.expr.baseForEH2.e.ann}{%
\rulerCmdUse{rules3.E.expr.base.e.ann}
}

\rulerCmdDef{rules3.E.expr.baseForEH2.e.let}{%
\rulerCmdUse{rules3.E.expr.base.e.let}
}

\rulerCmdDef{rules3.I2.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.expr.baseForEH2.scheme}}{Expression type rules}{rules3.I2.expr.baseForEH2}{I2}
\rulerCmdUse{rules3.I2.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.expr.baseForEH2.scheme}}{Expression type rules}{rules3.HS.expr.baseForEH2}{HS}
\rulerCmdUse{rules3.HS.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.expr.baseForEH2.scheme}}{Expression type rules}{rules3.NUM.expr.baseForEH2}{NUM}
\rulerCmdUse{rules3.NUM.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.expr.baseForEH2.scheme}}{Expression type rules}{rules3.MD.expr.baseForEH2}{MD}
\rulerCmdUse{rules3.MD.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.expr.baseForEH2.scheme}}{Expression type rules}{rules3.EP.expr.baseForEH2}{EP}
\rulerCmdUse{rules3.EP.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.expr.baseForEH2.scheme}}{Expression type rules}{rules3.TS.expr.baseForEH2}{TS}
\rulerCmdUse{rules3.TS.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.expr.baseForEH2.scheme}}{Expression type rules}{rules3.P.expr.baseForEH2}{P}
\rulerCmdUse{rules3.P.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.expr.baseForEH2.scheme}}{Expression type rules}{rules3.CG.expr.baseForEH2}{CG}
\rulerCmdUse{rules3.CG.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.expr.baseForEH2.scheme}}{Expression type rules}{rules3.ANN.expr.baseForEH2}{ANN}
\rulerCmdUse{rules3.ANN.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.expr.baseForEH2.scheme}}{Expression type rules}{rules3.DT.expr.baseForEH2}{DT}
\rulerCmdUse{rules3.DT.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.expr.baseForEH2.scheme}}{Expression type rules}{rules3.EX.expr.baseForEH2}{EX}
\rulerCmdUse{rules3.EX.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.expr.baseForEH2.scheme}}{Expression type rules}{rules3.I1.expr.baseForEH2}{I1}
\rulerCmdUse{rules3.I1.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.expr.baseForEH2.scheme}}{Expression type rules}{rules3.HM.expr.baseForEH2}{HM}
\rulerCmdUse{rules3.HM.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.expr.baseForEH2.scheme}}{Expression type rules}{rules3.C.expr.baseForEH2}{C}
\rulerCmdUse{rules3.C.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.expr.baseForEH2.scheme}}{Expression type rules}{rules3.K.expr.baseForEH2}{K}
\rulerCmdUse{rules3.K.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH2.e.con}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.expr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.expr.baseForEH2.scheme}}{Expression type rules}{rules3.E.expr.baseForEH2}{E}
\rulerCmdUse{rules3.E.expr.baseForEH2.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH2.e.char}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH2.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH2.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH2.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH2.e.let}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.I2.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.I2.expr.base.e.var}
}

\rulerCmdDef{rules3.I2.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.I2.expr.base.e.ann}
}

\rulerCmdDef{rules3.I2.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.I2.expr.base.e.let}
}

\rulerCmdDef{rules3.HS.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.HS.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.HS.expr.base.e.var}
}

\rulerCmdDef{rules3.HS.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.HS.expr.base.e.ann}
}

\rulerCmdDef{rules3.HS.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.HS.expr.base.e.let}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.NUM.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.NUM.expr.base.e.var}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.NUM.expr.base.e.ann}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.NUM.expr.base.e.let}
}

\rulerCmdDef{rules3.MD.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.MD.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.MD.expr.base.e.var}
}

\rulerCmdDef{rules3.MD.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.MD.expr.base.e.ann}
}

\rulerCmdDef{rules3.MD.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.MD.expr.base.e.let}
}

\rulerCmdDef{rules3.EP.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.EP.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.EP.expr.base.e.var}
}

\rulerCmdDef{rules3.EP.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.EP.expr.base.e.ann}
}

\rulerCmdDef{rules3.EP.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.EP.expr.base.e.let}
}

\rulerCmdDef{rules3.TS.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.TS.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.TS.expr.base.e.var}
}

\rulerCmdDef{rules3.TS.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.TS.expr.base.e.ann}
}

\rulerCmdDef{rules3.TS.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.TS.expr.base.e.let}
}

\rulerCmdDef{rules3.P.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.P.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.P.expr.base.e.var}
}

\rulerCmdDef{rules3.P.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.P.expr.base.e.ann}
}

\rulerCmdDef{rules3.P.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.P.expr.base.e.let}
}

\rulerCmdDef{rules3.CG.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.CG.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.CG.expr.base.e.var}
}

\rulerCmdDef{rules3.CG.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.CG.expr.base.e.ann}
}

\rulerCmdDef{rules3.CG.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.CG.expr.base.e.let}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.ANN.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.ANN.expr.base.e.var}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.ANN.expr.base.e.ann}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.ANN.expr.base.e.let}
}

\rulerCmdDef{rules3.DT.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.DT.expr.base.e.var}
}

\rulerCmdDef{rules3.DT.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.DT.expr.base.e.ann}
}

\rulerCmdDef{rules3.DT.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.DT.expr.base.e.let}
}

\rulerCmdDef{rules3.EX.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.EX.expr.base.e.var}
}

\rulerCmdDef{rules3.EX.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.EX.expr.base.e.ann}
}

\rulerCmdDef{rules3.EX.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.EX.expr.base.e.let}
}

\rulerCmdDef{rules3.I1.expr.baseForEH3.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.I1.expr.base.e.var}
}

\rulerCmdDef{rules3.I1.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.I1.expr.base.e.ann}
}

\rulerCmdDef{rules3.I1.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.I1.expr.base.e.let}
}

\rulerCmdDef{rules3.HM.expr.baseForEH3.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.HM.expr.base.e.var}
}

\rulerCmdDef{rules3.HM.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.HM.expr.base.e.ann}
}

\rulerCmdDef{rules3.HM.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.HM.expr.base.e.let}
}

\rulerCmdDef{rules3.C.expr.baseForEH3.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.C.expr.base.e.var}
}

\rulerCmdDef{rules3.C.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.C.expr.base.e.ann}
}

\rulerCmdDef{rules3.C.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.C.expr.base.e.let}
}

\rulerCmdDef{rules3.K.expr.baseForEH3.scheme}{%
\ensuremath{| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.K.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.K.expr.base.e.var}
}

\rulerCmdDef{rules3.K.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.K.expr.base.e.ann}
}

\rulerCmdDef{rules3.K.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.K.expr.base.e.let}
}

\rulerCmdDef{rules3.E.expr.baseForEH3.scheme}{%
\ensuremath{| Gamma :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.E.expr.baseForEH3.e.var}{%
\rulerCmdUse{rules3.E.expr.base.e.var}
}

\rulerCmdDef{rules3.E.expr.baseForEH3.e.ann}{%
\rulerCmdUse{rules3.E.expr.base.e.ann}
}

\rulerCmdDef{rules3.E.expr.baseForEH3.e.let}{%
\rulerCmdUse{rules3.E.expr.base.e.let}
}

\rulerCmdDef{rules3.I2.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.expr.baseForEH3.scheme}}{Expression type rules}{rules3.I2.expr.baseForEH3}{I2}
\rulerCmdUse{rules3.I2.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.expr.baseForEH3.scheme}}{Expression type rules}{rules3.HS.expr.baseForEH3}{HS}
\rulerCmdUse{rules3.HS.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.expr.baseForEH3.scheme}}{Expression type rules}{rules3.NUM.expr.baseForEH3}{NUM}
\rulerCmdUse{rules3.NUM.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.expr.baseForEH3.scheme}}{Expression type rules}{rules3.MD.expr.baseForEH3}{MD}
\rulerCmdUse{rules3.MD.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.expr.baseForEH3.scheme}}{Expression type rules}{rules3.EP.expr.baseForEH3}{EP}
\rulerCmdUse{rules3.EP.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.expr.baseForEH3.scheme}}{Expression type rules}{rules3.TS.expr.baseForEH3}{TS}
\rulerCmdUse{rules3.TS.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.expr.baseForEH3.scheme}}{Expression type rules}{rules3.P.expr.baseForEH3}{P}
\rulerCmdUse{rules3.P.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.expr.baseForEH3.scheme}}{Expression type rules}{rules3.CG.expr.baseForEH3}{CG}
\rulerCmdUse{rules3.CG.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.expr.baseForEH3.scheme}}{Expression type rules}{rules3.ANN.expr.baseForEH3}{ANN}
\rulerCmdUse{rules3.ANN.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.expr.baseForEH3.scheme}}{Expression type rules}{rules3.DT.expr.baseForEH3}{DT}
\rulerCmdUse{rules3.DT.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.expr.baseForEH3.scheme}}{Expression type rules}{rules3.EX.expr.baseForEH3}{EX}
\rulerCmdUse{rules3.EX.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.expr.baseForEH3.scheme}}{Expression type rules}{rules3.I1.expr.baseForEH3}{I1}
\rulerCmdUse{rules3.I1.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.expr.baseForEH3.scheme}}{Expression type rules}{rules3.HM.expr.baseForEH3}{HM}
\rulerCmdUse{rules3.HM.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.expr.baseForEH3.scheme}}{Expression type rules}{rules3.C.expr.baseForEH3}{C}
\rulerCmdUse{rules3.C.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.expr.baseForEH3.scheme}}{Expression type rules}{rules3.K.expr.baseForEH3}{K}
\rulerCmdUse{rules3.K.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.expr.baseForEH3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.expr.baseForEH3.scheme}}{Expression type rules}{rules3.E.expr.baseForEH3}{E}
\rulerCmdUse{rules3.E.expr.baseForEH3.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH3.e.ann}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH3.e.let}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.I2.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.I2.expr.base.e.var}
}

\rulerCmdDef{rules3.I2.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.I2.expr.base.e.app}
}

\rulerCmdDef{rules3.I2.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.I2.expr.base.e.lam}
}

\rulerCmdDef{rules3.HS.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.HS.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.HS.expr.base.e.var}
}

\rulerCmdDef{rules3.HS.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.HS.expr.base.e.app}
}

\rulerCmdDef{rules3.HS.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.HS.expr.base.e.lam}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.NUM.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.NUM.expr.base.e.var}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.NUM.expr.base.e.app}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.NUM.expr.base.e.lam}
}

\rulerCmdDef{rules3.MD.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.MD.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.MD.expr.base.e.var}
}

\rulerCmdDef{rules3.MD.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.MD.expr.base.e.app}
}

\rulerCmdDef{rules3.MD.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.MD.expr.base.e.lam}
}

\rulerCmdDef{rules3.EP.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.EP.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.EP.expr.base.e.var}
}

\rulerCmdDef{rules3.EP.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.EP.expr.base.e.app}
}

\rulerCmdDef{rules3.EP.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.EP.expr.base.e.lam}
}

\rulerCmdDef{rules3.TS.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.TS.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.TS.expr.base.e.var}
}

\rulerCmdDef{rules3.TS.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.TS.expr.base.e.app}
}

\rulerCmdDef{rules3.TS.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.TS.expr.base.e.lam}
}

\rulerCmdDef{rules3.P.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.P.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.P.expr.base.e.var}
}

\rulerCmdDef{rules3.P.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.P.expr.base.e.app}
}

\rulerCmdDef{rules3.P.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.P.expr.base.e.lam}
}

\rulerCmdDef{rules3.CG.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.CG.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.CG.expr.base.e.var}
}

\rulerCmdDef{rules3.CG.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.CG.expr.base.e.app}
}

\rulerCmdDef{rules3.CG.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.CG.expr.base.e.lam}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.ANN.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.ANN.expr.base.e.var}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.ANN.expr.base.e.app}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.ANN.expr.base.e.lam}
}

\rulerCmdDef{rules3.DT.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.DT.expr.base.e.var}
}

\rulerCmdDef{rules3.DT.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.DT.expr.base.e.app}
}

\rulerCmdDef{rules3.DT.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.DT.expr.base.e.lam}
}

\rulerCmdDef{rules3.EX.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.EX.expr.base.e.var}
}

\rulerCmdDef{rules3.EX.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.EX.expr.base.e.app}
}

\rulerCmdDef{rules3.EX.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.EX.expr.base.e.lam}
}

\rulerCmdDef{rules3.I1.expr.baseForEH4.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.I1.expr.base.e.var}
}

\rulerCmdDef{rules3.I1.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.I1.expr.base.e.app}
}

\rulerCmdDef{rules3.I1.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.I1.expr.base.e.lam}
}

\rulerCmdDef{rules3.HM.expr.baseForEH4.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.HM.expr.base.e.var}
}

\rulerCmdDef{rules3.HM.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.HM.expr.base.e.app}
}

\rulerCmdDef{rules3.HM.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.HM.expr.base.e.lam}
}

\rulerCmdDef{rules3.C.expr.baseForEH4.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.C.expr.base.e.var}
}

\rulerCmdDef{rules3.C.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.C.expr.base.e.app}
}

\rulerCmdDef{rules3.C.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.C.expr.base.e.lam}
}

\rulerCmdDef{rules3.K.expr.baseForEH4.scheme}{%
\ensuremath{| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.K.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.K.expr.base.e.var}
}

\rulerCmdDef{rules3.K.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.K.expr.base.e.app}
}

\rulerCmdDef{rules3.K.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.K.expr.base.e.lam}
}

\rulerCmdDef{rules3.E.expr.baseForEH4.scheme}{%
\ensuremath{| Gamma :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.E.expr.baseForEH4.e.var}{%
\rulerCmdUse{rules3.E.expr.base.e.var}
}

\rulerCmdDef{rules3.E.expr.baseForEH4.e.app}{%
\rulerCmdUse{rules3.E.expr.base.e.app}
}

\rulerCmdDef{rules3.E.expr.baseForEH4.e.lam}{%
\rulerCmdUse{rules3.E.expr.base.e.lam}
}

\rulerCmdDef{rules3.I2.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.expr.baseForEH4.scheme}}{Expression type rules}{rules3.I2.expr.baseForEH4}{I2}
\rulerCmdUse{rules3.I2.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.expr.baseForEH4.scheme}}{Expression type rules}{rules3.HS.expr.baseForEH4}{HS}
\rulerCmdUse{rules3.HS.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.expr.baseForEH4.scheme}}{Expression type rules}{rules3.NUM.expr.baseForEH4}{NUM}
\rulerCmdUse{rules3.NUM.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.expr.baseForEH4.scheme}}{Expression type rules}{rules3.MD.expr.baseForEH4}{MD}
\rulerCmdUse{rules3.MD.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.expr.baseForEH4.scheme}}{Expression type rules}{rules3.EP.expr.baseForEH4}{EP}
\rulerCmdUse{rules3.EP.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.expr.baseForEH4.scheme}}{Expression type rules}{rules3.TS.expr.baseForEH4}{TS}
\rulerCmdUse{rules3.TS.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.expr.baseForEH4.scheme}}{Expression type rules}{rules3.P.expr.baseForEH4}{P}
\rulerCmdUse{rules3.P.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.expr.baseForEH4.scheme}}{Expression type rules}{rules3.CG.expr.baseForEH4}{CG}
\rulerCmdUse{rules3.CG.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.expr.baseForEH4.scheme}}{Expression type rules}{rules3.ANN.expr.baseForEH4}{ANN}
\rulerCmdUse{rules3.ANN.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.expr.baseForEH4.scheme}}{Expression type rules}{rules3.DT.expr.baseForEH4}{DT}
\rulerCmdUse{rules3.DT.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.expr.baseForEH4.scheme}}{Expression type rules}{rules3.EX.expr.baseForEH4}{EX}
\rulerCmdUse{rules3.EX.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.expr.baseForEH4.scheme}}{Expression type rules}{rules3.I1.expr.baseForEH4}{I1}
\rulerCmdUse{rules3.I1.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.expr.baseForEH4.scheme}}{Expression type rules}{rules3.HM.expr.baseForEH4}{HM}
\rulerCmdUse{rules3.HM.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.expr.baseForEH4.scheme}}{Expression type rules}{rules3.C.expr.baseForEH4}{C}
\rulerCmdUse{rules3.C.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.expr.baseForEH4.scheme}}{Expression type rules}{rules3.K.expr.baseForEH4}{K}
\rulerCmdUse{rules3.K.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.expr.baseForEH4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.expr.baseForEH4.scheme}}{Expression type rules}{rules3.E.expr.baseForEH4}{E}
\rulerCmdUse{rules3.E.expr.baseForEH4.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH4.e.app}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.baseForEH4.e.lam}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.I2.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.I2.expr.base.e.apptop}
}

\rulerCmdDef{rules3.HS.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.HS.expr.baseForEH9.e.iapp}{%
\rulerCmdUse{rules3.HS.expr.base.e.iapp}
}

\rulerCmdDef{rules3.HS.expr.baseForEH9.e.ilam}{%
\rulerCmdUse{rules3.HS.expr.base.e.ilam}
}

\rulerCmdDef{rules3.HS.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.HS.expr.base.e.apptop}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.NUM.expr.baseForEH9.e.iapp}{%
\rulerCmdUse{rules3.NUM.expr.base.e.iapp}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH9.e.ilam}{%
\rulerCmdUse{rules3.NUM.expr.base.e.ilam}
}

\rulerCmdDef{rules3.NUM.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.NUM.expr.base.e.apptop}
}

\rulerCmdDef{rules3.MD.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.MD.expr.baseForEH9.e.iapp}{%
\rulerCmdUse{rules3.MD.expr.base.e.iapp}
}

\rulerCmdDef{rules3.MD.expr.baseForEH9.e.ilam}{%
\rulerCmdUse{rules3.MD.expr.base.e.ilam}
}

\rulerCmdDef{rules3.MD.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.MD.expr.base.e.apptop}
}

\rulerCmdDef{rules3.EP.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.EP.expr.baseForEH9.e.iapp}{%
\rulerCmdUse{rules3.EP.expr.base.e.iapp}
}

\rulerCmdDef{rules3.EP.expr.baseForEH9.e.ilam}{%
\rulerCmdUse{rules3.EP.expr.base.e.ilam}
}

\rulerCmdDef{rules3.EP.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.EP.expr.base.e.apptop}
}

\rulerCmdDef{rules3.TS.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.TS.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.TS.expr.base.e.apptop}
}

\rulerCmdDef{rules3.P.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.P.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.P.expr.base.e.apptop}
}

\rulerCmdDef{rules3.CG.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.CG.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.CG.expr.base.e.apptop}
}

\rulerCmdDef{rules3.ANN.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.ANN.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.ANN.expr.base.e.apptop}
}

\rulerCmdDef{rules3.DT.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.DT.expr.base.e.apptop}
}

\rulerCmdDef{rules3.EX.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.EX.expr.base.e.apptop}
}

\rulerCmdDef{rules3.I1.expr.baseForEH9.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.I1.expr.base.e.apptop}
}

\rulerCmdDef{rules3.HM.expr.baseForEH9.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.HM.expr.base.e.apptop}
}

\rulerCmdDef{rules3.C.expr.baseForEH9.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.expr.baseForEH9.e.apptop}{%
\rulerCmdUse{rules3.C.expr.base.e.apptop}
}

\rulerCmdDef{rules3.K.expr.baseForEH9.scheme}{%
\ensuremath{| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.E.expr.baseForEH9.scheme}{%
\ensuremath{| Gamma :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.I2.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.expr.baseForEH9.scheme}}{Expression type rules}{rules3.I2.expr.baseForEH9}{I2}
\rulerCmdUse{rules3.I2.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.expr.baseForEH9.scheme}}{Expression type rules}{rules3.HS.expr.baseForEH9}{HS}
\rulerCmdUse{rules3.HS.expr.baseForEH9.e.iapp}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH9.e.ilam}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.expr.baseForEH9.scheme}}{Expression type rules}{rules3.NUM.expr.baseForEH9}{NUM}
\rulerCmdUse{rules3.NUM.expr.baseForEH9.e.iapp}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH9.e.ilam}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.expr.baseForEH9.scheme}}{Expression type rules}{rules3.MD.expr.baseForEH9}{MD}
\rulerCmdUse{rules3.MD.expr.baseForEH9.e.iapp}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH9.e.ilam}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.expr.baseForEH9.scheme}}{Expression type rules}{rules3.EP.expr.baseForEH9}{EP}
\rulerCmdUse{rules3.EP.expr.baseForEH9.e.iapp}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH9.e.ilam}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.expr.baseForEH9.scheme}}{Expression type rules}{rules3.TS.expr.baseForEH9}{TS}
\rulerCmdUse{rules3.TS.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.expr.baseForEH9.scheme}}{Expression type rules}{rules3.P.expr.baseForEH9}{P}
\rulerCmdUse{rules3.P.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.expr.baseForEH9.scheme}}{Expression type rules}{rules3.CG.expr.baseForEH9}{CG}
\rulerCmdUse{rules3.CG.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.expr.baseForEH9.scheme}}{Expression type rules}{rules3.ANN.expr.baseForEH9}{ANN}
\rulerCmdUse{rules3.ANN.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.expr.baseForEH9.scheme}}{Expression type rules}{rules3.DT.expr.baseForEH9}{DT}
\rulerCmdUse{rules3.DT.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.expr.baseForEH9.scheme}}{Expression type rules}{rules3.EX.expr.baseForEH9}{EX}
\rulerCmdUse{rules3.EX.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.expr.baseForEH9.scheme}}{Expression type rules}{rules3.I1.expr.baseForEH9}{I1}
\rulerCmdUse{rules3.I1.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.expr.baseForEH9.scheme}}{Expression type rules}{rules3.HM.expr.baseForEH9}{HM}
\rulerCmdUse{rules3.HM.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.expr.baseForEH9.scheme}}{Expression type rules}{rules3.C.expr.baseForEH9}{C}
\rulerCmdUse{rules3.C.expr.baseForEH9.e.apptop}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.expr.baseForEH9.scheme}}{Expression type rules}{rules3.K.expr.baseForEH9}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.expr.baseForEH9}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.expr.baseForEH9.scheme}}{Expression type rules}{rules3.E.expr.baseForEH9}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.I2.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.I2.expr.base.e.int}
}

\rulerCmdDef{rules3.I2.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.I2.expr.base.e.var}
}

\rulerCmdDef{rules3.I2.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.I2.expr.base.e.app}
}

\rulerCmdDef{rules3.HS.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.HS.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.HS.expr.base.e.int}
}

\rulerCmdDef{rules3.HS.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.HS.expr.base.e.var}
}

\rulerCmdDef{rules3.HS.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.HS.expr.base.e.app}
}

\rulerCmdDef{rules3.NUM.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.NUM.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.NUM.expr.base.e.int}
}

\rulerCmdDef{rules3.NUM.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.NUM.expr.base.e.var}
}

\rulerCmdDef{rules3.NUM.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.NUM.expr.base.e.app}
}

\rulerCmdDef{rules3.MD.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.MD.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.MD.expr.base.e.int}
}

\rulerCmdDef{rules3.MD.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.MD.expr.base.e.var}
}

\rulerCmdDef{rules3.MD.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.MD.expr.base.e.app}
}

\rulerCmdDef{rules3.EP.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.EP.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.EP.expr.base.e.int}
}

\rulerCmdDef{rules3.EP.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.EP.expr.base.e.var}
}

\rulerCmdDef{rules3.EP.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.EP.expr.base.e.app}
}

\rulerCmdDef{rules3.TS.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.TS.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.TS.expr.base.e.int}
}

\rulerCmdDef{rules3.TS.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.TS.expr.base.e.var}
}

\rulerCmdDef{rules3.TS.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.TS.expr.base.e.app}
}

\rulerCmdDef{rules3.P.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.P.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.P.expr.base.e.int}
}

\rulerCmdDef{rules3.P.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.P.expr.base.e.var}
}

\rulerCmdDef{rules3.P.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.P.expr.base.e.app}
}

\rulerCmdDef{rules3.CG.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.CG.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.CG.expr.base.e.int}
}

\rulerCmdDef{rules3.CG.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.CG.expr.base.e.var}
}

\rulerCmdDef{rules3.CG.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.CG.expr.base.e.app}
}

\rulerCmdDef{rules3.ANN.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.ANN.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.ANN.expr.base.e.int}
}

\rulerCmdDef{rules3.ANN.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.ANN.expr.base.e.var}
}

\rulerCmdDef{rules3.ANN.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.ANN.expr.base.e.app}
}

\rulerCmdDef{rules3.DT.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.DT.expr.base.e.int}
}

\rulerCmdDef{rules3.DT.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.DT.expr.base.e.var}
}

\rulerCmdDef{rules3.DT.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.DT.expr.base.e.app}
}

\rulerCmdDef{rules3.EX.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.EX.expr.base.e.int}
}

\rulerCmdDef{rules3.EX.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.EX.expr.base.e.var}
}

\rulerCmdDef{rules3.EX.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.EX.expr.base.e.app}
}

\rulerCmdDef{rules3.I1.expr.eh4B1.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.I1.expr.base.e.int}
}

\rulerCmdDef{rules3.I1.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.I1.expr.base.e.var}
}

\rulerCmdDef{rules3.I1.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.I1.expr.base.e.app}
}

\rulerCmdDef{rules3.HM.expr.eh4B1.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.HM.expr.base.e.int}
}

\rulerCmdDef{rules3.HM.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.HM.expr.base.e.var}
}

\rulerCmdDef{rules3.HM.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.HM.expr.base.e.app}
}

\rulerCmdDef{rules3.C.expr.eh4B1.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.C.expr.base.e.int}
}

\rulerCmdDef{rules3.C.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.C.expr.base.e.var}
}

\rulerCmdDef{rules3.C.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.C.expr.base.e.app}
}

\rulerCmdDef{rules3.K.expr.eh4B1.scheme}{%
\ensuremath{| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.K.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.K.expr.base.e.int}
}

\rulerCmdDef{rules3.K.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.K.expr.base.e.var}
}

\rulerCmdDef{rules3.K.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.K.expr.base.e.app}
}

\rulerCmdDef{rules3.E.expr.eh4B1.scheme}{%
\ensuremath{| Gamma :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.E.expr.eh4B1.e.int}{%
\rulerCmdUse{rules3.E.expr.base.e.int}
}

\rulerCmdDef{rules3.E.expr.eh4B1.e.var}{%
\rulerCmdUse{rules3.E.expr.base.e.var}
}

\rulerCmdDef{rules3.E.expr.eh4B1.e.app}{%
\rulerCmdUse{rules3.E.expr.base.e.app}
}

\rulerCmdDef{rules3.I2.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.I2.expr.eh4B1}{I2}
\rulerCmdUse{rules3.I2.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.HS.expr.eh4B1}{HS}
\rulerCmdUse{rules3.HS.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.NUM.expr.eh4B1}{NUM}
\rulerCmdUse{rules3.NUM.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.MD.expr.eh4B1}{MD}
\rulerCmdUse{rules3.MD.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.EP.expr.eh4B1}{EP}
\rulerCmdUse{rules3.EP.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.TS.expr.eh4B1}{TS}
\rulerCmdUse{rules3.TS.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.P.expr.eh4B1}{P}
\rulerCmdUse{rules3.P.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.CG.expr.eh4B1}{CG}
\rulerCmdUse{rules3.CG.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.ANN.expr.eh4B1}{ANN}
\rulerCmdUse{rules3.ANN.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.DT.expr.eh4B1}{DT}
\rulerCmdUse{rules3.DT.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.EX.expr.eh4B1}{EX}
\rulerCmdUse{rules3.EX.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.I1.expr.eh4B1}{I1}
\rulerCmdUse{rules3.I1.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.HM.expr.eh4B1}{HM}
\rulerCmdUse{rules3.HM.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.C.expr.eh4B1}{C}
\rulerCmdUse{rules3.C.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.K.expr.eh4B1}{K}
\rulerCmdUse{rules3.K.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.expr.eh4B1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.expr.eh4B1.scheme}}{Expression type rules, part I}{rules3.E.expr.eh4B1}{E}
\rulerCmdUse{rules3.E.expr.eh4B1.e.int}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.eh4B1.e.var}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.eh4B1.e.app}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.I2.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.I2.expr.base.e.lam}
}

\rulerCmdDef{rules3.I2.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.I2.expr.base.e.let}
}

\rulerCmdDef{rules3.HS.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.HS.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.HS.expr.base.e.lam}
}

\rulerCmdDef{rules3.HS.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.HS.expr.base.e.let}
}

\rulerCmdDef{rules3.NUM.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.NUM.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.NUM.expr.base.e.lam}
}

\rulerCmdDef{rules3.NUM.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.NUM.expr.base.e.let}
}

\rulerCmdDef{rules3.MD.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.MD.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.MD.expr.base.e.lam}
}

\rulerCmdDef{rules3.MD.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.MD.expr.base.e.let}
}

\rulerCmdDef{rules3.EP.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.EP.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.EP.expr.base.e.lam}
}

\rulerCmdDef{rules3.EP.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.EP.expr.base.e.let}
}

\rulerCmdDef{rules3.TS.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.TS.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.TS.expr.base.e.lam}
}

\rulerCmdDef{rules3.TS.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.TS.expr.base.e.let}
}

\rulerCmdDef{rules3.P.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.P.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.P.expr.base.e.lam}
}

\rulerCmdDef{rules3.P.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.P.expr.base.e.let}
}

\rulerCmdDef{rules3.CG.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.CG.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.CG.expr.base.e.lam}
}

\rulerCmdDef{rules3.CG.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.CG.expr.base.e.let}
}

\rulerCmdDef{rules3.ANN.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.ANN.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.ANN.expr.base.e.lam}
}

\rulerCmdDef{rules3.ANN.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.ANN.expr.base.e.let}
}

\rulerCmdDef{rules3.DT.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.DT.expr.base.e.lam}
}

\rulerCmdDef{rules3.DT.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.DT.expr.base.e.let}
}

\rulerCmdDef{rules3.EX.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.EX.expr.base.e.lam}
}

\rulerCmdDef{rules3.EX.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.EX.expr.base.e.let}
}

\rulerCmdDef{rules3.I1.expr.eh4B2.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.I1.expr.base.e.lam}
}

\rulerCmdDef{rules3.I1.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.I1.expr.base.e.let}
}

\rulerCmdDef{rules3.HM.expr.eh4B2.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.HM.expr.base.e.lam}
}

\rulerCmdDef{rules3.HM.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.HM.expr.base.e.let}
}

\rulerCmdDef{rules3.C.expr.eh4B2.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.C.expr.base.e.lam}
}

\rulerCmdDef{rules3.C.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.C.expr.base.e.let}
}

\rulerCmdDef{rules3.K.expr.eh4B2.scheme}{%
\ensuremath{| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.K.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.K.expr.base.e.lam}
}

\rulerCmdDef{rules3.K.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.K.expr.base.e.let}
}

\rulerCmdDef{rules3.E.expr.eh4B2.scheme}{%
\ensuremath{| Gamma :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.E.expr.eh4B2.e.lam}{%
\rulerCmdUse{rules3.E.expr.base.e.lam}
}

\rulerCmdDef{rules3.E.expr.eh4B2.e.let}{%
\rulerCmdUse{rules3.E.expr.base.e.let}
}

\rulerCmdDef{rules3.I2.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.I2.expr.eh4B2}{I2}
\rulerCmdUse{rules3.I2.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.I2.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.HS.expr.eh4B2}{HS}
\rulerCmdUse{rules3.HS.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.HS.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.NUM.expr.eh4B2}{NUM}
\rulerCmdUse{rules3.NUM.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.MD.expr.eh4B2}{MD}
\rulerCmdUse{rules3.MD.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.MD.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.EP.expr.eh4B2}{EP}
\rulerCmdUse{rules3.EP.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.EP.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.TS.expr.eh4B2}{TS}
\rulerCmdUse{rules3.TS.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.TS.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.P.expr.eh4B2}{P}
\rulerCmdUse{rules3.P.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.P.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.CG.expr.eh4B2}{CG}
\rulerCmdUse{rules3.CG.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.CG.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.ANN.expr.eh4B2}{ANN}
\rulerCmdUse{rules3.ANN.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.DT.expr.eh4B2}{DT}
\rulerCmdUse{rules3.DT.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.DT.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.EX.expr.eh4B2}{EX}
\rulerCmdUse{rules3.EX.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.EX.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.I1.expr.eh4B2}{I1}
\rulerCmdUse{rules3.I1.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.I1.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.HM.expr.eh4B2}{HM}
\rulerCmdUse{rules3.HM.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.HM.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.C.expr.eh4B2}{C}
\rulerCmdUse{rules3.C.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.C.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.K.expr.eh4B2}{K}
\rulerCmdUse{rules3.K.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.K.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.expr.eh4B2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.expr.eh4B2.scheme}}{Expression type rules, part II}{rules3.E.expr.eh4B2}{E}
\rulerCmdUse{rules3.E.expr.eh4B2.e.lam}
\hspace{1ex}
\rulerCmdUse{rules3.E.expr.eh4B2.e.let}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.I2.expr.scratch.e.let}{%
\rulerCmdUse{rules3.I2.expr.base.e.let}
}

\rulerCmdDef{rules3.HS.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.HS.expr.scratch.e.let}{%
\rulerCmdUse{rules3.HS.expr.base.e.let}
}

\rulerCmdDef{rules3.NUM.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.NUM.expr.scratch.e.let}{%
\rulerCmdUse{rules3.NUM.expr.base.e.let}
}

\rulerCmdDef{rules3.MD.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.MD.expr.scratch.e.let}{%
\rulerCmdUse{rules3.MD.expr.base.e.let}
}

\rulerCmdDef{rules3.EP.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.EP.expr.scratch.e.let}{%
\rulerCmdUse{rules3.EP.expr.base.e.let}
}

\rulerCmdDef{rules3.TS.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.TS.expr.scratch.e.let}{%
\rulerCmdUse{rules3.TS.expr.base.e.let}
}

\rulerCmdDef{rules3.P.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.P.expr.scratch.e.let}{%
\rulerCmdUse{rules3.P.expr.base.e.let}
}

\rulerCmdDef{rules3.CG.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp ; Transl | }
}
\rulerCmdDef{rules3.CG.expr.scratch.e.let}{%
\rulerCmdUse{rules3.CG.expr.base.e.let}
}

\rulerCmdDef{rules3.ANN.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; IVarMp | ^{ | k | } |  ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : isigma ; sigma ~> IVarMp ; VarMp | }
}
\rulerCmdDef{rules3.ANN.expr.scratch.e.let}{%
\rulerCmdUse{rules3.ANN.expr.base.e.let}
}

\rulerCmdDef{rules3.DT.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.expr.scratch.e.let}{%
\rulerCmdUse{rules3.DT.expr.base.e.let}
}

\rulerCmdDef{rules3.EX.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.expr.scratch.e.let}{%
\rulerCmdUse{rules3.EX.expr.base.e.let}
}

\rulerCmdDef{rules3.I1.expr.scratch.scheme}{%
\ensuremath{| fiopt ; Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.expr.scratch.e.let}{%
\rulerCmdUse{rules3.I1.expr.base.e.let}
}

\rulerCmdDef{rules3.HM.expr.scratch.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.expr.scratch.e.let}{%
\rulerCmdUse{rules3.HM.expr.base.e.let}
}

\rulerCmdDef{rules3.C.expr.scratch.scheme}{%
\ensuremath{| Gamma ; VarMp | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.expr.scratch.e.let}{%
\rulerCmdUse{rules3.C.expr.base.e.let}
}

\rulerCmdDef{rules3.K.expr.scratch.scheme}{%
\ensuremath{| Gamma ; sigma | ^{ | k | } |  :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.K.expr.scratch.e.let}{%
\rulerCmdUse{rules3.K.expr.base.e.let}
}

\rulerCmdDef{rules3.E.expr.scratch.scheme}{%
\ensuremath{| Gamma :- | ^{ | e | } |  e : sigma | }
}
\rulerCmdDef{rules3.E.expr.scratch.e.let}{%
\rulerCmdUse{rules3.E.expr.base.e.let}
}

\rulerCmdDef{rules3.I2.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.I2.expr.scratch}{I2}
\rulerCmdUse{rules3.I2.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.HS.expr.scratch}{HS}
\rulerCmdUse{rules3.HS.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.NUM.expr.scratch}{NUM}
\rulerCmdUse{rules3.NUM.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.MD.expr.scratch}{MD}
\rulerCmdUse{rules3.MD.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.EP.expr.scratch}{EP}
\rulerCmdUse{rules3.EP.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.TS.expr.scratch}{TS}
\rulerCmdUse{rules3.TS.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.P.expr.scratch}{P}
\rulerCmdUse{rules3.P.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.CG.expr.scratch}{CG}
\rulerCmdUse{rules3.CG.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.ANN.expr.scratch}{ANN}
\rulerCmdUse{rules3.ANN.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.DT.expr.scratch}{DT}
\rulerCmdUse{rules3.DT.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.EX.expr.scratch}{EX}
\rulerCmdUse{rules3.EX.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.I1.expr.scratch}{I1}
\rulerCmdUse{rules3.I1.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.HM.expr.scratch}{HM}
\rulerCmdUse{rules3.HM.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.C.expr.scratch}{C}
\rulerCmdUse{rules3.C.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.K.expr.scratch}{K}
\rulerCmdUse{rules3.K.expr.scratch.e.let}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.expr.scratch}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.expr.scratch.scheme}}{Expression type rules (scratch)}{rules3.E.expr.scratch}{E}
\rulerCmdUse{rules3.E.expr.scratch.e.let}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.base.m.con}{%
\rulerCmdUse{rules3.I2.match.all.m.con}
}

\rulerCmdDef{rules3.I2.match.base.m.var}{%
\rulerCmdUse{rules3.I2.match.all.m.var}
}

\rulerCmdDef{rules3.I2.match.base.m.var.l1}{%
\rulerCmdUse{rules3.I2.match.all.m.var.l1}
}

\rulerCmdDef{rules3.I2.match.base.m.var.l2}{%
\rulerCmdUse{rules3.I2.match.all.m.var.l2}
}

\rulerCmdDef{rules3.I2.match.base.m.arrow}{%
\rulerCmdUse{rules3.I2.match.all.m.arrow}
}

\rulerCmdDef{rules3.I2.match.base.m.prod}{%
\rulerCmdUse{rules3.I2.match.all.m.prod}
}

\rulerCmdDef{rules3.HS.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.HS.match.base.m.con}{%
\rulerCmdUse{rules3.HS.match.all.m.con}
}

\rulerCmdDef{rules3.HS.match.base.m.var}{%
\rulerCmdUse{rules3.HS.match.all.m.var}
}

\rulerCmdDef{rules3.HS.match.base.m.var.l1}{%
\rulerCmdUse{rules3.HS.match.all.m.var.l1}
}

\rulerCmdDef{rules3.HS.match.base.m.var.l2}{%
\rulerCmdUse{rules3.HS.match.all.m.var.l2}
}

\rulerCmdDef{rules3.HS.match.base.m.arrow}{%
\rulerCmdUse{rules3.HS.match.all.m.arrow}
}

\rulerCmdDef{rules3.HS.match.base.m.prod}{%
\rulerCmdUse{rules3.HS.match.all.m.prod}
}

\rulerCmdDef{rules3.NUM.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.base.m.con}{%
\rulerCmdUse{rules3.NUM.match.all.m.con}
}

\rulerCmdDef{rules3.NUM.match.base.m.var}{%
\rulerCmdUse{rules3.NUM.match.all.m.var}
}

\rulerCmdDef{rules3.NUM.match.base.m.var.l1}{%
\rulerCmdUse{rules3.NUM.match.all.m.var.l1}
}

\rulerCmdDef{rules3.NUM.match.base.m.var.l2}{%
\rulerCmdUse{rules3.NUM.match.all.m.var.l2}
}

\rulerCmdDef{rules3.NUM.match.base.m.arrow}{%
\rulerCmdUse{rules3.NUM.match.all.m.arrow}
}

\rulerCmdDef{rules3.NUM.match.base.m.prod}{%
\rulerCmdUse{rules3.NUM.match.all.m.prod}
}

\rulerCmdDef{rules3.MD.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.base.m.con}{%
\rulerCmdUse{rules3.MD.match.all.m.con}
}

\rulerCmdDef{rules3.MD.match.base.m.var}{%
\rulerCmdUse{rules3.MD.match.all.m.var}
}

\rulerCmdDef{rules3.MD.match.base.m.var.l1}{%
\rulerCmdUse{rules3.MD.match.all.m.var.l1}
}

\rulerCmdDef{rules3.MD.match.base.m.var.l2}{%
\rulerCmdUse{rules3.MD.match.all.m.var.l2}
}

\rulerCmdDef{rules3.MD.match.base.m.arrow}{%
\rulerCmdUse{rules3.MD.match.all.m.arrow}
}

\rulerCmdDef{rules3.MD.match.base.m.prod}{%
\rulerCmdUse{rules3.MD.match.all.m.prod}
}

\rulerCmdDef{rules3.EP.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.base.m.con}{%
\rulerCmdUse{rules3.EP.match.all.m.con}
}

\rulerCmdDef{rules3.EP.match.base.m.var}{%
\rulerCmdUse{rules3.EP.match.all.m.var}
}

\rulerCmdDef{rules3.EP.match.base.m.var.l1}{%
\rulerCmdUse{rules3.EP.match.all.m.var.l1}
}

\rulerCmdDef{rules3.EP.match.base.m.var.l2}{%
\rulerCmdUse{rules3.EP.match.all.m.var.l2}
}

\rulerCmdDef{rules3.EP.match.base.m.arrow}{%
\rulerCmdUse{rules3.EP.match.all.m.arrow}
}

\rulerCmdDef{rules3.EP.match.base.m.prod}{%
\rulerCmdUse{rules3.EP.match.all.m.prod}
}

\rulerCmdDef{rules3.TS.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.base.m.con}{%
\rulerCmdUse{rules3.TS.match.all.m.con}
}

\rulerCmdDef{rules3.TS.match.base.m.var}{%
\rulerCmdUse{rules3.TS.match.all.m.var}
}

\rulerCmdDef{rules3.TS.match.base.m.var.l1}{%
\rulerCmdUse{rules3.TS.match.all.m.var.l1}
}

\rulerCmdDef{rules3.TS.match.base.m.var.l2}{%
\rulerCmdUse{rules3.TS.match.all.m.var.l2}
}

\rulerCmdDef{rules3.TS.match.base.m.arrow}{%
\rulerCmdUse{rules3.TS.match.all.m.arrow}
}

\rulerCmdDef{rules3.TS.match.base.m.prod}{%
\rulerCmdUse{rules3.TS.match.all.m.prod}
}

\rulerCmdDef{rules3.P.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.base.m.con}{%
\rulerCmdUse{rules3.P.match.all.m.con}
}

\rulerCmdDef{rules3.P.match.base.m.var}{%
\rulerCmdUse{rules3.P.match.all.m.var}
}

\rulerCmdDef{rules3.P.match.base.m.var.l1}{%
\rulerCmdUse{rules3.P.match.all.m.var.l1}
}

\rulerCmdDef{rules3.P.match.base.m.var.l2}{%
\rulerCmdUse{rules3.P.match.all.m.var.l2}
}

\rulerCmdDef{rules3.P.match.base.m.arrow}{%
\rulerCmdUse{rules3.P.match.all.m.arrow}
}

\rulerCmdDef{rules3.P.match.base.m.prod}{%
\rulerCmdUse{rules3.P.match.all.m.prod}
}

\rulerCmdDef{rules3.CG.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.CG.match.base.m.con}{%
\rulerCmdUse{rules3.CG.match.all.m.con}
}

\rulerCmdDef{rules3.CG.match.base.m.var}{%
\rulerCmdUse{rules3.CG.match.all.m.var}
}

\rulerCmdDef{rules3.CG.match.base.m.var.l1}{%
\rulerCmdUse{rules3.CG.match.all.m.var.l1}
}

\rulerCmdDef{rules3.CG.match.base.m.var.l2}{%
\rulerCmdUse{rules3.CG.match.all.m.var.l2}
}

\rulerCmdDef{rules3.CG.match.base.m.arrow}{%
\rulerCmdUse{rules3.CG.match.all.m.arrow}
}

\rulerCmdDef{rules3.CG.match.base.m.prod}{%
\rulerCmdUse{rules3.CG.match.all.m.prod}
}

\rulerCmdDef{rules3.ANN.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.base.m.con}{%
\rulerCmdUse{rules3.ANN.match.all.m.con}
}

\rulerCmdDef{rules3.ANN.match.base.m.var}{%
\rulerCmdUse{rules3.ANN.match.all.m.var}
}

\rulerCmdDef{rules3.ANN.match.base.m.var.l1}{%
\rulerCmdUse{rules3.ANN.match.all.m.var.l1}
}

\rulerCmdDef{rules3.ANN.match.base.m.var.l2}{%
\rulerCmdUse{rules3.ANN.match.all.m.var.l2}
}

\rulerCmdDef{rules3.ANN.match.base.m.arrow}{%
\rulerCmdUse{rules3.ANN.match.all.m.arrow}
}

\rulerCmdDef{rules3.ANN.match.base.m.prod}{%
\rulerCmdUse{rules3.ANN.match.all.m.prod}
}

\rulerCmdDef{rules3.DT.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.base.m.con}{%
\rulerCmdUse{rules3.DT.match.all.m.con}
}

\rulerCmdDef{rules3.DT.match.base.m.var}{%
\rulerCmdUse{rules3.DT.match.all.m.var}
}

\rulerCmdDef{rules3.DT.match.base.m.var.l1}{%
\rulerCmdUse{rules3.DT.match.all.m.var.l1}
}

\rulerCmdDef{rules3.DT.match.base.m.var.l2}{%
\rulerCmdUse{rules3.DT.match.all.m.var.l2}
}

\rulerCmdDef{rules3.DT.match.base.m.arrow}{%
\rulerCmdUse{rules3.DT.match.all.m.arrow}
}

\rulerCmdDef{rules3.DT.match.base.m.prod}{%
\rulerCmdUse{rules3.DT.match.all.m.prod}
}

\rulerCmdDef{rules3.EX.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.base.m.con}{%
\rulerCmdUse{rules3.EX.match.all.m.con}
}

\rulerCmdDef{rules3.EX.match.base.m.var}{%
\rulerCmdUse{rules3.EX.match.all.m.var}
}

\rulerCmdDef{rules3.EX.match.base.m.var.l1}{%
\rulerCmdUse{rules3.EX.match.all.m.var.l1}
}

\rulerCmdDef{rules3.EX.match.base.m.var.l2}{%
\rulerCmdUse{rules3.EX.match.all.m.var.l2}
}

\rulerCmdDef{rules3.EX.match.base.m.arrow}{%
\rulerCmdUse{rules3.EX.match.all.m.arrow}
}

\rulerCmdDef{rules3.EX.match.base.m.prod}{%
\rulerCmdUse{rules3.EX.match.all.m.prod}
}

\rulerCmdDef{rules3.I1.match.base.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.base.m.con}{%
\rulerCmdUse{rules3.I1.match.all.m.con}
}

\rulerCmdDef{rules3.I1.match.base.m.var}{%
\rulerCmdUse{rules3.I1.match.all.m.var}
}

\rulerCmdDef{rules3.I1.match.base.m.var.l1}{%
\rulerCmdUse{rules3.I1.match.all.m.var.l1}
}

\rulerCmdDef{rules3.I1.match.base.m.var.l2}{%
\rulerCmdUse{rules3.I1.match.all.m.var.l2}
}

\rulerCmdDef{rules3.I1.match.base.m.arrow}{%
\rulerCmdUse{rules3.I1.match.all.m.arrow}
}

\rulerCmdDef{rules3.I1.match.base.m.prod}{%
\rulerCmdUse{rules3.I1.match.all.m.prod}
}

\rulerCmdDef{rules3.HM.match.base.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.match.base.m.con}{%
\rulerCmdUse{rules3.HM.match.all.m.con}
}

\rulerCmdDef{rules3.HM.match.base.m.var}{%
\rulerCmdUse{rules3.HM.match.all.m.var}
}

\rulerCmdDef{rules3.HM.match.base.m.var.l1}{%
\rulerCmdUse{rules3.HM.match.all.m.var.l1}
}

\rulerCmdDef{rules3.HM.match.base.m.arrow}{%
\rulerCmdUse{rules3.HM.match.all.m.arrow}
}

\rulerCmdDef{rules3.HM.match.base.m.prod}{%
\rulerCmdUse{rules3.HM.match.all.m.prod}
}

\rulerCmdDef{rules3.C.match.base.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.base.m.con}{%
\rulerCmdUse{rules3.C.match.all.m.con}
}

\rulerCmdDef{rules3.C.match.base.m.var}{%
\rulerCmdUse{rules3.C.match.all.m.var}
}

\rulerCmdDef{rules3.C.match.base.m.var.l1}{%
\rulerCmdUse{rules3.C.match.all.m.var.l1}
}

\rulerCmdDef{rules3.C.match.base.m.arrow}{%
\rulerCmdUse{rules3.C.match.all.m.arrow}
}

\rulerCmdDef{rules3.C.match.base.m.prod}{%
\rulerCmdUse{rules3.C.match.all.m.prod}
}

\rulerCmdDef{rules3.K.match.base.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.K.match.base.m.con}{%
\rulerCmdUse{rules3.K.match.all.m.con}
}

\rulerCmdDef{rules3.K.match.base.m.arrow}{%
\rulerCmdUse{rules3.K.match.all.m.arrow}
}

\rulerCmdDef{rules3.K.match.base.m.prod}{%
\rulerCmdUse{rules3.K.match.all.m.prod}
}

\rulerCmdDef{rules3.E.match.base.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.I2.match.base}{I2}
\rulerCmdUse{rules3.I2.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.HS.match.base}{HS}
\rulerCmdUse{rules3.HS.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.NUM.match.base}{NUM}
\rulerCmdUse{rules3.NUM.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.MD.match.base}{MD}
\rulerCmdUse{rules3.MD.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.EP.match.base}{EP}
\rulerCmdUse{rules3.EP.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.TS.match.base}{TS}
\rulerCmdUse{rules3.TS.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.P.match.base}{P}
\rulerCmdUse{rules3.P.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.CG.match.base}{CG}
\rulerCmdUse{rules3.CG.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.ANN.match.base}{ANN}
\rulerCmdUse{rules3.ANN.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.DT.match.base}{DT}
\rulerCmdUse{rules3.DT.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.EX.match.base}{EX}
\rulerCmdUse{rules3.EX.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.I1.match.base}{I1}
\rulerCmdUse{rules3.I1.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.base.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.HM.match.base}{HM}
\rulerCmdUse{rules3.HM.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.C.match.base}{C}
\rulerCmdUse{rules3.C.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.base.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.base.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.K.match.base}{K}
\rulerCmdUse{rules3.K.match.base.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.base.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.base.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.base}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.base.scheme}}{Type matching (basic |<=>|, part I)}{rules3.E.match.base}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.eh4.m.con}{%
\rulerCmdUse{rules3.I2.match.all.m.con}
}

\rulerCmdDef{rules3.I2.match.eh4.m.var}{%
\rulerCmdUse{rules3.I2.match.all.m.var}
}

\rulerCmdDef{rules3.I2.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.I2.match.all.m.var.l1}
}

\rulerCmdDef{rules3.I2.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.I2.match.all.m.var.r1}
}

\rulerCmdDef{rules3.I2.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.I2.match.all.m.forall.l}
}

\rulerCmdDef{rules3.I2.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.I2.match.all.m.forall.r}
}

\rulerCmdDef{rules3.I2.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.I2.match.all.m.var.l2}
}

\rulerCmdDef{rules3.I2.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.I2.match.all.m.var.r2}
}

\rulerCmdDef{rules3.I2.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.I2.match.all.m.arrow}
}

\rulerCmdDef{rules3.I2.match.eh4.m.prod}{%
\rulerCmdUse{rules3.I2.match.all.m.prod}
}

\rulerCmdDef{rules3.HS.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.HS.match.eh4.m.con}{%
\rulerCmdUse{rules3.HS.match.all.m.con}
}

\rulerCmdDef{rules3.HS.match.eh4.m.var}{%
\rulerCmdUse{rules3.HS.match.all.m.var}
}

\rulerCmdDef{rules3.HS.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.HS.match.all.m.var.l1}
}

\rulerCmdDef{rules3.HS.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.HS.match.all.m.var.r1}
}

\rulerCmdDef{rules3.HS.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.HS.match.all.m.forall.l}
}

\rulerCmdDef{rules3.HS.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.HS.match.all.m.forall.r}
}

\rulerCmdDef{rules3.HS.match.eh4.m.forall.r2}{%
\rulerCmdUse{rules3.HS.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.HS.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.HS.match.all.m.var.l2}
}

\rulerCmdDef{rules3.HS.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.HS.match.all.m.var.r2}
}

\rulerCmdDef{rules3.HS.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.HS.match.all.m.arrow}
}

\rulerCmdDef{rules3.HS.match.eh4.m.prod}{%
\rulerCmdUse{rules3.HS.match.all.m.prod}
}

\rulerCmdDef{rules3.NUM.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.eh4.m.con}{%
\rulerCmdUse{rules3.NUM.match.all.m.con}
}

\rulerCmdDef{rules3.NUM.match.eh4.m.var}{%
\rulerCmdUse{rules3.NUM.match.all.m.var}
}

\rulerCmdDef{rules3.NUM.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.NUM.match.all.m.var.l1}
}

\rulerCmdDef{rules3.NUM.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.NUM.match.all.m.var.r1}
}

\rulerCmdDef{rules3.NUM.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.NUM.match.all.m.forall.l}
}

\rulerCmdDef{rules3.NUM.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.NUM.match.all.m.forall.r}
}

\rulerCmdDef{rules3.NUM.match.eh4.m.forall.r2}{%
\rulerCmdUse{rules3.NUM.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.NUM.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.NUM.match.all.m.var.l2}
}

\rulerCmdDef{rules3.NUM.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.NUM.match.all.m.var.r2}
}

\rulerCmdDef{rules3.NUM.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.NUM.match.all.m.arrow}
}

\rulerCmdDef{rules3.NUM.match.eh4.m.prod}{%
\rulerCmdUse{rules3.NUM.match.all.m.prod}
}

\rulerCmdDef{rules3.MD.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.eh4.m.con}{%
\rulerCmdUse{rules3.MD.match.all.m.con}
}

\rulerCmdDef{rules3.MD.match.eh4.m.var}{%
\rulerCmdUse{rules3.MD.match.all.m.var}
}

\rulerCmdDef{rules3.MD.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.MD.match.all.m.var.l1}
}

\rulerCmdDef{rules3.MD.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.MD.match.all.m.var.r1}
}

\rulerCmdDef{rules3.MD.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.MD.match.all.m.forall.l}
}

\rulerCmdDef{rules3.MD.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.MD.match.all.m.forall.r}
}

\rulerCmdDef{rules3.MD.match.eh4.m.forall.r2}{%
\rulerCmdUse{rules3.MD.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.MD.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.MD.match.all.m.var.l2}
}

\rulerCmdDef{rules3.MD.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.MD.match.all.m.var.r2}
}

\rulerCmdDef{rules3.MD.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.MD.match.all.m.arrow}
}

\rulerCmdDef{rules3.MD.match.eh4.m.prod}{%
\rulerCmdUse{rules3.MD.match.all.m.prod}
}

\rulerCmdDef{rules3.EP.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.eh4.m.con}{%
\rulerCmdUse{rules3.EP.match.all.m.con}
}

\rulerCmdDef{rules3.EP.match.eh4.m.var}{%
\rulerCmdUse{rules3.EP.match.all.m.var}
}

\rulerCmdDef{rules3.EP.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.EP.match.all.m.var.l1}
}

\rulerCmdDef{rules3.EP.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.EP.match.all.m.var.r1}
}

\rulerCmdDef{rules3.EP.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.EP.match.all.m.forall.l}
}

\rulerCmdDef{rules3.EP.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.EP.match.all.m.forall.r}
}

\rulerCmdDef{rules3.EP.match.eh4.m.forall.r2}{%
\rulerCmdUse{rules3.EP.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.EP.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.EP.match.all.m.var.l2}
}

\rulerCmdDef{rules3.EP.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.EP.match.all.m.var.r2}
}

\rulerCmdDef{rules3.EP.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.EP.match.all.m.arrow}
}

\rulerCmdDef{rules3.EP.match.eh4.m.prod}{%
\rulerCmdUse{rules3.EP.match.all.m.prod}
}

\rulerCmdDef{rules3.TS.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.eh4.m.con}{%
\rulerCmdUse{rules3.TS.match.all.m.con}
}

\rulerCmdDef{rules3.TS.match.eh4.m.var}{%
\rulerCmdUse{rules3.TS.match.all.m.var}
}

\rulerCmdDef{rules3.TS.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.TS.match.all.m.var.l1}
}

\rulerCmdDef{rules3.TS.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.TS.match.all.m.var.r1}
}

\rulerCmdDef{rules3.TS.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.TS.match.all.m.forall.l}
}

\rulerCmdDef{rules3.TS.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.TS.match.all.m.forall.r}
}

\rulerCmdDef{rules3.TS.match.eh4.m.forall.r2}{%
\rulerCmdUse{rules3.TS.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.TS.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.TS.match.all.m.var.l2}
}

\rulerCmdDef{rules3.TS.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.TS.match.all.m.var.r2}
}

\rulerCmdDef{rules3.TS.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.TS.match.all.m.arrow}
}

\rulerCmdDef{rules3.TS.match.eh4.m.prod}{%
\rulerCmdUse{rules3.TS.match.all.m.prod}
}

\rulerCmdDef{rules3.P.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.eh4.m.con}{%
\rulerCmdUse{rules3.P.match.all.m.con}
}

\rulerCmdDef{rules3.P.match.eh4.m.var}{%
\rulerCmdUse{rules3.P.match.all.m.var}
}

\rulerCmdDef{rules3.P.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.P.match.all.m.var.l1}
}

\rulerCmdDef{rules3.P.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.P.match.all.m.var.r1}
}

\rulerCmdDef{rules3.P.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.P.match.all.m.forall.l}
}

\rulerCmdDef{rules3.P.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.P.match.all.m.forall.r}
}

\rulerCmdDef{rules3.P.match.eh4.m.forall.r2}{%
\rulerCmdUse{rules3.P.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.P.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.P.match.all.m.var.l2}
}

\rulerCmdDef{rules3.P.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.P.match.all.m.var.r2}
}

\rulerCmdDef{rules3.P.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.P.match.all.m.arrow}
}

\rulerCmdDef{rules3.P.match.eh4.m.prod}{%
\rulerCmdUse{rules3.P.match.all.m.prod}
}

\rulerCmdDef{rules3.CG.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.CG.match.eh4.m.con}{%
\rulerCmdUse{rules3.CG.match.all.m.con}
}

\rulerCmdDef{rules3.CG.match.eh4.m.var}{%
\rulerCmdUse{rules3.CG.match.all.m.var}
}

\rulerCmdDef{rules3.CG.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.CG.match.all.m.var.l1}
}

\rulerCmdDef{rules3.CG.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.CG.match.all.m.var.r1}
}

\rulerCmdDef{rules3.CG.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.CG.match.all.m.forall.l}
}

\rulerCmdDef{rules3.CG.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.CG.match.all.m.forall.r}
}

\rulerCmdDef{rules3.CG.match.eh4.m.forall.r2}{%
\rulerCmdUse{rules3.CG.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.CG.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.CG.match.all.m.var.l2}
}

\rulerCmdDef{rules3.CG.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.CG.match.all.m.var.r2}
}

\rulerCmdDef{rules3.CG.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.CG.match.all.m.arrow}
}

\rulerCmdDef{rules3.CG.match.eh4.m.prod}{%
\rulerCmdUse{rules3.CG.match.all.m.prod}
}

\rulerCmdDef{rules3.ANN.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.eh4.m.con}{%
\rulerCmdUse{rules3.ANN.match.all.m.con}
}

\rulerCmdDef{rules3.ANN.match.eh4.m.var}{%
\rulerCmdUse{rules3.ANN.match.all.m.var}
}

\rulerCmdDef{rules3.ANN.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.ANN.match.all.m.var.l1}
}

\rulerCmdDef{rules3.ANN.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.ANN.match.all.m.var.r1}
}

\rulerCmdDef{rules3.ANN.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.ANN.match.all.m.forall.l}
}

\rulerCmdDef{rules3.ANN.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.ANN.match.all.m.forall.r}
}

\rulerCmdDef{rules3.ANN.match.eh4.m.forall.r2}{%
\rulerCmdUse{rules3.ANN.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.ANN.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.ANN.match.all.m.var.l2}
}

\rulerCmdDef{rules3.ANN.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.ANN.match.all.m.var.r2}
}

\rulerCmdDef{rules3.ANN.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.ANN.match.all.m.arrow}
}

\rulerCmdDef{rules3.ANN.match.eh4.m.prod}{%
\rulerCmdUse{rules3.ANN.match.all.m.prod}
}

\rulerCmdDef{rules3.DT.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.eh4.m.con}{%
\rulerCmdUse{rules3.DT.match.all.m.con}
}

\rulerCmdDef{rules3.DT.match.eh4.m.var}{%
\rulerCmdUse{rules3.DT.match.all.m.var}
}

\rulerCmdDef{rules3.DT.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.DT.match.all.m.var.l1}
}

\rulerCmdDef{rules3.DT.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.DT.match.all.m.var.r1}
}

\rulerCmdDef{rules3.DT.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.DT.match.all.m.forall.l}
}

\rulerCmdDef{rules3.DT.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.DT.match.all.m.forall.r}
}

\rulerCmdDef{rules3.DT.match.eh4.m.forall.r2}{%
\rulerCmdUse{rules3.DT.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.DT.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.DT.match.all.m.var.l2}
}

\rulerCmdDef{rules3.DT.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.DT.match.all.m.var.r2}
}

\rulerCmdDef{rules3.DT.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.DT.match.all.m.arrow}
}

\rulerCmdDef{rules3.DT.match.eh4.m.prod}{%
\rulerCmdUse{rules3.DT.match.all.m.prod}
}

\rulerCmdDef{rules3.EX.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.eh4.m.con}{%
\rulerCmdUse{rules3.EX.match.all.m.con}
}

\rulerCmdDef{rules3.EX.match.eh4.m.var}{%
\rulerCmdUse{rules3.EX.match.all.m.var}
}

\rulerCmdDef{rules3.EX.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.EX.match.all.m.var.l1}
}

\rulerCmdDef{rules3.EX.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.EX.match.all.m.var.r1}
}

\rulerCmdDef{rules3.EX.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.EX.match.all.m.forall.l}
}

\rulerCmdDef{rules3.EX.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.EX.match.all.m.forall.r}
}

\rulerCmdDef{rules3.EX.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.EX.match.all.m.var.l2}
}

\rulerCmdDef{rules3.EX.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.EX.match.all.m.var.r2}
}

\rulerCmdDef{rules3.EX.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.EX.match.all.m.arrow}
}

\rulerCmdDef{rules3.EX.match.eh4.m.prod}{%
\rulerCmdUse{rules3.EX.match.all.m.prod}
}

\rulerCmdDef{rules3.I1.match.eh4.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.eh4.m.con}{%
\rulerCmdUse{rules3.I1.match.all.m.con}
}

\rulerCmdDef{rules3.I1.match.eh4.m.var}{%
\rulerCmdUse{rules3.I1.match.all.m.var}
}

\rulerCmdDef{rules3.I1.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.I1.match.all.m.var.l1}
}

\rulerCmdDef{rules3.I1.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.I1.match.all.m.var.r1}
}

\rulerCmdDef{rules3.I1.match.eh4.m.forall.l}{%
\rulerCmdUse{rules3.I1.match.all.m.forall.l}
}

\rulerCmdDef{rules3.I1.match.eh4.m.forall.r}{%
\rulerCmdUse{rules3.I1.match.all.m.forall.r}
}

\rulerCmdDef{rules3.I1.match.eh4.m.var.l2}{%
\rulerCmdUse{rules3.I1.match.all.m.var.l2}
}

\rulerCmdDef{rules3.I1.match.eh4.m.var.r2}{%
\rulerCmdUse{rules3.I1.match.all.m.var.r2}
}

\rulerCmdDef{rules3.I1.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.I1.match.all.m.arrow}
}

\rulerCmdDef{rules3.I1.match.eh4.m.prod}{%
\rulerCmdUse{rules3.I1.match.all.m.prod}
}

\rulerCmdDef{rules3.HM.match.eh4.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.match.eh4.m.con}{%
\rulerCmdUse{rules3.HM.match.all.m.con}
}

\rulerCmdDef{rules3.HM.match.eh4.m.var}{%
\rulerCmdUse{rules3.HM.match.all.m.var}
}

\rulerCmdDef{rules3.HM.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.HM.match.all.m.var.l1}
}

\rulerCmdDef{rules3.HM.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.HM.match.all.m.var.r1}
}

\rulerCmdDef{rules3.HM.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.HM.match.all.m.arrow}
}

\rulerCmdDef{rules3.HM.match.eh4.m.prod}{%
\rulerCmdUse{rules3.HM.match.all.m.prod}
}

\rulerCmdDef{rules3.C.match.eh4.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.eh4.m.con}{%
\rulerCmdUse{rules3.C.match.all.m.con}
}

\rulerCmdDef{rules3.C.match.eh4.m.var}{%
\rulerCmdUse{rules3.C.match.all.m.var}
}

\rulerCmdDef{rules3.C.match.eh4.m.var.l1}{%
\rulerCmdUse{rules3.C.match.all.m.var.l1}
}

\rulerCmdDef{rules3.C.match.eh4.m.var.r1}{%
\rulerCmdUse{rules3.C.match.all.m.var.r1}
}

\rulerCmdDef{rules3.C.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.C.match.all.m.arrow}
}

\rulerCmdDef{rules3.C.match.eh4.m.prod}{%
\rulerCmdUse{rules3.C.match.all.m.prod}
}

\rulerCmdDef{rules3.K.match.eh4.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.K.match.eh4.m.con}{%
\rulerCmdUse{rules3.K.match.all.m.con}
}

\rulerCmdDef{rules3.K.match.eh4.m.arrow}{%
\rulerCmdUse{rules3.K.match.all.m.arrow}
}

\rulerCmdDef{rules3.K.match.eh4.m.prod}{%
\rulerCmdUse{rules3.K.match.all.m.prod}
}

\rulerCmdDef{rules3.E.match.eh4.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.I2.match.eh4}{I2}
\rulerCmdUse{rules3.I2.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.HS.match.eh4}{HS}
\rulerCmdUse{rules3.HS.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.NUM.match.eh4}{NUM}
\rulerCmdUse{rules3.NUM.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.MD.match.eh4}{MD}
\rulerCmdUse{rules3.MD.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.EP.match.eh4}{EP}
\rulerCmdUse{rules3.EP.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.TS.match.eh4}{TS}
\rulerCmdUse{rules3.TS.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.P.match.eh4}{P}
\rulerCmdUse{rules3.P.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.CG.match.eh4}{CG}
\rulerCmdUse{rules3.CG.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.ANN.match.eh4}{ANN}
\rulerCmdUse{rules3.ANN.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.DT.match.eh4}{DT}
\rulerCmdUse{rules3.DT.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4.m.forall.r2}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.EX.match.eh4}{EX}
\rulerCmdUse{rules3.EX.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.I1.match.eh4}{I1}
\rulerCmdUse{rules3.I1.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.eh4.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.eh4.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.eh4.m.var.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.eh4.m.var.r2}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.HM.match.eh4}{HM}
\rulerCmdUse{rules3.HM.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.C.match.eh4}{C}
\rulerCmdUse{rules3.C.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.eh4.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.eh4.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.eh4.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.K.match.eh4}{K}
\rulerCmdUse{rules3.K.match.eh4.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.eh4.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.eh4.m.prod}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.eh4.scheme}}{Type matching (related to |forall|)}{rules3.E.match.eh4}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.I2.match.all.m.var.l1}
}

\rulerCmdDef{rules3.I2.match.eh4B.m.var.l3}{%
\rulerCmdUse{rules3.I2.match.all.m.var.l3}
}

\rulerCmdDef{rules3.I2.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.I2.match.all.m.var.r1}
}

\rulerCmdDef{rules3.I2.match.eh4B.m.var.r3}{%
\rulerCmdUse{rules3.I2.match.all.m.var.r3}
}

\rulerCmdDef{rules3.I2.match.eh4B.m.alt}{%
\rulerCmdUse{rules3.I2.match.all.m.alt}
}

\rulerCmdDef{rules3.I2.match.eh4B.m.alt.l1}{%
\rulerCmdUse{rules3.I2.match.all.m.alt.l1}
}

\rulerCmdDef{rules3.I2.match.eh4B.m.alt.r1}{%
\rulerCmdUse{rules3.I2.match.all.m.alt.r1}
}

\rulerCmdDef{rules3.HS.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.HS.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.HS.match.all.m.var.l1}
}

\rulerCmdDef{rules3.HS.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.HS.match.all.m.var.r1}
}

\rulerCmdDef{rules3.NUM.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.NUM.match.all.m.var.l1}
}

\rulerCmdDef{rules3.NUM.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.NUM.match.all.m.var.r1}
}

\rulerCmdDef{rules3.MD.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.MD.match.all.m.var.l1}
}

\rulerCmdDef{rules3.MD.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.MD.match.all.m.var.r1}
}

\rulerCmdDef{rules3.EP.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.EP.match.all.m.var.l1}
}

\rulerCmdDef{rules3.EP.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.EP.match.all.m.var.r1}
}

\rulerCmdDef{rules3.TS.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.TS.match.all.m.var.l1}
}

\rulerCmdDef{rules3.TS.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.TS.match.all.m.var.r1}
}

\rulerCmdDef{rules3.P.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.P.match.all.m.var.l1}
}

\rulerCmdDef{rules3.P.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.P.match.all.m.var.r1}
}

\rulerCmdDef{rules3.CG.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.CG.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.CG.match.all.m.var.l1}
}

\rulerCmdDef{rules3.CG.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.CG.match.all.m.var.r1}
}

\rulerCmdDef{rules3.ANN.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.ANN.match.all.m.var.l1}
}

\rulerCmdDef{rules3.ANN.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.ANN.match.all.m.var.r1}
}

\rulerCmdDef{rules3.DT.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.DT.match.all.m.var.l1}
}

\rulerCmdDef{rules3.DT.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.DT.match.all.m.var.r1}
}

\rulerCmdDef{rules3.EX.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.EX.match.all.m.var.l1}
}

\rulerCmdDef{rules3.EX.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.EX.match.all.m.var.r1}
}

\rulerCmdDef{rules3.I1.match.eh4B.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.I1.match.all.m.var.l1}
}

\rulerCmdDef{rules3.I1.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.I1.match.all.m.var.r1}
}

\rulerCmdDef{rules3.HM.match.eh4B.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.HM.match.all.m.var.l1}
}

\rulerCmdDef{rules3.HM.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.HM.match.all.m.var.r1}
}

\rulerCmdDef{rules3.C.match.eh4B.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.eh4B.m.var.l1}{%
\rulerCmdUse{rules3.C.match.all.m.var.l1}
}

\rulerCmdDef{rules3.C.match.eh4B.m.var.r1}{%
\rulerCmdUse{rules3.C.match.all.m.var.r1}
}

\rulerCmdDef{rules3.K.match.eh4B.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.E.match.eh4B.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.I2.match.eh4B}{I2}
\rulerCmdUse{rules3.I2.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4B.m.var.l3}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4B.m.var.r1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4B.m.var.r3}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4B.m.alt}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4B.m.alt.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4B.m.alt.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.HS.match.eh4B}{HS}
\rulerCmdUse{rules3.HS.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.NUM.match.eh4B}{NUM}
\rulerCmdUse{rules3.NUM.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.MD.match.eh4B}{MD}
\rulerCmdUse{rules3.MD.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.EP.match.eh4B}{EP}
\rulerCmdUse{rules3.EP.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.TS.match.eh4B}{TS}
\rulerCmdUse{rules3.TS.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.P.match.eh4B}{P}
\rulerCmdUse{rules3.P.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.CG.match.eh4B}{CG}
\rulerCmdUse{rules3.CG.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.ANN.match.eh4B}{ANN}
\rulerCmdUse{rules3.ANN.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.DT.match.eh4B}{DT}
\rulerCmdUse{rules3.DT.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.EX.match.eh4B}{EX}
\rulerCmdUse{rules3.EX.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.I1.match.eh4B}{I1}
\rulerCmdUse{rules3.I1.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.HM.match.eh4B}{HM}
\rulerCmdUse{rules3.HM.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.C.match.eh4B}{C}
\rulerCmdUse{rules3.C.match.eh4B.m.var.l1}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.eh4B.m.var.r1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.K.match.eh4B}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.eh4B}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.eh4B.scheme}}{Type alternative related matching (finding possible quantified types)}{rules3.E.match.eh4B}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.eh4Bmeetjoin.m.forall.l2}{%
\rulerCmdUse{rules3.I2.match.all.m.forall.l2}
}

\rulerCmdDef{rules3.I2.match.eh4Bmeetjoin.m.forall.l3}{%
\rulerCmdUse{rules3.I2.match.all.m.forall.l3}
}

\rulerCmdDef{rules3.I2.match.eh4Bmeetjoin.m.alt.l2}{%
\rulerCmdUse{rules3.I2.match.all.m.alt.l2}
}

\rulerCmdDef{rules3.I2.match.eh4Bmeetjoin.m.alt.l3}{%
\rulerCmdUse{rules3.I2.match.all.m.alt.l3}
}

\rulerCmdDef{rules3.HS.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.CG.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.K.match.eh4Bmeetjoin.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.E.match.eh4Bmeetjoin.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.I2.match.eh4Bmeetjoin}{I2}
\rulerCmdUse{rules3.I2.match.eh4Bmeetjoin.m.forall.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4Bmeetjoin.m.forall.l3}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4Bmeetjoin.m.alt.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4Bmeetjoin.m.alt.l3}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.HS.match.eh4Bmeetjoin}{HS}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.NUM.match.eh4Bmeetjoin}{NUM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.MD.match.eh4Bmeetjoin}{MD}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.EP.match.eh4Bmeetjoin}{EP}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.TS.match.eh4Bmeetjoin}{TS}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.P.match.eh4Bmeetjoin}{P}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.CG.match.eh4Bmeetjoin}{CG}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.ANN.match.eh4Bmeetjoin}{ANN}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.DT.match.eh4Bmeetjoin}{DT}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.EX.match.eh4Bmeetjoin}{EX}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.I1.match.eh4Bmeetjoin}{I1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.HM.match.eh4Bmeetjoin}{HM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.C.match.eh4Bmeetjoin}{C}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.K.match.eh4Bmeetjoin}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.eh4Bmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.eh4Bmeetjoin.scheme}}{Type meet/join}{rules3.E.match.eh4Bmeetjoin}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.I2.match.all.m.exists.l}
}

\rulerCmdDef{rules3.I2.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.I2.match.all.m.exists.r}
}

\rulerCmdDef{rules3.HS.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.HS.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.HS.match.all.m.exists.l}
}

\rulerCmdDef{rules3.HS.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.HS.match.all.m.exists.r}
}

\rulerCmdDef{rules3.HS.match.eh4C.m.exists.r2}{%
\rulerCmdUse{rules3.HS.match.all.m.exists.r2}
}

\rulerCmdDef{rules3.NUM.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.NUM.match.all.m.exists.l}
}

\rulerCmdDef{rules3.NUM.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.NUM.match.all.m.exists.r}
}

\rulerCmdDef{rules3.NUM.match.eh4C.m.exists.r2}{%
\rulerCmdUse{rules3.NUM.match.all.m.exists.r2}
}

\rulerCmdDef{rules3.MD.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.MD.match.all.m.exists.l}
}

\rulerCmdDef{rules3.MD.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.MD.match.all.m.exists.r}
}

\rulerCmdDef{rules3.MD.match.eh4C.m.exists.r2}{%
\rulerCmdUse{rules3.MD.match.all.m.exists.r2}
}

\rulerCmdDef{rules3.EP.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.EP.match.all.m.exists.l}
}

\rulerCmdDef{rules3.EP.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.EP.match.all.m.exists.r}
}

\rulerCmdDef{rules3.EP.match.eh4C.m.exists.r2}{%
\rulerCmdUse{rules3.EP.match.all.m.exists.r2}
}

\rulerCmdDef{rules3.TS.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.TS.match.all.m.exists.l}
}

\rulerCmdDef{rules3.TS.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.TS.match.all.m.exists.r}
}

\rulerCmdDef{rules3.TS.match.eh4C.m.exists.r2}{%
\rulerCmdUse{rules3.TS.match.all.m.exists.r2}
}

\rulerCmdDef{rules3.P.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.P.match.all.m.exists.l}
}

\rulerCmdDef{rules3.P.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.P.match.all.m.exists.r}
}

\rulerCmdDef{rules3.P.match.eh4C.m.exists.r2}{%
\rulerCmdUse{rules3.P.match.all.m.exists.r2}
}

\rulerCmdDef{rules3.CG.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.CG.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.CG.match.all.m.exists.l}
}

\rulerCmdDef{rules3.CG.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.CG.match.all.m.exists.r}
}

\rulerCmdDef{rules3.CG.match.eh4C.m.exists.r2}{%
\rulerCmdUse{rules3.CG.match.all.m.exists.r2}
}

\rulerCmdDef{rules3.ANN.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.ANN.match.all.m.exists.l}
}

\rulerCmdDef{rules3.ANN.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.ANN.match.all.m.exists.r}
}

\rulerCmdDef{rules3.ANN.match.eh4C.m.exists.r2}{%
\rulerCmdUse{rules3.ANN.match.all.m.exists.r2}
}

\rulerCmdDef{rules3.DT.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.DT.match.all.m.exists.l}
}

\rulerCmdDef{rules3.DT.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.DT.match.all.m.exists.r}
}

\rulerCmdDef{rules3.DT.match.eh4C.m.exists.r2}{%
\rulerCmdUse{rules3.DT.match.all.m.exists.r2}
}

\rulerCmdDef{rules3.EX.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.EX.match.all.m.exists.l}
}

\rulerCmdDef{rules3.EX.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.EX.match.all.m.exists.r}
}

\rulerCmdDef{rules3.I1.match.eh4C.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.eh4C.m.exists.l}{%
\rulerCmdUse{rules3.I1.match.all.m.exists.l}
}

\rulerCmdDef{rules3.I1.match.eh4C.m.exists.r}{%
\rulerCmdUse{rules3.I1.match.all.m.exists.r}
}

\rulerCmdDef{rules3.HM.match.eh4C.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.eh4C.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.K.match.eh4C.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.E.match.eh4C.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.I2.match.eh4C}{I2}
\rulerCmdUse{rules3.I2.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4C.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.HS.match.eh4C}{HS}
\rulerCmdUse{rules3.HS.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4C.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.eh4C.m.exists.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.NUM.match.eh4C}{NUM}
\rulerCmdUse{rules3.NUM.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4C.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.eh4C.m.exists.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.MD.match.eh4C}{MD}
\rulerCmdUse{rules3.MD.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4C.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.eh4C.m.exists.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.EP.match.eh4C}{EP}
\rulerCmdUse{rules3.EP.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4C.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.eh4C.m.exists.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.TS.match.eh4C}{TS}
\rulerCmdUse{rules3.TS.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4C.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.eh4C.m.exists.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.P.match.eh4C}{P}
\rulerCmdUse{rules3.P.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4C.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.eh4C.m.exists.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.CG.match.eh4C}{CG}
\rulerCmdUse{rules3.CG.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4C.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.eh4C.m.exists.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.ANN.match.eh4C}{ANN}
\rulerCmdUse{rules3.ANN.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4C.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.eh4C.m.exists.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.DT.match.eh4C}{DT}
\rulerCmdUse{rules3.DT.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4C.m.exists.r}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.eh4C.m.exists.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.EX.match.eh4C}{EX}
\rulerCmdUse{rules3.EX.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.eh4C.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.I1.match.eh4C}{I1}
\rulerCmdUse{rules3.I1.match.eh4C.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.eh4C.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.HM.match.eh4C}{HM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.C.match.eh4C}{C}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.K.match.eh4C}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.eh4C}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.eh4C.scheme}}{Type matching (related to |exists|)}{rules3.E.match.eh4C}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.eh4Cmeetjoin.m.exists.l2}{%
\rulerCmdUse{rules3.I2.match.all.m.exists.l2}
}

\rulerCmdDef{rules3.I2.match.eh4Cmeetjoin.m.exists.l3}{%
\rulerCmdUse{rules3.I2.match.all.m.exists.l3}
}

\rulerCmdDef{rules3.HS.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.CG.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.K.match.eh4Cmeetjoin.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.E.match.eh4Cmeetjoin.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.I2.match.eh4Cmeetjoin}{I2}
\rulerCmdUse{rules3.I2.match.eh4Cmeetjoin.m.exists.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.eh4Cmeetjoin.m.exists.l3}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.HS.match.eh4Cmeetjoin}{HS}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.NUM.match.eh4Cmeetjoin}{NUM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.MD.match.eh4Cmeetjoin}{MD}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.EP.match.eh4Cmeetjoin}{EP}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.TS.match.eh4Cmeetjoin}{TS}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.P.match.eh4Cmeetjoin}{P}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.CG.match.eh4Cmeetjoin}{CG}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.ANN.match.eh4Cmeetjoin}{ANN}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.DT.match.eh4Cmeetjoin}{DT}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.EX.match.eh4Cmeetjoin}{EX}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.I1.match.eh4Cmeetjoin}{I1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.HM.match.eh4Cmeetjoin}{HM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.C.match.eh4Cmeetjoin}{C}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.K.match.eh4Cmeetjoin}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.eh4Cmeetjoin}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.eh4Cmeetjoin.scheme}}{Type meet/join (|exists| specific)}{rules3.E.match.eh4Cmeetjoin}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.I2.match.all.m.exists.l}
}

\rulerCmdDef{rules3.I2.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.I2.match.all.m.exists.r}
}

\rulerCmdDef{rules3.HS.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.HS.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.HS.match.all.m.exists.l}
}

\rulerCmdDef{rules3.HS.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.HS.match.all.m.exists.r}
}

\rulerCmdDef{rules3.NUM.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.NUM.match.all.m.exists.l}
}

\rulerCmdDef{rules3.NUM.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.NUM.match.all.m.exists.r}
}

\rulerCmdDef{rules3.MD.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.MD.match.all.m.exists.l}
}

\rulerCmdDef{rules3.MD.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.MD.match.all.m.exists.r}
}

\rulerCmdDef{rules3.EP.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.EP.match.all.m.exists.l}
}

\rulerCmdDef{rules3.EP.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.EP.match.all.m.exists.r}
}

\rulerCmdDef{rules3.TS.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.TS.match.all.m.exists.l}
}

\rulerCmdDef{rules3.TS.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.TS.match.all.m.exists.r}
}

\rulerCmdDef{rules3.P.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.P.match.all.m.exists.l}
}

\rulerCmdDef{rules3.P.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.P.match.all.m.exists.r}
}

\rulerCmdDef{rules3.CG.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.CG.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.CG.match.all.m.exists.l}
}

\rulerCmdDef{rules3.CG.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.CG.match.all.m.exists.r}
}

\rulerCmdDef{rules3.ANN.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.ANN.match.all.m.exists.l}
}

\rulerCmdDef{rules3.ANN.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.ANN.match.all.m.exists.r}
}

\rulerCmdDef{rules3.DT.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.DT.match.all.m.exists.l}
}

\rulerCmdDef{rules3.DT.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.DT.match.all.m.exists.r}
}

\rulerCmdDef{rules3.EX.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.EX.match.all.m.exists.l}
}

\rulerCmdDef{rules3.EX.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.EX.match.all.m.exists.r}
}

\rulerCmdDef{rules3.I1.match.exists.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.exists.m.exists.l}{%
\rulerCmdUse{rules3.I1.match.all.m.exists.l}
}

\rulerCmdDef{rules3.I1.match.exists.m.exists.r}{%
\rulerCmdUse{rules3.I1.match.all.m.exists.r}
}

\rulerCmdDef{rules3.HM.match.exists.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.exists.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.K.match.exists.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.E.match.exists.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.I2.match.exists}{I2}
\rulerCmdUse{rules3.I2.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.HS.match.exists}{HS}
\rulerCmdUse{rules3.HS.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.NUM.match.exists}{NUM}
\rulerCmdUse{rules3.NUM.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.MD.match.exists}{MD}
\rulerCmdUse{rules3.MD.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.EP.match.exists}{EP}
\rulerCmdUse{rules3.EP.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.TS.match.exists}{TS}
\rulerCmdUse{rules3.TS.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.P.match.exists}{P}
\rulerCmdUse{rules3.P.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.CG.match.exists}{CG}
\rulerCmdUse{rules3.CG.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.ANN.match.exists}{ANN}
\rulerCmdUse{rules3.ANN.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.DT.match.exists}{DT}
\rulerCmdUse{rules3.DT.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.EX.match.exists}{EX}
\rulerCmdUse{rules3.EX.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.I1.match.exists}{I1}
\rulerCmdUse{rules3.I1.match.exists.m.exists.l}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.exists.m.exists.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.HM.match.exists}{HM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.C.match.exists}{C}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.K.match.exists}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.exists}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.exists.scheme}}{Type matching (|<=| on |exists|)}{rules3.E.match.exists}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.I2.match.all.m.forall.l}
}

\rulerCmdDef{rules3.I2.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.I2.match.all.m.forall.r}
}

\rulerCmdDef{rules3.HS.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.HS.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.HS.match.all.m.forall.l}
}

\rulerCmdDef{rules3.HS.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.HS.match.all.m.forall.r}
}

\rulerCmdDef{rules3.HS.match.forall.m.forall.r2}{%
\rulerCmdUse{rules3.HS.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.NUM.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.NUM.match.all.m.forall.l}
}

\rulerCmdDef{rules3.NUM.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.NUM.match.all.m.forall.r}
}

\rulerCmdDef{rules3.NUM.match.forall.m.forall.r2}{%
\rulerCmdUse{rules3.NUM.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.MD.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.MD.match.all.m.forall.l}
}

\rulerCmdDef{rules3.MD.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.MD.match.all.m.forall.r}
}

\rulerCmdDef{rules3.MD.match.forall.m.forall.r2}{%
\rulerCmdUse{rules3.MD.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.EP.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.EP.match.all.m.forall.l}
}

\rulerCmdDef{rules3.EP.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.EP.match.all.m.forall.r}
}

\rulerCmdDef{rules3.EP.match.forall.m.forall.r2}{%
\rulerCmdUse{rules3.EP.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.TS.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.TS.match.all.m.forall.l}
}

\rulerCmdDef{rules3.TS.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.TS.match.all.m.forall.r}
}

\rulerCmdDef{rules3.TS.match.forall.m.forall.r2}{%
\rulerCmdUse{rules3.TS.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.P.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.P.match.all.m.forall.l}
}

\rulerCmdDef{rules3.P.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.P.match.all.m.forall.r}
}

\rulerCmdDef{rules3.P.match.forall.m.forall.r2}{%
\rulerCmdUse{rules3.P.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.CG.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.CG.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.CG.match.all.m.forall.l}
}

\rulerCmdDef{rules3.CG.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.CG.match.all.m.forall.r}
}

\rulerCmdDef{rules3.CG.match.forall.m.forall.r2}{%
\rulerCmdUse{rules3.CG.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.ANN.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.ANN.match.all.m.forall.l}
}

\rulerCmdDef{rules3.ANN.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.ANN.match.all.m.forall.r}
}

\rulerCmdDef{rules3.ANN.match.forall.m.forall.r2}{%
\rulerCmdUse{rules3.ANN.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.DT.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.DT.match.all.m.forall.l}
}

\rulerCmdDef{rules3.DT.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.DT.match.all.m.forall.r}
}

\rulerCmdDef{rules3.DT.match.forall.m.forall.r2}{%
\rulerCmdUse{rules3.DT.match.all.m.forall.r2}
}

\rulerCmdDef{rules3.EX.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.EX.match.all.m.forall.l}
}

\rulerCmdDef{rules3.EX.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.EX.match.all.m.forall.r}
}

\rulerCmdDef{rules3.I1.match.forall.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.forall.m.forall.l}{%
\rulerCmdUse{rules3.I1.match.all.m.forall.l}
}

\rulerCmdDef{rules3.I1.match.forall.m.forall.r}{%
\rulerCmdUse{rules3.I1.match.all.m.forall.r}
}

\rulerCmdDef{rules3.HM.match.forall.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.forall.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.K.match.forall.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.E.match.forall.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.I2.match.forall}{I2}
\rulerCmdUse{rules3.I2.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.forall.m.forall.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.HS.match.forall}{HS}
\rulerCmdUse{rules3.HS.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.forall.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.forall.m.forall.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.NUM.match.forall}{NUM}
\rulerCmdUse{rules3.NUM.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.forall.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.forall.m.forall.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.MD.match.forall}{MD}
\rulerCmdUse{rules3.MD.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.forall.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.forall.m.forall.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.EP.match.forall}{EP}
\rulerCmdUse{rules3.EP.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.forall.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.forall.m.forall.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.TS.match.forall}{TS}
\rulerCmdUse{rules3.TS.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.forall.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.forall.m.forall.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.P.match.forall}{P}
\rulerCmdUse{rules3.P.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.forall.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.forall.m.forall.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.CG.match.forall}{CG}
\rulerCmdUse{rules3.CG.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.forall.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.forall.m.forall.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.ANN.match.forall}{ANN}
\rulerCmdUse{rules3.ANN.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.forall.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.forall.m.forall.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.DT.match.forall}{DT}
\rulerCmdUse{rules3.DT.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.forall.m.forall.r}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.forall.m.forall.r2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.EX.match.forall}{EX}
\rulerCmdUse{rules3.EX.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.forall.m.forall.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.I1.match.forall}{I1}
\rulerCmdUse{rules3.I1.match.forall.m.forall.l}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.forall.m.forall.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.HM.match.forall}{HM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.C.match.forall}{C}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.K.match.forall}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.forall}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.forall.scheme}}{Type matching (|<=| on |forall|)}{rules3.E.match.forall}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.join.m.forall.l3}{%
\rulerCmdUse{rules3.I2.match.all.m.forall.l3}
}

\rulerCmdDef{rules3.I2.match.join.m.exists.l3}{%
\rulerCmdUse{rules3.I2.match.all.m.exists.l3}
}

\rulerCmdDef{rules3.HS.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.CG.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.join.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.match.join.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.join.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.K.match.join.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.E.match.join.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.join.scheme}}{Type matching (|<->| specific)}{rules3.I2.match.join}{I2}
\rulerCmdUse{rules3.I2.match.join.m.forall.l3}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.join.m.exists.l3}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.join.scheme}}{Type matching (|<->| specific)}{rules3.HS.match.join}{HS}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.join.scheme}}{Type matching (|<->| specific)}{rules3.NUM.match.join}{NUM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.join.scheme}}{Type matching (|<->| specific)}{rules3.MD.match.join}{MD}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.join.scheme}}{Type matching (|<->| specific)}{rules3.EP.match.join}{EP}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.join.scheme}}{Type matching (|<->| specific)}{rules3.TS.match.join}{TS}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.join.scheme}}{Type matching (|<->| specific)}{rules3.P.match.join}{P}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.join.scheme}}{Type matching (|<->| specific)}{rules3.CG.match.join}{CG}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.join.scheme}}{Type matching (|<->| specific)}{rules3.ANN.match.join}{ANN}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.join.scheme}}{Type matching (|<->| specific)}{rules3.DT.match.join}{DT}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.join.scheme}}{Type matching (|<->| specific)}{rules3.EX.match.join}{EX}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.join.scheme}}{Type matching (|<->| specific)}{rules3.I1.match.join}{I1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.join.scheme}}{Type matching (|<->| specific)}{rules3.HM.match.join}{HM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.join.scheme}}{Type matching (|<->| specific)}{rules3.C.match.join}{C}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.join.scheme}}{Type matching (|<->| specific)}{rules3.K.match.join}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.join}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.join.scheme}}{Type matching (|<->| specific)}{rules3.E.match.join}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.meet.m.forall.l2}{%
\rulerCmdUse{rules3.I2.match.all.m.forall.l2}
}

\rulerCmdDef{rules3.I2.match.meet.m.exists.l2}{%
\rulerCmdUse{rules3.I2.match.all.m.exists.l2}
}

\rulerCmdDef{rules3.HS.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.CG.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.meet.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.match.meet.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.meet.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.K.match.meet.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.E.match.meet.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.I2.match.meet}{I2}
\rulerCmdUse{rules3.I2.match.meet.m.forall.l2}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.meet.m.exists.l2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.HS.match.meet}{HS}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.NUM.match.meet}{NUM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.MD.match.meet}{MD}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.EP.match.meet}{EP}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.TS.match.meet}{TS}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.P.match.meet}{P}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.CG.match.meet}{CG}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.ANN.match.meet}{ANN}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.DT.match.meet}{DT}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.EX.match.meet}{EX}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.I1.match.meet}{I1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.HM.match.meet}{HM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.C.match.meet}{C}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.K.match.meet}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.meet}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.meet.scheme}}{Type matching (|<+>| specific)}{rules3.E.match.meet}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.onlyK.m.con}{%
\rulerCmdUse{rules3.I2.match.all.m.con}
}

\rulerCmdDef{rules3.I2.match.onlyK.m.var}{%
\rulerCmdUse{rules3.I2.match.all.m.var}
}

\rulerCmdDef{rules3.I2.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.I2.match.all.m.arrow}
}

\rulerCmdDef{rules3.I2.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.I2.match.all.m.prod}
}

\rulerCmdDef{rules3.I2.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.I2.match.all.m.any.l}
}

\rulerCmdDef{rules3.I2.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.I2.match.all.m.any.r}
}

\rulerCmdDef{rules3.HS.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.HS.match.onlyK.m.con}{%
\rulerCmdUse{rules3.HS.match.all.m.con}
}

\rulerCmdDef{rules3.HS.match.onlyK.m.var}{%
\rulerCmdUse{rules3.HS.match.all.m.var}
}

\rulerCmdDef{rules3.HS.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.HS.match.all.m.arrow}
}

\rulerCmdDef{rules3.HS.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.HS.match.all.m.prod}
}

\rulerCmdDef{rules3.HS.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.HS.match.all.m.any.l}
}

\rulerCmdDef{rules3.HS.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.HS.match.all.m.any.r}
}

\rulerCmdDef{rules3.NUM.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.onlyK.m.con}{%
\rulerCmdUse{rules3.NUM.match.all.m.con}
}

\rulerCmdDef{rules3.NUM.match.onlyK.m.var}{%
\rulerCmdUse{rules3.NUM.match.all.m.var}
}

\rulerCmdDef{rules3.NUM.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.NUM.match.all.m.arrow}
}

\rulerCmdDef{rules3.NUM.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.NUM.match.all.m.prod}
}

\rulerCmdDef{rules3.NUM.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.NUM.match.all.m.any.l}
}

\rulerCmdDef{rules3.NUM.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.NUM.match.all.m.any.r}
}

\rulerCmdDef{rules3.MD.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.onlyK.m.con}{%
\rulerCmdUse{rules3.MD.match.all.m.con}
}

\rulerCmdDef{rules3.MD.match.onlyK.m.var}{%
\rulerCmdUse{rules3.MD.match.all.m.var}
}

\rulerCmdDef{rules3.MD.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.MD.match.all.m.arrow}
}

\rulerCmdDef{rules3.MD.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.MD.match.all.m.prod}
}

\rulerCmdDef{rules3.MD.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.MD.match.all.m.any.l}
}

\rulerCmdDef{rules3.MD.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.MD.match.all.m.any.r}
}

\rulerCmdDef{rules3.EP.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.onlyK.m.con}{%
\rulerCmdUse{rules3.EP.match.all.m.con}
}

\rulerCmdDef{rules3.EP.match.onlyK.m.var}{%
\rulerCmdUse{rules3.EP.match.all.m.var}
}

\rulerCmdDef{rules3.EP.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.EP.match.all.m.arrow}
}

\rulerCmdDef{rules3.EP.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.EP.match.all.m.prod}
}

\rulerCmdDef{rules3.EP.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.EP.match.all.m.any.l}
}

\rulerCmdDef{rules3.EP.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.EP.match.all.m.any.r}
}

\rulerCmdDef{rules3.TS.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.onlyK.m.con}{%
\rulerCmdUse{rules3.TS.match.all.m.con}
}

\rulerCmdDef{rules3.TS.match.onlyK.m.var}{%
\rulerCmdUse{rules3.TS.match.all.m.var}
}

\rulerCmdDef{rules3.TS.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.TS.match.all.m.arrow}
}

\rulerCmdDef{rules3.TS.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.TS.match.all.m.prod}
}

\rulerCmdDef{rules3.TS.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.TS.match.all.m.any.l}
}

\rulerCmdDef{rules3.TS.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.TS.match.all.m.any.r}
}

\rulerCmdDef{rules3.P.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.onlyK.m.con}{%
\rulerCmdUse{rules3.P.match.all.m.con}
}

\rulerCmdDef{rules3.P.match.onlyK.m.var}{%
\rulerCmdUse{rules3.P.match.all.m.var}
}

\rulerCmdDef{rules3.P.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.P.match.all.m.arrow}
}

\rulerCmdDef{rules3.P.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.P.match.all.m.prod}
}

\rulerCmdDef{rules3.P.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.P.match.all.m.any.l}
}

\rulerCmdDef{rules3.P.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.P.match.all.m.any.r}
}

\rulerCmdDef{rules3.CG.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.CG.match.onlyK.m.con}{%
\rulerCmdUse{rules3.CG.match.all.m.con}
}

\rulerCmdDef{rules3.CG.match.onlyK.m.var}{%
\rulerCmdUse{rules3.CG.match.all.m.var}
}

\rulerCmdDef{rules3.CG.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.CG.match.all.m.arrow}
}

\rulerCmdDef{rules3.CG.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.CG.match.all.m.prod}
}

\rulerCmdDef{rules3.CG.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.CG.match.all.m.any.l}
}

\rulerCmdDef{rules3.CG.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.CG.match.all.m.any.r}
}

\rulerCmdDef{rules3.ANN.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.onlyK.m.con}{%
\rulerCmdUse{rules3.ANN.match.all.m.con}
}

\rulerCmdDef{rules3.ANN.match.onlyK.m.var}{%
\rulerCmdUse{rules3.ANN.match.all.m.var}
}

\rulerCmdDef{rules3.ANN.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.ANN.match.all.m.arrow}
}

\rulerCmdDef{rules3.ANN.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.ANN.match.all.m.prod}
}

\rulerCmdDef{rules3.ANN.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.ANN.match.all.m.any.l}
}

\rulerCmdDef{rules3.ANN.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.ANN.match.all.m.any.r}
}

\rulerCmdDef{rules3.DT.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.onlyK.m.con}{%
\rulerCmdUse{rules3.DT.match.all.m.con}
}

\rulerCmdDef{rules3.DT.match.onlyK.m.var}{%
\rulerCmdUse{rules3.DT.match.all.m.var}
}

\rulerCmdDef{rules3.DT.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.DT.match.all.m.arrow}
}

\rulerCmdDef{rules3.DT.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.DT.match.all.m.prod}
}

\rulerCmdDef{rules3.DT.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.DT.match.all.m.any.l}
}

\rulerCmdDef{rules3.DT.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.DT.match.all.m.any.r}
}

\rulerCmdDef{rules3.EX.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.onlyK.m.con}{%
\rulerCmdUse{rules3.EX.match.all.m.con}
}

\rulerCmdDef{rules3.EX.match.onlyK.m.var}{%
\rulerCmdUse{rules3.EX.match.all.m.var}
}

\rulerCmdDef{rules3.EX.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.EX.match.all.m.arrow}
}

\rulerCmdDef{rules3.EX.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.EX.match.all.m.prod}
}

\rulerCmdDef{rules3.EX.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.EX.match.all.m.any.l}
}

\rulerCmdDef{rules3.EX.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.EX.match.all.m.any.r}
}

\rulerCmdDef{rules3.I1.match.onlyK.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.onlyK.m.con}{%
\rulerCmdUse{rules3.I1.match.all.m.con}
}

\rulerCmdDef{rules3.I1.match.onlyK.m.var}{%
\rulerCmdUse{rules3.I1.match.all.m.var}
}

\rulerCmdDef{rules3.I1.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.I1.match.all.m.arrow}
}

\rulerCmdDef{rules3.I1.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.I1.match.all.m.prod}
}

\rulerCmdDef{rules3.I1.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.I1.match.all.m.any.l}
}

\rulerCmdDef{rules3.I1.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.I1.match.all.m.any.r}
}

\rulerCmdDef{rules3.HM.match.onlyK.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.match.onlyK.m.con}{%
\rulerCmdUse{rules3.HM.match.all.m.con}
}

\rulerCmdDef{rules3.HM.match.onlyK.m.var}{%
\rulerCmdUse{rules3.HM.match.all.m.var}
}

\rulerCmdDef{rules3.HM.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.HM.match.all.m.arrow}
}

\rulerCmdDef{rules3.HM.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.HM.match.all.m.prod}
}

\rulerCmdDef{rules3.HM.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.HM.match.all.m.any.l}
}

\rulerCmdDef{rules3.HM.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.HM.match.all.m.any.r}
}

\rulerCmdDef{rules3.C.match.onlyK.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.onlyK.m.con}{%
\rulerCmdUse{rules3.C.match.all.m.con}
}

\rulerCmdDef{rules3.C.match.onlyK.m.var}{%
\rulerCmdUse{rules3.C.match.all.m.var}
}

\rulerCmdDef{rules3.C.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.C.match.all.m.arrow}
}

\rulerCmdDef{rules3.C.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.C.match.all.m.prod}
}

\rulerCmdDef{rules3.C.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.C.match.all.m.any.l}
}

\rulerCmdDef{rules3.C.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.C.match.all.m.any.r}
}

\rulerCmdDef{rules3.K.match.onlyK.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.K.match.onlyK.m.con}{%
\rulerCmdUse{rules3.K.match.all.m.con}
}

\rulerCmdDef{rules3.K.match.onlyK.m.arrow}{%
\rulerCmdUse{rules3.K.match.all.m.arrow}
}

\rulerCmdDef{rules3.K.match.onlyK.m.prod}{%
\rulerCmdUse{rules3.K.match.all.m.prod}
}

\rulerCmdDef{rules3.K.match.onlyK.m.any.l}{%
\rulerCmdUse{rules3.K.match.all.m.any.l}
}

\rulerCmdDef{rules3.K.match.onlyK.m.any.r}{%
\rulerCmdUse{rules3.K.match.all.m.any.r}
}

\rulerCmdDef{rules3.E.match.onlyK.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.onlyK.scheme}}{Type matching}{rules3.I2.match.onlyK}{I2}
\rulerCmdUse{rules3.I2.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.onlyK.scheme}}{Type matching}{rules3.HS.match.onlyK}{HS}
\rulerCmdUse{rules3.HS.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.HS.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.onlyK.scheme}}{Type matching}{rules3.NUM.match.onlyK}{NUM}
\rulerCmdUse{rules3.NUM.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.onlyK.scheme}}{Type matching}{rules3.MD.match.onlyK}{MD}
\rulerCmdUse{rules3.MD.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.MD.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.onlyK.scheme}}{Type matching}{rules3.EP.match.onlyK}{EP}
\rulerCmdUse{rules3.EP.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.EP.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.onlyK.scheme}}{Type matching}{rules3.TS.match.onlyK}{TS}
\rulerCmdUse{rules3.TS.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.TS.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.onlyK.scheme}}{Type matching}{rules3.P.match.onlyK}{P}
\rulerCmdUse{rules3.P.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.P.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.onlyK.scheme}}{Type matching}{rules3.CG.match.onlyK}{CG}
\rulerCmdUse{rules3.CG.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.CG.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.onlyK.scheme}}{Type matching}{rules3.ANN.match.onlyK}{ANN}
\rulerCmdUse{rules3.ANN.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.onlyK.scheme}}{Type matching}{rules3.DT.match.onlyK}{DT}
\rulerCmdUse{rules3.DT.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.DT.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.onlyK.scheme}}{Type matching}{rules3.EX.match.onlyK}{EX}
\rulerCmdUse{rules3.EX.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.EX.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.onlyK.scheme}}{Type matching}{rules3.I1.match.onlyK}{I1}
\rulerCmdUse{rules3.I1.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.I1.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.onlyK.scheme}}{Type matching}{rules3.HM.match.onlyK}{HM}
\rulerCmdUse{rules3.HM.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.HM.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.onlyK.scheme}}{Type matching}{rules3.C.match.onlyK}{C}
\rulerCmdUse{rules3.C.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.onlyK.m.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.C.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.onlyK.scheme}}{Type matching}{rules3.K.match.onlyK}{K}
\rulerCmdUse{rules3.K.match.onlyK.m.con}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.onlyK.m.arrow}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.onlyK.m.prod}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.onlyK.m.any.l}
\hspace{1ex}
\rulerCmdUse{rules3.K.match.onlyK.m.any.r}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.onlyK}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.onlyK.scheme}}{Type matching}{rules3.E.match.onlyK}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I2.match.tyBt.m.both}{%
\rulerCmdUse{rules3.I2.match.all.m.both}
}

\rulerCmdDef{rules3.I2.match.tyBt.m.both.l1}{%
\rulerCmdUse{rules3.I2.match.all.m.both.l1}
}

\rulerCmdDef{rules3.I2.match.tyBt.m.both.l2}{%
\rulerCmdUse{rules3.I2.match.all.m.both.l2}
}

\rulerCmdDef{rules3.HS.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.NUM.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.MD.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.EP.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.TS.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.P.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp ; Coe | }
}
\rulerCmdDef{rules3.CG.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.ANN.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.DT.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.EX.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.I1.match.tyBt.scheme}{%
\ensuremath{| fiopt ; gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.HM.match.tyBt.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.C.match.tyBt.scheme}{%
\ensuremath{| gVarMp :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma ~> VarMp | }
}
\rulerCmdDef{rules3.K.match.tyBt.scheme}{%
\ensuremath{|  :- | ^{ |  <=>  | } |  sigma | _{ | l | } |   <=>  sigma | _{ | r | } |  : sigma | }
}
\rulerCmdDef{rules3.E.match.tyBt.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.I2.match.tyBt}{I2}
\rulerCmdUse{rules3.I2.match.tyBt.m.both}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.tyBt.m.both.l1}
\hspace{1ex}
\rulerCmdUse{rules3.I2.match.tyBt.m.both.l2}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.HS.match.tyBt}{HS}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.NUM.match.tyBt}{NUM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.MD.match.tyBt}{MD}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.EP.match.tyBt}{EP}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.TS.match.tyBt}{TS}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.P.match.tyBt}{P}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.CG.match.tyBt}{CG}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.ANN.match.tyBt}{ANN}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.DT.match.tyBt}{DT}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.EX.match.tyBt}{EX}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.I1.match.tyBt}{I1}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.HM.match.tyBt}{HM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.C.match.tyBt}{C}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.K.match.tyBt}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.match.tyBt}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.match.tyBt.scheme}}{Type matching (|<=>| on |/=/|)}{rules3.E.match.tyBt}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.I2.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.int}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.char}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.var}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.app}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.HS.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.int}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.char}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.var}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.app}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.NUM.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.int}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.char}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.var}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.app}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.MD.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.int}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.char}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.var}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.app}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.EP.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.int}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.char}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.var}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.app}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.TS.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.int}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.char}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.var}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.app}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.P.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.P.patexpr.base.p.int}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.P.patexpr.base.p.char}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.P.patexpr.base.p.var}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.P.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.P.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.P.patexpr.base.p.app}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.CG.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.int}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.char}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.var}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.app}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.ANN.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.int}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.char}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.var}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.app}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.DT.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.int}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.char}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.var}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.app}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.EX.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.int}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.char}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.var}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.app}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH1.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.I1.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.int}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.char}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.var}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.app}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH1.scheme}{%
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  ; Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.HM.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.int}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.char}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.var}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.app}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH1.scheme}{%
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  ; Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.C.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.C.patexpr.base.p.int}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.C.patexpr.base.p.char}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.C.patexpr.base.p.var}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.C.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.C.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.C.patexpr.base.p.app}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH1.scheme}{%
\ensuremath{| Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : Gamma | }
}
\rulerCmdDef{rules3.K.patexpr.baseForEH1.p.int}{%
\rulerCmdUse{rules3.K.patexpr.base.p.int}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH1.p.char}{%
\rulerCmdUse{rules3.K.patexpr.base.p.char}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH1.p.var}{%
\rulerCmdUse{rules3.K.patexpr.base.p.var}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH1.p.varas}{%
\rulerCmdUse{rules3.K.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH1.p.apptop}{%
\rulerCmdUse{rules3.K.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH1.p.app}{%
\rulerCmdUse{rules3.K.patexpr.base.p.app}
}

\rulerCmdDef{rules3.E.patexpr.baseForEH1.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.I2.patexpr.baseForEH1}{I2}
\rulerCmdUse{rules3.I2.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.HS.patexpr.baseForEH1}{HS}
\rulerCmdUse{rules3.HS.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.NUM.patexpr.baseForEH1}{NUM}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.MD.patexpr.baseForEH1}{MD}
\rulerCmdUse{rules3.MD.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.EP.patexpr.baseForEH1}{EP}
\rulerCmdUse{rules3.EP.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.TS.patexpr.baseForEH1}{TS}
\rulerCmdUse{rules3.TS.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.P.patexpr.baseForEH1}{P}
\rulerCmdUse{rules3.P.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.CG.patexpr.baseForEH1}{CG}
\rulerCmdUse{rules3.CG.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.ANN.patexpr.baseForEH1}{ANN}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.DT.patexpr.baseForEH1}{DT}
\rulerCmdUse{rules3.DT.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.EX.patexpr.baseForEH1}{EX}
\rulerCmdUse{rules3.EX.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.I1.patexpr.baseForEH1}{I1}
\rulerCmdUse{rules3.I1.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.HM.patexpr.baseForEH1}{HM}
\rulerCmdUse{rules3.HM.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.C.patexpr.baseForEH1}{C}
\rulerCmdUse{rules3.C.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.K.patexpr.baseForEH1}{K}
\rulerCmdUse{rules3.K.patexpr.baseForEH1.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.baseForEH1.p.char}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.baseForEH1.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.baseForEH1.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.baseForEH1.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.baseForEH1.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.patexpr.baseForEH1}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.patexpr.baseForEH1.scheme}}{Pattern expression type rules}{rules3.E.patexpr.baseForEH1}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.I2.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.int}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.con}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.var}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.I2.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.app}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.HS.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.int}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.con}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.var}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.HS.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.app}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.NUM.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.int}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.con}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.var}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.NUM.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.app}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.MD.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.int}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.con}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.var}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.MD.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.app}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.EP.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.int}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.con}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.var}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.EP.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.app}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.TS.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.int}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.con}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.var}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.TS.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.app}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.P.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.P.patexpr.base.p.int}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.P.patexpr.base.p.con}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.P.patexpr.base.p.var}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.P.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.P.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.P.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.P.patexpr.base.p.app}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.CG.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.int}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.con}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.var}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.CG.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.app}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.ANN.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.int}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.con}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.var}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.ANN.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.app}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.DT.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.int}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.con}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.var}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.DT.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.app}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.EX.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.int}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.con}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.var}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.EX.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.app}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH2.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.I1.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.int}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.con}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.var}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.I1.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.app}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH2.scheme}{%
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  ; Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.HM.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.int}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.con}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.var}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.HM.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.app}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH2.scheme}{%
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  ; Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.C.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.C.patexpr.base.p.int}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.C.patexpr.base.p.con}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.C.patexpr.base.p.var}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.C.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.C.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.C.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.C.patexpr.base.p.app}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH2.scheme}{%
\ensuremath{| Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : Gamma | }
}
\rulerCmdDef{rules3.K.patexpr.baseForEH2.p.int}{%
\rulerCmdUse{rules3.K.patexpr.base.p.int}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH2.p.con}{%
\rulerCmdUse{rules3.K.patexpr.base.p.con}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH2.p.var}{%
\rulerCmdUse{rules3.K.patexpr.base.p.var}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH2.p.varas}{%
\rulerCmdUse{rules3.K.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH2.p.apptop}{%
\rulerCmdUse{rules3.K.patexpr.base.p.apptop}
}

\rulerCmdDef{rules3.K.patexpr.baseForEH2.p.app}{%
\rulerCmdUse{rules3.K.patexpr.base.p.app}
}

\rulerCmdDef{rules3.E.patexpr.baseForEH2.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.I2.patexpr.baseForEH2}{I2}
\rulerCmdUse{rules3.I2.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.HS.patexpr.baseForEH2}{HS}
\rulerCmdUse{rules3.HS.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.NUM.patexpr.baseForEH2}{NUM}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.MD.patexpr.baseForEH2}{MD}
\rulerCmdUse{rules3.MD.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.EP.patexpr.baseForEH2}{EP}
\rulerCmdUse{rules3.EP.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.TS.patexpr.baseForEH2}{TS}
\rulerCmdUse{rules3.TS.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.P.patexpr.baseForEH2}{P}
\rulerCmdUse{rules3.P.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.CG.patexpr.baseForEH2}{CG}
\rulerCmdUse{rules3.CG.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.ANN.patexpr.baseForEH2}{ANN}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.DT.patexpr.baseForEH2}{DT}
\rulerCmdUse{rules3.DT.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.EX.patexpr.baseForEH2}{EX}
\rulerCmdUse{rules3.EX.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.I1.patexpr.baseForEH2}{I1}
\rulerCmdUse{rules3.I1.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.HM.patexpr.baseForEH2}{HM}
\rulerCmdUse{rules3.HM.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.C.patexpr.baseForEH2}{C}
\rulerCmdUse{rules3.C.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.K.patexpr.baseForEH2}{K}
\rulerCmdUse{rules3.K.patexpr.baseForEH2.p.int}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.baseForEH2.p.con}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.baseForEH2.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.baseForEH2.p.varas}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.baseForEH2.p.apptop}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.baseForEH2.p.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.patexpr.baseForEH2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.patexpr.baseForEH2.scheme}}{Pattern expression type rules}{rules3.E.patexpr.baseForEH2}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.I2.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.var}
}

\rulerCmdDef{rules3.I2.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.I2.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.HS.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.HS.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.var}
}

\rulerCmdDef{rules3.HS.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.HS.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.NUM.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.NUM.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.var}
}

\rulerCmdDef{rules3.NUM.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.NUM.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.MD.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.MD.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.var}
}

\rulerCmdDef{rules3.MD.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.MD.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.EP.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.EP.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.var}
}

\rulerCmdDef{rules3.EP.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.EP.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.TS.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.TS.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.var}
}

\rulerCmdDef{rules3.TS.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.TS.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.P.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.P.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.P.patexpr.base.p.var}
}

\rulerCmdDef{rules3.P.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.P.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.CG.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.CG.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.var}
}

\rulerCmdDef{rules3.CG.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.CG.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.ANN.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.ANN.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.var}
}

\rulerCmdDef{rules3.ANN.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.ANN.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.DT.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.DT.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.var}
}

\rulerCmdDef{rules3.DT.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.DT.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.EX.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.EX.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.var}
}

\rulerCmdDef{rules3.EX.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.EX.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.I1.patexpr.eh4.scheme}{%
\ensuremath{| fiopt ; Gamma | ^{ | k | } |  ; VarMp | _{ | p | }^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.I1.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.var}
}

\rulerCmdDef{rules3.I1.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.I1.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.HM.patexpr.eh4.scheme}{%
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  ; Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.HM.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.var}
}

\rulerCmdDef{rules3.HM.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.HM.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.C.patexpr.eh4.scheme}{%
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  ; Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : sigma ; Gamma ~> VarMp | _{ | p | } |  ; sigma | _{ | pf | } |  | }
}
\rulerCmdDef{rules3.C.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.C.patexpr.base.p.var}
}

\rulerCmdDef{rules3.C.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.C.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.K.patexpr.eh4.scheme}{%
\ensuremath{| Gamma | ^{ | k | } |  ; sigma | ^{ | k | } |  :- | ^{ | p | } |  p : Gamma | }
}
\rulerCmdDef{rules3.K.patexpr.eh4.p.var}{%
\rulerCmdUse{rules3.K.patexpr.base.p.var}
}

\rulerCmdDef{rules3.K.patexpr.eh4.p.varas}{%
\rulerCmdUse{rules3.K.patexpr.base.p.varas}
}

\rulerCmdDef{rules3.E.patexpr.eh4.scheme}{%
\ensuremath{| ?? | }
}
\rulerCmdDef{rules3.I2.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.I2.patexpr.eh4}{I2}
\rulerCmdUse{rules3.I2.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.HS.patexpr.eh4}{HS}
\rulerCmdUse{rules3.HS.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.NUM.patexpr.eh4}{NUM}
\rulerCmdUse{rules3.NUM.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.MD.patexpr.eh4}{MD}
\rulerCmdUse{rules3.MD.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.EP.patexpr.eh4}{EP}
\rulerCmdUse{rules3.EP.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.TS.patexpr.eh4}{TS}
\rulerCmdUse{rules3.TS.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.P.patexpr.eh4}{P}
\rulerCmdUse{rules3.P.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.CG.patexpr.eh4}{CG}
\rulerCmdUse{rules3.CG.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.ANN.patexpr.eh4}{ANN}
\rulerCmdUse{rules3.ANN.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.DT.patexpr.eh4}{DT}
\rulerCmdUse{rules3.DT.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.EX.patexpr.eh4}{EX}
\rulerCmdUse{rules3.EX.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.I1.patexpr.eh4}{I1}
\rulerCmdUse{rules3.I1.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.HM.patexpr.eh4}{HM}
\rulerCmdUse{rules3.HM.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.C.patexpr.eh4}{C}
\rulerCmdUse{rules3.C.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.C.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.K.patexpr.eh4}{K}
\rulerCmdUse{rules3.K.patexpr.eh4.p.var}
\hspace{1ex}
\rulerCmdUse{rules3.K.patexpr.eh4.p.varas}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.patexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.patexpr.eh4.scheme}}{Pattern expression type rules}{rules3.E.patexpr.eh4}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.I2.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.I2.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.HS.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.HS.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.HS.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.NUM.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.NUM.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.NUM.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.MD.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.MD.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.MD.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.EP.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.EP.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.EP.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.TS.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.TS.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.TS.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.P.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.P.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.P.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.CG.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.CG.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.CG.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.ANN.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.ANN.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.ANN.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.DT.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.DT.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.DT.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.EX.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.EX.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.EX.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.I1.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.I1.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.I1.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.HM.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.HM.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.HM.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.C.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.C.tyexpr.eh2.t.wild}{%
\rulerCmdUse{rules3.C.tyexpr.base.t.wild}
}

\rulerCmdDef{rules3.K.tyexpr.eh2.scheme}{%
\ensuremath{| TGamma :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.E.tyexpr.eh2.scheme}{%
\ensuremath{|  :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.I2.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.I2.tyexpr.eh2}{I2}
\rulerCmdUse{rules3.I2.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.HS.tyexpr.eh2}{HS}
\rulerCmdUse{rules3.HS.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.NUM.tyexpr.eh2}{NUM}
\rulerCmdUse{rules3.NUM.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.MD.tyexpr.eh2}{MD}
\rulerCmdUse{rules3.MD.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.EP.tyexpr.eh2}{EP}
\rulerCmdUse{rules3.EP.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.TS.tyexpr.eh2}{TS}
\rulerCmdUse{rules3.TS.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.P.tyexpr.eh2}{P}
\rulerCmdUse{rules3.P.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.CG.tyexpr.eh2}{CG}
\rulerCmdUse{rules3.CG.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.ANN.tyexpr.eh2}{ANN}
\rulerCmdUse{rules3.ANN.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.DT.tyexpr.eh2}{DT}
\rulerCmdUse{rules3.DT.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.EX.tyexpr.eh2}{EX}
\rulerCmdUse{rules3.EX.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.I1.tyexpr.eh2}{I1}
\rulerCmdUse{rules3.I1.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.HM.tyexpr.eh2}{HM}
\rulerCmdUse{rules3.HM.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.C.tyexpr.eh2}{C}
\rulerCmdUse{rules3.C.tyexpr.eh2.t.wild}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.K.tyexpr.eh2}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.tyexpr.eh2}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.tyexpr.eh2.scheme}}{Type expression type rules}{rules3.E.tyexpr.eh2}{E}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.I2.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.I2.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.I2.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.I2.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.I2.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.I2.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.I2.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.I2.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.HS.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.HS.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.HS.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.HS.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.HS.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.HS.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.HS.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.HS.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.HS.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.NUM.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.NUM.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.NUM.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.NUM.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.NUM.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.NUM.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.NUM.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.NUM.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.NUM.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.MD.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.MD.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.MD.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.MD.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.MD.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.MD.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.MD.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.MD.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.MD.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.EP.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.EP.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.EP.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.EP.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.EP.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.EP.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.EP.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.EP.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.EP.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.TS.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.TS.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.TS.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.TS.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.TS.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.TS.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.TS.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.TS.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.TS.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.P.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.P.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.P.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.P.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.P.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.P.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.P.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.P.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.P.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.CG.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.CG.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.CG.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.CG.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.CG.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.CG.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.CG.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.CG.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.CG.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.ANN.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.ANN.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.ANN.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.ANN.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.ANN.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.ANN.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.ANN.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.ANN.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.ANN.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.DT.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.DT.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.DT.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.DT.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.DT.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.DT.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.DT.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.DT.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.DT.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.EX.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.EX.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.EX.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.EX.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.EX.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.EX.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.EX.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.EX.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.EX.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.I1.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.I1.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.I1.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.I1.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.I1.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.I1.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.I1.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.I1.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.I1.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.HM.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.HM.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.HM.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.HM.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.HM.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.HM.tyexpr.eh3.t.var}{%
\rulerCmdUse{rules3.HM.tyexpr.base.t.var}
}

\rulerCmdDef{rules3.HM.tyexpr.eh3.t.var.w}{%
\rulerCmdUse{rules3.HM.tyexpr.base.t.var.w}
}

\rulerCmdDef{rules3.C.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.C.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.C.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.C.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.C.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.K.tyexpr.eh3.scheme}{%
\ensuremath{| TGamma :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.K.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.K.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.K.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.K.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.E.tyexpr.eh3.scheme}{%
\ensuremath{|  :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.E.tyexpr.eh3.t.con}{%
\rulerCmdUse{rules3.E.tyexpr.base.t.con}
}

\rulerCmdDef{rules3.E.tyexpr.eh3.t.app}{%
\rulerCmdUse{rules3.E.tyexpr.base.t.app}
}

\rulerCmdDef{rules3.I2.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.I2.tyexpr.eh3}{I2}
\rulerCmdUse{rules3.I2.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.I2.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.HS.tyexpr.eh3}{HS}
\rulerCmdUse{rules3.HS.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.HS.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.NUM.tyexpr.eh3}{NUM}
\rulerCmdUse{rules3.NUM.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.NUM.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.MD.tyexpr.eh3}{MD}
\rulerCmdUse{rules3.MD.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.MD.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.EP.tyexpr.eh3}{EP}
\rulerCmdUse{rules3.EP.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.EP.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.TS.tyexpr.eh3}{TS}
\rulerCmdUse{rules3.TS.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.TS.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.P.tyexpr.eh3}{P}
\rulerCmdUse{rules3.P.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.P.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.CG.tyexpr.eh3}{CG}
\rulerCmdUse{rules3.CG.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.CG.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.ANN.tyexpr.eh3}{ANN}
\rulerCmdUse{rules3.ANN.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.ANN.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.DT.tyexpr.eh3}{DT}
\rulerCmdUse{rules3.DT.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.DT.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.EX.tyexpr.eh3}{EX}
\rulerCmdUse{rules3.EX.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.EX.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.EX.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.EX.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.I1.tyexpr.eh3}{I1}
\rulerCmdUse{rules3.I1.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.I1.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.I1.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.I1.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.HM.tyexpr.eh3}{HM}
\rulerCmdUse{rules3.HM.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.HM.tyexpr.eh3.t.app}
\hspace{1ex}
\rulerCmdUse{rules3.HM.tyexpr.eh3.t.var}
\hspace{1ex}
\rulerCmdUse{rules3.HM.tyexpr.eh3.t.var.w}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.C.tyexpr.eh3}{C}
\rulerCmdUse{rules3.C.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.C.tyexpr.eh3.t.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.K.tyexpr.eh3}{K}
\rulerCmdUse{rules3.K.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.K.tyexpr.eh3.t.app}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.tyexpr.eh3}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.tyexpr.eh3.scheme}}{Type expression type rules}{rules3.E.tyexpr.eh3}{E}
\rulerCmdUse{rules3.E.tyexpr.eh3.t.con}
\hspace{1ex}
\rulerCmdUse{rules3.E.tyexpr.eh3.t.app}
\end{rulerRulesetFigure}
}

\rulerCmdDef{rules3.I2.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.I2.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.I2.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.HS.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.HS.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.HS.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.NUM.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.NUM.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.NUM.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.MD.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.MD.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.MD.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.EP.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.EP.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.EP.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.TS.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.TS.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.TS.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.P.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.P.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.P.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.CG.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.CG.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.CG.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.ANN.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.ANN.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.ANN.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.DT.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.DT.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.DT.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.EX.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.EX.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.EX.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.I1.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.I1.tyexpr.eh4.t.quant}{%
\rulerCmdUse{rules3.I1.tyexpr.base.t.quant}
}

\rulerCmdDef{rules3.HM.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma | ^{ | k | } |  :- | ^{ | t | } |  t : sigma ~> TGamma ;  | \overline{ | tvarv | _{ | w | }} |  | }
}
\rulerCmdDef{rules3.C.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.K.tyexpr.eh4.scheme}{%
\ensuremath{| TGamma :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.E.tyexpr.eh4.scheme}{%
\ensuremath{|  :- | ^{ | t | } |  t : sigma | }
}
\rulerCmdDef{rules3.I2.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I2.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.I2.tyexpr.eh4}{I2}
\rulerCmdUse{rules3.I2.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HS.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HS.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.HS.tyexpr.eh4}{HS}
\rulerCmdUse{rules3.HS.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.NUM.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.NUM.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.NUM.tyexpr.eh4}{NUM}
\rulerCmdUse{rules3.NUM.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.MD.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.MD.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.MD.tyexpr.eh4}{MD}
\rulerCmdUse{rules3.MD.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EP.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EP.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.EP.tyexpr.eh4}{EP}
\rulerCmdUse{rules3.EP.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.TS.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.TS.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.TS.tyexpr.eh4}{TS}
\rulerCmdUse{rules3.TS.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.P.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.P.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.P.tyexpr.eh4}{P}
\rulerCmdUse{rules3.P.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.CG.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.CG.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.CG.tyexpr.eh4}{CG}
\rulerCmdUse{rules3.CG.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.ANN.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.ANN.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.ANN.tyexpr.eh4}{ANN}
\rulerCmdUse{rules3.ANN.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.DT.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.DT.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.DT.tyexpr.eh4}{DT}
\rulerCmdUse{rules3.DT.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.EX.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.EX.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.EX.tyexpr.eh4}{EX}
\rulerCmdUse{rules3.EX.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.I1.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.I1.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.I1.tyexpr.eh4}{I1}
\rulerCmdUse{rules3.I1.tyexpr.eh4.t.quant}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.HM.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.HM.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.HM.tyexpr.eh4}{HM}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.C.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.C.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.C.tyexpr.eh4}{C}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.K.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.K.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.K.tyexpr.eh4}{K}
\end{rulerRulesetFigure}
}
\rulerCmdDef{rules3.E.tyexpr.eh4}{%
\begin{rulerRulesetFigure}{\rulerCmdUse{rules3.E.tyexpr.eh4.scheme}}{Type expression type rules}{rules3.E.tyexpr.eh4}{E}
\end{rulerRulesetFigure}
}

