%%[ANN.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[C.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[CG.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[DT.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[EP.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[EX.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[HM.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[HS.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[I1.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[I2.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[K.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[MD.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[NUM.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[P.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]

%%[TS.fit.fit
fit [fit : (src/ehc/rules/EhcRulesOrig.rul:2424,8),fit]
  ---
%%]


%%[I2.join.join
join [join : (src/ehc/rules/EhcRulesOrig.rul:2450,8),join]
  ---
%%]


%%[I2.meet.meet
meet [meet : (src/ehc/rules/EhcRulesOrig.rul:2471,8),meet]
  ---
%%]


%%[I2.tyAltTyElim.ty.ae.alts
ty.ae.alts [ty : (src/ehc/rules/EhcRulesOrig.rul:1828,8),ty.ae.alts]
  ---
%%]

%%[I2.tyAltTyElim.ty.ae.var
ty.ae.var [ty : (src/ehc/rules/EhcRulesOrig.rul:1844,8),ty.ae.var]
  ---
%%]

%%[I2.tyAltTyElim.ty.ae.ty
ty.ae.ty [ty : (src/ehc/rules/EhcRulesOrig.rul:1851,8),ty.ae.ty]
  ---
%%]

%%[I2.tyAltTyElim.ty.ae.arrow
ty.ae.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:1856,8),ty.ae.arrow]
  ---
%%]


%%[I2.tyBtTyElim.ty.eb.any
ty.eb.any [ty : (src/ehc/rules/EhcRulesOrig.rul:1903,8),ty.eb.any]
  ---
%%]

%%[I2.tyBtTyElim.ty.eb.var
ty.eb.var [ty : (src/ehc/rules/EhcRulesOrig.rul:1909,8),ty.eb.var]
  ---
%%]

%%[I2.tyBtTyElim.ty.eb.ty
ty.eb.ty [ty : (src/ehc/rules/EhcRulesOrig.rul:1916,8),ty.eb.ty]
  ---
%%]


%%[I2.valElimExprAlts.g.ae.cons
g.ae.cons [g : (src/ehc/rules/EhcRulesOrig.rul:1880,8),g.ae.cons]
  ---
%%]


%%[ANN.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[ANN.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[C.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[C.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[CG.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[CG.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[DT.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[DT.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[E.decl.d.sig.val
d.sig.val [d : (src/ehc/rules/EhcRulesOrig.rul:1330,8),d.sig.val]
  ---
%%]

%%[EP.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[EP.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[EX.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[EX.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[HM.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[HM.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[HS.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[HS.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[I1.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[I1.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[I2.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[I2.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[K.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[K.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[MD.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[MD.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[NUM.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[NUM.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[P.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[P.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]

%%[TS.decl.d.tysig
d.tysig [d : (src/ehc/rules/EhcRulesOrig.rul:1291,8),TySig]
  ---
%%]

%%[TS.decl.d.val
d.val [d : (src/ehc/rules/EhcRulesOrig.rul:1337,8),Val]
  ---
%%]


%%[ANN.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[ANN.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[ANN.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[ANN.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[ANN.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[ANN.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[ANN.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[ANN.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[ANN.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[ANN.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[ANN.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[ANN.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[C.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[C.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[C.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[C.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[C.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[C.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[C.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[C.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[C.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[C.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[C.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[CG.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[CG.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[CG.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[CG.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[CG.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[CG.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[CG.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[CG.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[CG.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[CG.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[CG.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[CG.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[DT.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[DT.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[DT.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[DT.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[DT.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[DT.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[DT.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[DT.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[DT.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[DT.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[DT.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[DT.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[E.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[E.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[E.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[E.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[E.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[E.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[E.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[E.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[E.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[EP.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[EP.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[EP.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[EP.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[EP.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[EP.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[EP.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[EP.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[EP.expr.e.iapp
e.iapp [e : (src/ehc/rules/EhcRulesOrig.rul:823,8),AppImpl]
  ---
%%]

%%[EP.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[EP.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[EP.expr.e.ilam
e.ilam [e : (src/ehc/rules/EhcRulesOrig.rul:1025,8),LamImpl]
  ---
%%]

%%[EP.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[EP.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[EX.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[EX.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[EX.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[EX.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[EX.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[EX.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[EX.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[EX.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[EX.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[EX.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[EX.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[EX.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[HM.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[HM.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[HM.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[HM.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[HM.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[HM.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[HM.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[HM.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[HM.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[HM.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[HM.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[HS.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[HS.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[HS.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[HS.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[HS.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[HS.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[HS.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[HS.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[HS.expr.e.iapp
e.iapp [e : (src/ehc/rules/EhcRulesOrig.rul:823,8),AppImpl]
  ---
%%]

%%[HS.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[HS.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[HS.expr.e.ilam
e.ilam [e : (src/ehc/rules/EhcRulesOrig.rul:1025,8),LamImpl]
  ---
%%]

%%[HS.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[HS.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[I1.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[I1.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[I1.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[I1.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[I1.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[I1.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[I1.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[I1.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[I1.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[I1.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[I1.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[I1.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[I2.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[I2.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[I2.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[I2.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[I2.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[I2.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[I2.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[I2.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[I2.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[I2.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[I2.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[I2.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[K.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[K.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[K.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[K.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[K.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[K.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[K.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[K.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[K.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[K.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[MD.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[MD.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[MD.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[MD.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[MD.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[MD.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[MD.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[MD.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[MD.expr.e.iapp
e.iapp [e : (src/ehc/rules/EhcRulesOrig.rul:823,8),AppImpl]
  ---
%%]

%%[MD.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[MD.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[MD.expr.e.ilam
e.ilam [e : (src/ehc/rules/EhcRulesOrig.rul:1025,8),LamImpl]
  ---
%%]

%%[MD.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[MD.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[NUM.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[NUM.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[NUM.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[NUM.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[NUM.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[NUM.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[NUM.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[NUM.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[NUM.expr.e.iapp
e.iapp [e : (src/ehc/rules/EhcRulesOrig.rul:823,8),AppImpl]
  ---
%%]

%%[NUM.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[NUM.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[NUM.expr.e.ilam
e.ilam [e : (src/ehc/rules/EhcRulesOrig.rul:1025,8),LamImpl]
  ---
%%]

%%[NUM.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[NUM.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[P.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[P.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[P.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[P.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[P.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[P.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[P.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[P.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[P.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[P.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[P.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[P.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]

%%[TS.expr.e.int
e.int [e : (src/ehc/rules/EhcRulesOrig.rul:446,8),IConst]
  ---
%%]

%%[TS.expr.e.char
e.char [e : (src/ehc/rules/EhcRulesOrig.rul:488,8),CConst]
  ---
%%]

%%[TS.expr.e.str
e.str [e : (src/ehc/rules/EhcRulesOrig.rul:518,8),SConst]
  ---
%%]

%%[TS.expr.e.iint
e.iint [e : (src/ehc/rules/EhcRulesOrig.rul:584,8),IIConst]
  ---
%%]

%%[TS.expr.e.var
e.var [e : (src/ehc/rules/EhcRulesOrig.rul:614,8),Var]
  ---
%%]

%%[TS.expr.e.con
e.con [e : (src/ehc/rules/EhcRulesOrig.rul:675,8),Con]
  ---
%%]

%%[TS.expr.e.app
e.app [e : (src/ehc/rules/EhcRulesOrig.rul:726,8),App]
  ---
%%]

%%[TS.expr.e.app.f
e.app.f [e : (src/ehc/rules/EhcRulesOrig.rul:811,8),AppImpred]
  ---
%%]

%%[TS.expr.e.apptop
e.apptop [e : (src/ehc/rules/EhcRulesOrig.rul:835,8),AppTop]
  ---
%%]

%%[TS.expr.e.lam
e.lam [e : (src/ehc/rules/EhcRulesOrig.rul:863,8),Lam]
  ---
%%]

%%[TS.expr.e.let
e.let [e : (src/ehc/rules/EhcRulesOrig.rul:1045,8),Let]
  ---
%%]

%%[TS.expr.e.ann
e.ann [e : (src/ehc/rules/EhcRulesOrig.rul:1134,8),TypeAs]
  ---
%%]


%%[E.expr.e.prod
e.prod [e : (src/ehc/rules/EhcRulesOrig.rul:1211,8),e.prod]
  ---
%%]

%%[E.expr.e.pred
e.pred [e : (src/ehc/rules/EhcRulesOrig.rul:1226,8),e.pred]
  ---
%%]

%%[K.expr.e.prod
e.prod [e : (src/ehc/rules/EhcRulesOrig.rul:1211,8),e.prod]
  ---
%%]

%%[K.expr.e.pred
e.pred [e : (src/ehc/rules/EhcRulesOrig.rul:1226,8),e.pred]
  ---
%%]


%%[ANN.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[ANN.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[ANN.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[ANN.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[ANN.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[ANN.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[ANN.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[ANN.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[ANN.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[ANN.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[ANN.match.m.forall.r2
m.forall.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2198,8),m.forall.r2]
  ---
%%]

%%[ANN.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[ANN.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[ANN.match.m.exists.r2
m.exists.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2224,8),m.exists.r2]
  ---
%%]

%%[ANN.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[ANN.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[C.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[C.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[C.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[C.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[C.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[C.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[C.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[C.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[CG.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[CG.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[CG.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[CG.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[CG.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[CG.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[CG.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[CG.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[CG.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[CG.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[CG.match.m.forall.r2
m.forall.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2198,8),m.forall.r2]
  ---
%%]

%%[CG.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[CG.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[CG.match.m.exists.r2
m.exists.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2224,8),m.exists.r2]
  ---
%%]

%%[CG.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[CG.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[DT.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[DT.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[DT.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[DT.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[DT.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[DT.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[DT.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[DT.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[DT.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[DT.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[DT.match.m.forall.r2
m.forall.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2198,8),m.forall.r2]
  ---
%%]

%%[DT.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[DT.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[DT.match.m.exists.r2
m.exists.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2224,8),m.exists.r2]
  ---
%%]

%%[DT.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[DT.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[EP.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[EP.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[EP.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[EP.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[EP.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[EP.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[EP.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[EP.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[EP.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[EP.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[EP.match.m.forall.r2
m.forall.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2198,8),m.forall.r2]
  ---
%%]

%%[EP.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[EP.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[EP.match.m.exists.r2
m.exists.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2224,8),m.exists.r2]
  ---
%%]

%%[EP.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[EP.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[EX.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[EX.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[EX.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[EX.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[EX.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[EX.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[EX.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[EX.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[EX.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[EX.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[EX.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[EX.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[EX.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[EX.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[HM.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[HM.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[HM.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[HM.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[HM.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[HM.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[HM.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[HM.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[HS.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[HS.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[HS.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[HS.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[HS.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[HS.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[HS.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[HS.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[HS.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[HS.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[HS.match.m.forall.r2
m.forall.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2198,8),m.forall.r2]
  ---
%%]

%%[HS.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[HS.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[HS.match.m.exists.r2
m.exists.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2224,8),m.exists.r2]
  ---
%%]

%%[HS.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[HS.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[I1.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[I1.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[I1.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[I1.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[I1.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[I1.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[I1.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[I1.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[I1.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[I1.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[I1.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[I1.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[I1.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[I1.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[I2.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[I2.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[I2.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[I2.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[I2.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[I2.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[I2.match.m.var.l3
m.var.l3 [m : (src/ehc/rules/EhcRulesOrig.rul:2117,8),m.var.l3]
  ---
%%]

%%[I2.match.m.var.l4
m.var.l4 [m : (src/ehc/rules/EhcRulesOrig.rul:2126,8),m.var.l4]
  ---
%%]

%%[I2.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[I2.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[I2.match.m.var.r3
m.var.r3 [m : (src/ehc/rules/EhcRulesOrig.rul:2159,8),m.var.r3]
  ---
%%]

%%[I2.match.m.var.r4
m.var.r4 [m : (src/ehc/rules/EhcRulesOrig.rul:2175,8),m.var.r4]
  ---
%%]

%%[I2.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[I2.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[I2.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[I2.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[I2.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[I2.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[I2.match.m.alt
m.alt [m : (src/ehc/rules/EhcRulesOrig.rul:2278,8),m.alt]
  ---
%%]

%%[I2.match.m.alt.l1
m.alt.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2285,8),m.alt.l1]
  ---
%%]

%%[I2.match.m.alt.r1
m.alt.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2292,8),m.alt.r1]
  ---
%%]

%%[I2.match.m.forall.l2
m.forall.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2304,8),m.forall.l2]
  ---
%%]

%%[I2.match.m.exists.l2
m.exists.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2312,8),m.exists.l2]
  ---
%%]

%%[I2.match.m.forall.l3
m.forall.l3 [m : (src/ehc/rules/EhcRulesOrig.rul:2320,8),m.forall.l3]
  ---
%%]

%%[I2.match.m.exists.l3
m.exists.l3 [m : (src/ehc/rules/EhcRulesOrig.rul:2329,8),m.exists.l3]
  ---
%%]

%%[I2.match.m.both
m.both [m : (src/ehc/rules/EhcRulesOrig.rul:2338,8),m.both]
  ---
%%]

%%[I2.match.m.both.l1
m.both.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2345,8),m.both.l1]
  ---
%%]

%%[I2.match.m.both.l2
m.both.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2351,8),m.both.l2]
  ---
%%]

%%[I2.match.m.alt.l2
m.alt.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2358,8),m.alt.l2]
  ---
%%]

%%[I2.match.m.alt.l3
m.alt.l3 [m : (src/ehc/rules/EhcRulesOrig.rul:2366,8),m.alt.l3]
  ---
%%]

%%[K.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[K.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[K.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[K.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[K.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[MD.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[MD.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[MD.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[MD.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[MD.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[MD.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[MD.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[MD.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[MD.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[MD.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[MD.match.m.forall.r2
m.forall.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2198,8),m.forall.r2]
  ---
%%]

%%[MD.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[MD.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[MD.match.m.exists.r2
m.exists.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2224,8),m.exists.r2]
  ---
%%]

%%[MD.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[MD.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[NUM.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[NUM.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[NUM.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[NUM.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[NUM.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[NUM.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[NUM.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[NUM.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[NUM.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[NUM.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[NUM.match.m.forall.r2
m.forall.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2198,8),m.forall.r2]
  ---
%%]

%%[NUM.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[NUM.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[NUM.match.m.exists.r2
m.exists.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2224,8),m.exists.r2]
  ---
%%]

%%[NUM.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[NUM.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[P.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[P.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[P.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[P.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[P.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[P.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[P.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[P.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[P.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[P.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[P.match.m.forall.r2
m.forall.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2198,8),m.forall.r2]
  ---
%%]

%%[P.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[P.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[P.match.m.exists.r2
m.exists.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2224,8),m.exists.r2]
  ---
%%]

%%[P.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[P.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]

%%[TS.match.m.any.l
m.any.l [m : (src/ehc/rules/EhcRulesOrig.rul:2035,8),m.any.l]
  ---
%%]

%%[TS.match.m.any.r
m.any.r [m : (src/ehc/rules/EhcRulesOrig.rul:2050,8),m.any.r]
  ---
%%]

%%[TS.match.m.con
m.con [m : (src/ehc/rules/EhcRulesOrig.rul:2065,8),m.con]
  ---
%%]

%%[TS.match.m.var
m.var [m : (src/ehc/rules/EhcRulesOrig.rul:2081,8),m.var]
  ---
%%]

%%[TS.match.m.var.l1
m.var.l1 [m : (src/ehc/rules/EhcRulesOrig.rul:2092,8),m.var.l1]
  ---
%%]

%%[TS.match.m.var.l2
m.var.l2 [m : (src/ehc/rules/EhcRulesOrig.rul:2109,8),m.var.l2]
  ---
%%]

%%[TS.match.m.var.r1
m.var.r1 [m : (src/ehc/rules/EhcRulesOrig.rul:2131,8),m.var.r1]
  ---
%%]

%%[TS.match.m.var.r2
m.var.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2146,8),m.var.r2]
  ---
%%]

%%[TS.match.m.forall.l
m.forall.l [m : (src/ehc/rules/EhcRulesOrig.rul:2181,8),m.forall.l]
  ---
%%]

%%[TS.match.m.forall.r
m.forall.r [m : (src/ehc/rules/EhcRulesOrig.rul:2188,8),m.forall.r]
  ---
%%]

%%[TS.match.m.forall.r2
m.forall.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2198,8),m.forall.r2]
  ---
%%]

%%[TS.match.m.exists.l
m.exists.l [m : (src/ehc/rules/EhcRulesOrig.rul:2206,8),m.exists.l]
  ---
%%]

%%[TS.match.m.exists.r
m.exists.r [m : (src/ehc/rules/EhcRulesOrig.rul:2213,8),m.exists.r]
  ---
%%]

%%[TS.match.m.exists.r2
m.exists.r2 [m : (src/ehc/rules/EhcRulesOrig.rul:2224,8),m.exists.r2]
  ---
%%]

%%[TS.match.m.arrow
m.arrow [m : (src/ehc/rules/EhcRulesOrig.rul:2232,8),m.arrow]
  ---
%%]

%%[TS.match.m.prod
m.prod [m : (src/ehc/rules/EhcRulesOrig.rul:2259,8),m.prod]
  ---
%%]


%%[ANN.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[ANN.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[ANN.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[ANN.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[ANN.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[ANN.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[ANN.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[ANN.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[ANN.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]

%%[C.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[C.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[C.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[C.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[C.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[C.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[C.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[C.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[CG.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[CG.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[CG.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[CG.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[CG.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[CG.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[CG.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[CG.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[CG.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]

%%[DT.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[DT.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[DT.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[DT.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[DT.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[DT.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[DT.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[DT.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[DT.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]

%%[EP.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[EP.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[EP.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[EP.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[EP.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[EP.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[EP.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[EP.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[EP.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]

%%[EX.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[EX.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[EX.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[EX.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[EX.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[EX.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[EX.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[EX.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[EX.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]

%%[HM.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[HM.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[HM.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[HM.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[HM.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[HM.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[HM.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[HM.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[HS.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[HS.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[HS.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[HS.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[HS.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[HS.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[HS.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[HS.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[HS.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]

%%[I1.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[I1.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[I1.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[I1.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[I1.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[I1.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[I1.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[I1.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[I1.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]

%%[I2.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[I2.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[I2.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[I2.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[I2.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[I2.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[I2.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[I2.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[I2.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]

%%[K.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[K.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[K.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[K.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[K.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[K.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[K.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[K.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[MD.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[MD.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[MD.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[MD.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[MD.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[MD.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[MD.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[MD.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[MD.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]

%%[NUM.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[NUM.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[NUM.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[NUM.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[NUM.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[NUM.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[NUM.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[NUM.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[NUM.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]

%%[P.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[P.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[P.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[P.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[P.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[P.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[P.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[P.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[P.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]

%%[TS.patexpr.p.int
p.int [p : (src/ehc/rules/EhcRulesOrig.rul:1455,8),IConst]
  ---
%%]

%%[TS.patexpr.p.char
p.char [p : (src/ehc/rules/EhcRulesOrig.rul:1477,8),CConst]
  ---
%%]

%%[TS.patexpr.p.str
p.str [p : (src/ehc/rules/EhcRulesOrig.rul:1490,8),SConst]
  ---
%%]

%%[TS.patexpr.p.con
p.con [p : (src/ehc/rules/EhcRulesOrig.rul:1524,8),Con]
  ---
%%]

%%[TS.patexpr.p.var
p.var [p : (src/ehc/rules/EhcRulesOrig.rul:1554,8),Var]
  ---
%%]

%%[TS.patexpr.p.varas
p.varas [p : (src/ehc/rules/EhcRulesOrig.rul:1583,8),VarAs]
  ---
%%]

%%[TS.patexpr.p.apptop
p.apptop [p : (src/ehc/rules/EhcRulesOrig.rul:1621,8),AppTop]
  ---
%%]

%%[TS.patexpr.p.app
p.app [p : (src/ehc/rules/EhcRulesOrig.rul:1649,8),App]
  ---
%%]

%%[TS.patexpr.p.ann
p.ann [p : (src/ehc/rules/EhcRulesOrig.rul:1677,8),TypeAs]
  ---
%%]


%%[ANN.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[ANN.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[ANN.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[ANN.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[ANN.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[ANN.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]

%%[C.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[C.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[C.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[CG.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[CG.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[CG.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[CG.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[CG.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[CG.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]

%%[DT.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[DT.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[DT.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[DT.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[DT.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[DT.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]

%%[E.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[E.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[EP.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[EP.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[EP.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[EP.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[EP.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[EP.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]

%%[EX.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[EX.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[EX.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[EX.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[EX.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[EX.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]

%%[HM.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[HM.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[HM.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[HM.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[HM.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[HS.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[HS.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[HS.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[HS.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[HS.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[HS.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]

%%[I1.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[I1.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[I1.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[I1.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[I1.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[I1.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]

%%[I2.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[I2.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[I2.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[I2.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[I2.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[I2.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]

%%[K.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[K.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[MD.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[MD.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[MD.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[MD.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[MD.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[MD.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]

%%[NUM.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[NUM.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[NUM.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[NUM.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[NUM.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[NUM.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]

%%[P.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[P.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[P.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[P.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[P.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[P.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]

%%[TS.tyexpr.t.con
t.con [t : (src/ehc/rules/EhcRulesOrig.rul:1724,8),Con]
  ---
%%]

%%[TS.tyexpr.t.app
t.app [t : (src/ehc/rules/EhcRulesOrig.rul:1741,8),App]
  ---
%%]

%%[TS.tyexpr.t.wild
t.wild [t : (src/ehc/rules/EhcRulesOrig.rul:1760,8),Wild]
  ---
%%]

%%[TS.tyexpr.t.var
t.var [t : (src/ehc/rules/EhcRulesOrig.rul:1771,8),Var]
  ---
%%]

%%[TS.tyexpr.t.var.w
t.var.w [t : (src/ehc/rules/EhcRulesOrig.rul:1777,8),VarWild]
  ---
%%]

%%[TS.tyexpr.t.quant
t.quant [t : (src/ehc/rules/EhcRulesOrig.rul:1784,8),Quant]
  ---
%%]


%%[ANN.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[ANN.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[ANN.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[ANN.tyqu.ty.qu.app
ty.qu.app [ty : (src/ehc/rules/EhcRulesOrig.rul:2829,8),ty.qu.app]
  ---
%%]

%%[ANN.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]

%%[CG.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[CG.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[CG.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[CG.tyqu.ty.qu.app
ty.qu.app [ty : (src/ehc/rules/EhcRulesOrig.rul:2829,8),ty.qu.app]
  ---
%%]

%%[CG.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]

%%[DT.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[DT.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[DT.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[DT.tyqu.ty.qu.app
ty.qu.app [ty : (src/ehc/rules/EhcRulesOrig.rul:2829,8),ty.qu.app]
  ---
%%]

%%[DT.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]

%%[EP.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[EP.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[EP.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[EP.tyqu.ty.qu.app
ty.qu.app [ty : (src/ehc/rules/EhcRulesOrig.rul:2829,8),ty.qu.app]
  ---
%%]

%%[EP.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]

%%[EX.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[EX.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[EX.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[EX.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]

%%[HS.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[HS.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[HS.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[HS.tyqu.ty.qu.app
ty.qu.app [ty : (src/ehc/rules/EhcRulesOrig.rul:2829,8),ty.qu.app]
  ---
%%]

%%[HS.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]

%%[I1.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[I1.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[I1.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[I1.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]

%%[I2.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[I2.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[I2.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[I2.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]

%%[MD.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[MD.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[MD.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[MD.tyqu.ty.qu.app
ty.qu.app [ty : (src/ehc/rules/EhcRulesOrig.rul:2829,8),ty.qu.app]
  ---
%%]

%%[MD.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]

%%[NUM.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[NUM.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[NUM.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[NUM.tyqu.ty.qu.app
ty.qu.app [ty : (src/ehc/rules/EhcRulesOrig.rul:2829,8),ty.qu.app]
  ---
%%]

%%[NUM.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]

%%[P.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[P.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[P.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[P.tyqu.ty.qu.app
ty.qu.app [ty : (src/ehc/rules/EhcRulesOrig.rul:2829,8),ty.qu.app]
  ---
%%]

%%[P.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]

%%[TS.tyqu.ty.qu.var
ty.qu.var [ty : (src/ehc/rules/EhcRulesOrig.rul:2806,8),ty.qu.var]
  ---
%%]

%%[TS.tyqu.ty.qu.arrow
ty.qu.arrow [ty : (src/ehc/rules/EhcRulesOrig.rul:2813,8),ty.qu.arrow]
  ---
%%]

%%[TS.tyqu.ty.qu.prod
ty.qu.prod [ty : (src/ehc/rules/EhcRulesOrig.rul:2821,8),ty.qu.prod]
  ---
%%]

%%[TS.tyqu.ty.qu.app
ty.qu.app [ty : (src/ehc/rules/EhcRulesOrig.rul:2829,8),ty.qu.app]
  ---
%%]

%%[TS.tyqu.ty.qu.quant
ty.qu.quant [ty : (src/ehc/rules/EhcRulesOrig.rul:2839,8),ty.qu.quant]
  ---
%%]


%%[annotateTyExp.ANN.explain.holes
%%]

%%[annotateTyExp.C.explain.holes
%%]

%%[annotateTyExp.CG.explain.holes
%%]

%%[annotateTyExp.DT.explain.holes
%%]

%%[annotateTyExp.E.explain.holes
%%]

%%[annotateTyExp.EP.explain.holes
%%]

%%[annotateTyExp.EX.explain.holes
%%]

%%[annotateTyExp.HM.explain.holes
%%]

%%[annotateTyExp.HS.explain.holes
%%]

%%[annotateTyExp.I1.explain.holes
%%]

%%[annotateTyExp.I2.explain.holes
%%]

%%[annotateTyExp.K.explain.holes
%%]

%%[annotateTyExp.MD.explain.holes
%%]

%%[annotateTyExp.NUM.explain.holes
%%]

%%[annotateTyExp.P.explain.holes
%%]

%%[annotateTyExp.TS.explain.holes
%%]

%%[annotateTyRef.ANN.explain.holes
%%]

%%[annotateTyRef.C.explain.holes
%%]

%%[annotateTyRef.CG.explain.holes
%%]

%%[annotateTyRef.DT.explain.holes
%%]

%%[annotateTyRef.E.explain.holes
%%]

%%[annotateTyRef.EP.explain.holes
%%]

%%[annotateTyRef.EX.explain.holes
%%]

%%[annotateTyRef.HM.explain.holes
%%]

%%[annotateTyRef.HS.explain.holes
%%]

%%[annotateTyRef.I1.explain.holes
%%]

%%[annotateTyRef.I2.explain.holes
%%]

%%[annotateTyRef.K.explain.holes
%%]

%%[annotateTyRef.MD.explain.holes
%%]

%%[annotateTyRef.NUM.explain.holes
%%]

%%[annotateTyRef.P.explain.holes
%%]

%%[annotateTyRef.TS.explain.holes
%%]

%%[bind1PatIdToTy.ANN.explain.holes
%%]

%%[bind1PatIdToTy.C.explain.holes
%%]

%%[bind1PatIdToTy.CG.explain.holes
%%]

%%[bind1PatIdToTy.DT.explain.holes
%%]

%%[bind1PatIdToTy.E.explain.holes
%%]

%%[bind1PatIdToTy.EP.explain.holes
%%]

%%[bind1PatIdToTy.EX.explain.holes
%%]

%%[bind1PatIdToTy.HM.explain.holes
%%]

%%[bind1PatIdToTy.HS.explain.holes
%%]

%%[bind1PatIdToTy.I1.explain.holes
%%]

%%[bind1PatIdToTy.I2.explain.holes
%%]

%%[bind1PatIdToTy.K.explain.holes
%%]

%%[bind1PatIdToTy.MD.explain.holes
%%]

%%[bind1PatIdToTy.NUM.explain.holes
%%]

%%[bind1PatIdToTy.P.explain.holes
%%]

%%[bind1PatIdToTy.TS.explain.holes
%%]

%%[bind1PredToTy.ANN.explain.holes
%%]

%%[bind1PredToTy.C.explain.holes
%%]

%%[bind1PredToTy.CG.explain.holes
%%]

%%[bind1PredToTy.DT.explain.holes
%%]

%%[bind1PredToTy.E.explain.holes
%%]

%%[bind1PredToTy.EP.explain.holes
%%]

%%[bind1PredToTy.EX.explain.holes
%%]

%%[bind1PredToTy.HM.explain.holes
%%]

%%[bind1PredToTy.HS.explain.holes
%%]

%%[bind1PredToTy.I1.explain.holes
%%]

%%[bind1PredToTy.I2.explain.holes
%%]

%%[bind1PredToTy.K.explain.holes
%%]

%%[bind1PredToTy.MD.explain.holes
%%]

%%[bind1PredToTy.NUM.explain.holes
%%]

%%[bind1PredToTy.P.explain.holes
%%]

%%[bind1PredToTy.TS.explain.holes
%%]

%%[bind1TyIdToTy.ANN.explain.holes
%%]

%%[bind1TyIdToTy.C.explain.holes
%%]

%%[bind1TyIdToTy.CG.explain.holes
%%]

%%[bind1TyIdToTy.DT.explain.holes
%%]

%%[bind1TyIdToTy.E.explain.holes
%%]

%%[bind1TyIdToTy.EP.explain.holes
%%]

%%[bind1TyIdToTy.EX.explain.holes
%%]

%%[bind1TyIdToTy.HM.explain.holes
%%]

%%[bind1TyIdToTy.HS.explain.holes
%%]

%%[bind1TyIdToTy.I1.explain.holes
%%]

%%[bind1TyIdToTy.I2.explain.holes
%%]

%%[bind1TyIdToTy.K.explain.holes
%%]

%%[bind1TyIdToTy.MD.explain.holes
%%]

%%[bind1TyIdToTy.NUM.explain.holes
%%]

%%[bind1TyIdToTy.P.explain.holes
%%]

%%[bind1TyIdToTy.TS.explain.holes
%%]

%%[bind1TyVarToTy.ANN.explain.holes
%%]

%%[bind1TyVarToTy.C.explain.holes
%%]

%%[bind1TyVarToTy.CG.explain.holes
%%]

%%[bind1TyVarToTy.DT.explain.holes
%%]

%%[bind1TyVarToTy.E.explain.holes
%%]

%%[bind1TyVarToTy.EP.explain.holes
%%]

%%[bind1TyVarToTy.EX.explain.holes
%%]

%%[bind1TyVarToTy.HM.explain.holes
%%]

%%[bind1TyVarToTy.HS.explain.holes
%%]

%%[bind1TyVarToTy.I1.explain.holes
%%]

%%[bind1TyVarToTy.I2.explain.holes
%%]

%%[bind1TyVarToTy.K.explain.holes
%%]

%%[bind1TyVarToTy.MD.explain.holes
%%]

%%[bind1TyVarToTy.NUM.explain.holes
%%]

%%[bind1TyVarToTy.P.explain.holes
%%]

%%[bind1TyVarToTy.TS.explain.holes
%%]

%%[bind1ValIdToTy.ANN.explain.holes
%%]

%%[bind1ValIdToTy.C.explain.holes
%%]

%%[bind1ValIdToTy.CG.explain.holes
%%]

%%[bind1ValIdToTy.DT.explain.holes
%%]

%%[bind1ValIdToTy.E.explain.holes
%%]

%%[bind1ValIdToTy.EP.explain.holes
%%]

%%[bind1ValIdToTy.EX.explain.holes
%%]

%%[bind1ValIdToTy.HM.explain.holes
%%]

%%[bind1ValIdToTy.HS.explain.holes
%%]

%%[bind1ValIdToTy.I1.explain.holes
%%]

%%[bind1ValIdToTy.I2.explain.holes
%%]

%%[bind1ValIdToTy.K.explain.holes
%%]

%%[bind1ValIdToTy.MD.explain.holes
%%]

%%[bind1ValIdToTy.NUM.explain.holes
%%]

%%[bind1ValIdToTy.P.explain.holes
%%]

%%[bind1ValIdToTy.TS.explain.holes
%%]

%%[bind2TyVarToTy.ANN.explain.holes
%%]

%%[bind2TyVarToTy.C.explain.holes
%%]

%%[bind2TyVarToTy.CG.explain.holes
%%]

%%[bind2TyVarToTy.DT.explain.holes
%%]

%%[bind2TyVarToTy.E.explain.holes
%%]

%%[bind2TyVarToTy.EP.explain.holes
%%]

%%[bind2TyVarToTy.EX.explain.holes
%%]

%%[bind2TyVarToTy.HM.explain.holes
%%]

%%[bind2TyVarToTy.HS.explain.holes
%%]

%%[bind2TyVarToTy.I1.explain.holes
%%]

%%[bind2TyVarToTy.I2.explain.holes
%%]

%%[bind2TyVarToTy.K.explain.holes
%%]

%%[bind2TyVarToTy.MD.explain.holes
%%]

%%[bind2TyVarToTy.NUM.explain.holes
%%]

%%[bind2TyVarToTy.P.explain.holes
%%]

%%[bind2TyVarToTy.TS.explain.holes
%%]

%%[bindDelTyVarIds.ANN.explain.holes
%%]

%%[bindDelTyVarIds.C.explain.holes
%%]

%%[bindDelTyVarIds.CG.explain.holes
%%]

%%[bindDelTyVarIds.DT.explain.holes
%%]

%%[bindDelTyVarIds.E.explain.holes
%%]

%%[bindDelTyVarIds.EP.explain.holes
%%]

%%[bindDelTyVarIds.EX.explain.holes
%%]

%%[bindDelTyVarIds.HM.explain.holes
%%]

%%[bindDelTyVarIds.HS.explain.holes
%%]

%%[bindDelTyVarIds.I1.explain.holes
%%]

%%[bindDelTyVarIds.I2.explain.holes
%%]

%%[bindDelTyVarIds.K.explain.holes
%%]

%%[bindDelTyVarIds.MD.explain.holes
%%]

%%[bindDelTyVarIds.NUM.explain.holes
%%]

%%[bindDelTyVarIds.P.explain.holes
%%]

%%[bindDelTyVarIds.TS.explain.holes
%%]

%%[chkProdArity.ANN.explain.holes
%%]

%%[chkProdArity.C.explain.holes
%%]

%%[chkProdArity.CG.explain.holes
%%]

%%[chkProdArity.DT.explain.holes
%%]

%%[chkProdArity.E.explain.holes
%%]

%%[chkProdArity.EP.explain.holes
%%]

%%[chkProdArity.EX.explain.holes
%%]

%%[chkProdArity.HM.explain.holes
%%]

%%[chkProdArity.HS.explain.holes
%%]

%%[chkProdArity.I1.explain.holes
%%]

%%[chkProdArity.I2.explain.holes
%%]

%%[chkProdArity.K.explain.holes
%%]

%%[chkProdArity.MD.explain.holes
%%]

%%[chkProdArity.NUM.explain.holes
%%]

%%[chkProdArity.P.explain.holes
%%]

%%[chkProdArity.TS.explain.holes
%%]

%%[chooseKnownOrOther.ANN.explain.holes
%%]

%%[chooseKnownOrOther.C.explain.holes
%%]

%%[chooseKnownOrOther.CG.explain.holes
%%]

%%[chooseKnownOrOther.DT.explain.holes
%%]

%%[chooseKnownOrOther.E.explain.holes
%%]

%%[chooseKnownOrOther.EP.explain.holes
%%]

%%[chooseKnownOrOther.EX.explain.holes
%%]

%%[chooseKnownOrOther.HM.explain.holes
%%]

%%[chooseKnownOrOther.HS.explain.holes
%%]

%%[chooseKnownOrOther.I1.explain.holes
%%]

%%[chooseKnownOrOther.I2.explain.holes
%%]

%%[chooseKnownOrOther.K.explain.holes
%%]

%%[chooseKnownOrOther.MD.explain.holes
%%]

%%[chooseKnownOrOther.NUM.explain.holes
%%]

%%[chooseKnownOrOther.P.explain.holes
%%]

%%[chooseKnownOrOther.TS.explain.holes
%%]

%%[createUID.ANN.explain.holes
%%]

%%[createUID.C.explain.holes
%%]

%%[createUID.CG.explain.holes
%%]

%%[createUID.DT.explain.holes
%%]

%%[createUID.E.explain.holes
%%]

%%[createUID.EP.explain.holes
%%]

%%[createUID.EX.explain.holes
%%]

%%[createUID.HM.explain.holes
%%]

%%[createUID.HS.explain.holes
%%]

%%[createUID.I1.explain.holes
%%]

%%[createUID.I2.explain.holes
%%]

%%[createUID.K.explain.holes
%%]

%%[createUID.MD.explain.holes
%%]

%%[createUID.NUM.explain.holes
%%]

%%[createUID.P.explain.holes
%%]

%%[createUID.TS.explain.holes
%%]

%%[decl.ANN.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.ANN.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.C.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.C.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.CG.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.CG.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.DT.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.DT.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.E.explain.scheme
Within environment \ensuremath{| Gamma |}, declaration \ensuremath{| d |} has type signature bindings \ensuremath{| Gamma | _{ | t | } |  |}.
%%]

%%[decl.E.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with type signature bindings \\
\ensuremath{| Gamma |} & Environment with known bindings \\
%%]

%%[decl.EP.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.EP.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.EX.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.EX.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.HM.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.HM.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.HS.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.HS.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.I1.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.I1.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.I2.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.I2.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| IVarMp | ^{ | k | } |  |} & Known/gathered constraints during quantifier propagation \\
\ensuremath{| IVarMp |} & \ensuremath{| IVarMp | ^{ | k | } |  |}+ new constraints \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | _{ | t | }^{ | k | } |  |} & Type signature information represented as constraint for binding to type variable in \ensuremath{| Gamma | _{ | t | } |  |} \\
\ensuremath{| VarMp | _{ | t | } |  |} & \ensuremath{| VarMp | _{ | t | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.K.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}.
%%]

%%[decl.K.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
%%]

%%[decl.MD.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.MD.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.NUM.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.NUM.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.P.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.P.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[decl.TS.explain.scheme
Declaration \ensuremath{| d |} has explicit type bindings \ensuremath{| Gamma | _{ | t | } |  |}, within explicit bindings \ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} and implicit type bindings \ensuremath{| VarMp | _{ | p | }^{ | k | } |  Gamma | _{ | p | }^{ | k | } |  |}, and type checks within \ensuremath{| VarMp | ^{ | k | } |  Gamma |}, yielding additional bindings \ensuremath{| Gamma | _{ | p | } |  |}, under constraints \ensuremath{| VarMp | _{ | p | } |  |} (for \ensuremath{| Gamma | _{ | p | } |  |}) and \ensuremath{| VarMp |} (for \ensuremath{| Gamma |}).
%%]

%%[decl.TS.explain.holes
\ensuremath{| d |} & Declaration \\
\ensuremath{| Gamma | _{ | t | } |  |} & Environment with new type signature bindings \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma | _{ | t | }^{ | k | } |  |} & Collected \ensuremath{| Gamma | _{ | t | } |  |}, used by patterns to extract bindings for pattern variables \\
\ensuremath{| Gamma |} & Environment with known bindings \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Known/gathered constraints during type inference of patterns (i. e. use of type signatures and pattern structure) \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | _{ | p | }^{ | k | } |  |} & Known/gathered pattern variable bindings \\
\ensuremath{| Gamma | _{ | p | } |  |} & \ensuremath{| Gamma | _{ | p | }^{ | k | } |  |}+ new bindings \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Known/gathered constraints during type inference of expressions bound to patterns \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[elemCoCoS.ANN.explain.holes
%%]

%%[elemCoCoS.C.explain.holes
%%]

%%[elemCoCoS.CG.explain.holes
%%]

%%[elemCoCoS.DT.explain.holes
%%]

%%[elemCoCoS.E.explain.holes
%%]

%%[elemCoCoS.EP.explain.holes
%%]

%%[elemCoCoS.EX.explain.holes
%%]

%%[elemCoCoS.HM.explain.holes
%%]

%%[elemCoCoS.HS.explain.holes
%%]

%%[elemCoCoS.I1.explain.holes
%%]

%%[elemCoCoS.I2.explain.holes
%%]

%%[elemCoCoS.K.explain.holes
%%]

%%[elemCoCoS.MD.explain.holes
%%]

%%[elemCoCoS.NUM.explain.holes
%%]

%%[elemCoCoS.P.explain.holes
%%]

%%[elemCoCoS.TS.explain.holes
%%]

%%[elemTyVarIdS.ANN.explain.holes
%%]

%%[elemTyVarIdS.C.explain.holes
%%]

%%[elemTyVarIdS.CG.explain.holes
%%]

%%[elemTyVarIdS.DT.explain.holes
%%]

%%[elemTyVarIdS.E.explain.holes
%%]

%%[elemTyVarIdS.EP.explain.holes
%%]

%%[elemTyVarIdS.EX.explain.holes
%%]

%%[elemTyVarIdS.HM.explain.holes
%%]

%%[elemTyVarIdS.HS.explain.holes
%%]

%%[elemTyVarIdS.I1.explain.holes
%%]

%%[elemTyVarIdS.I2.explain.holes
%%]

%%[elemTyVarIdS.K.explain.holes
%%]

%%[elemTyVarIdS.MD.explain.holes
%%]

%%[elemTyVarIdS.NUM.explain.holes
%%]

%%[elemTyVarIdS.P.explain.holes
%%]

%%[elemTyVarIdS.TS.explain.holes
%%]

%%[eqLRTy.ANN.explain.holes
%%]

%%[eqLRTy.C.explain.holes
%%]

%%[eqLRTy.CG.explain.holes
%%]

%%[eqLRTy.DT.explain.holes
%%]

%%[eqLRTy.E.explain.holes
%%]

%%[eqLRTy.EP.explain.holes
%%]

%%[eqLRTy.EX.explain.holes
%%]

%%[eqLRTy.HM.explain.holes
%%]

%%[eqLRTy.HS.explain.holes
%%]

%%[eqLRTy.I1.explain.holes
%%]

%%[eqLRTy.I2.explain.holes
%%]

%%[eqLRTy.K.explain.holes
%%]

%%[eqLRTy.MD.explain.holes
%%]

%%[eqLRTy.NUM.explain.holes
%%]

%%[eqLRTy.P.explain.holes
%%]

%%[eqLRTy.TS.explain.holes
%%]

%%[eqRLTy.ANN.explain.holes
%%]

%%[eqRLTy.C.explain.holes
%%]

%%[eqRLTy.CG.explain.holes
%%]

%%[eqRLTy.DT.explain.holes
%%]

%%[eqRLTy.E.explain.holes
%%]

%%[eqRLTy.EP.explain.holes
%%]

%%[eqRLTy.EX.explain.holes
%%]

%%[eqRLTy.HM.explain.holes
%%]

%%[eqRLTy.HS.explain.holes
%%]

%%[eqRLTy.I1.explain.holes
%%]

%%[eqRLTy.I2.explain.holes
%%]

%%[eqRLTy.K.explain.holes
%%]

%%[eqRLTy.MD.explain.holes
%%]

%%[eqRLTy.NUM.explain.holes
%%]

%%[eqRLTy.P.explain.holes
%%]

%%[eqRLTy.TS.explain.holes
%%]

%%[eqRLVarMp.ANN.explain.holes
%%]

%%[eqRLVarMp.C.explain.holes
%%]

%%[eqRLVarMp.CG.explain.holes
%%]

%%[eqRLVarMp.DT.explain.holes
%%]

%%[eqRLVarMp.E.explain.holes
%%]

%%[eqRLVarMp.EP.explain.holes
%%]

%%[eqRLVarMp.EX.explain.holes
%%]

%%[eqRLVarMp.HM.explain.holes
%%]

%%[eqRLVarMp.HS.explain.holes
%%]

%%[eqRLVarMp.I1.explain.holes
%%]

%%[eqRLVarMp.I2.explain.holes
%%]

%%[eqRLVarMp.K.explain.holes
%%]

%%[eqRLVarMp.MD.explain.holes
%%]

%%[eqRLVarMp.NUM.explain.holes
%%]

%%[eqRLVarMp.P.explain.holes
%%]

%%[eqRLVarMp.TS.explain.holes
%%]

%%[eqTy.ANN.explain.holes
%%]

%%[eqTy.C.explain.holes
%%]

%%[eqTy.CG.explain.holes
%%]

%%[eqTy.DT.explain.holes
%%]

%%[eqTy.E.explain.holes
%%]

%%[eqTy.EP.explain.holes
%%]

%%[eqTy.EX.explain.holes
%%]

%%[eqTy.HM.explain.holes
%%]

%%[eqTy.HS.explain.holes
%%]

%%[eqTy.I1.explain.holes
%%]

%%[eqTy.I2.explain.holes
%%]

%%[eqTy.K.explain.holes
%%]

%%[eqTy.MD.explain.holes
%%]

%%[eqTy.NUM.explain.holes
%%]

%%[eqTy.P.explain.holes
%%]

%%[eqTy.TS.explain.holes
%%]

%%[expr.ANN.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.ANN.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.C.explain.scheme
Within environment \ensuremath{| Gamma |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.C.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.CG.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.CG.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| Transl |} & Translated expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.DT.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.DT.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.E.explain.scheme
Within environment \ensuremath{| Gamma |}, expression \ensuremath{| e |} has type \ensuremath{| sigma |}.
%%]

%%[expr.E.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
%%]

%%[expr.EP.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.EP.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| Transl |} & Translated expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.EX.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.EX.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.HM.explain.scheme
Within environment \ensuremath{| Gamma |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.HM.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.HS.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.HS.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| Transl |} & Translated expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.I1.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.I1.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.I2.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the types of expression \ensuremath{| e |} to be \ensuremath{| IVarMp | ^{ | k | } |  sigma | ^{ | k | } |  |} (and \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}), \ensuremath{| e |} has type \ensuremath{| isigma |} (and \ensuremath{| sigma |}), under constraints \ensuremath{| IVarMp |} (and \ensuremath{| VarMp |}).
%%]

%%[expr.I2.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| isigma |} & Type (with type alternatives \ensuremath{| talt |}) of expression (for quantifier propagation) \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| IVarMp | ^{ | k | } |  |} & Already known constraints (for quantifier propagation) \\
\ensuremath{| IVarMp |} & \ensuremath{| IVarMp | ^{ | k | } |  |}+ new constraints (for quantifier propagation) \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.K.explain.scheme
Within environment \ensuremath{| Gamma |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}.
%%]

%%[expr.K.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
%%]

%%[expr.MD.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.MD.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| Transl |} & Translated expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.NUM.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.NUM.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| Transl |} & Translated expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.P.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.P.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| Transl |} & Translated expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[expr.TS.explain.scheme
Within environment \ensuremath{| Gamma |} and context \ensuremath{| fiopt |}, expecting the type of expression \ensuremath{| e |} to be \ensuremath{| VarMp | ^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| e |} has type \ensuremath{| sigma |}, under constraints \ensuremath{| VarMp |}.
%%]

%%[expr.TS.explain.holes
\ensuremath{| e |} & Expression \\
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Expected/known type of expression \\
\ensuremath{| Transl |} & Translated expression \\
\ensuremath{| sigma |} & Type of expression \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers, cannot be modified (hence treated as a global constant in \ruleRef{e.ann}) \\
\ensuremath{| Gamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for value identifiers \\
\ensuremath{| VarMp | ^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp |} & \ensuremath{| VarMp | ^{ | k | } |  |}+ new constraints \\
%%]

%%[fioptHasOpt.ANN.explain.holes
%%]

%%[fioptHasOpt.C.explain.holes
%%]

%%[fioptHasOpt.CG.explain.holes
%%]

%%[fioptHasOpt.DT.explain.holes
%%]

%%[fioptHasOpt.E.explain.holes
%%]

%%[fioptHasOpt.EP.explain.holes
%%]

%%[fioptHasOpt.EX.explain.holes
%%]

%%[fioptHasOpt.HM.explain.holes
%%]

%%[fioptHasOpt.HS.explain.holes
%%]

%%[fioptHasOpt.I1.explain.holes
%%]

%%[fioptHasOpt.I2.explain.holes
%%]

%%[fioptHasOpt.K.explain.holes
%%]

%%[fioptHasOpt.MD.explain.holes
%%]

%%[fioptHasOpt.NUM.explain.holes
%%]

%%[fioptHasOpt.P.explain.holes
%%]

%%[fioptHasOpt.TS.explain.holes
%%]

%%[fioptMkNeed.ANN.explain.holes
%%]

%%[fioptMkNeed.C.explain.holes
%%]

%%[fioptMkNeed.CG.explain.holes
%%]

%%[fioptMkNeed.DT.explain.holes
%%]

%%[fioptMkNeed.E.explain.holes
%%]

%%[fioptMkNeed.EP.explain.holes
%%]

%%[fioptMkNeed.EX.explain.holes
%%]

%%[fioptMkNeed.HM.explain.holes
%%]

%%[fioptMkNeed.HS.explain.holes
%%]

%%[fioptMkNeed.I1.explain.holes
%%]

%%[fioptMkNeed.I2.explain.holes
%%]

%%[fioptMkNeed.K.explain.holes
%%]

%%[fioptMkNeed.MD.explain.holes
%%]

%%[fioptMkNeed.NUM.explain.holes
%%]

%%[fioptMkNeed.P.explain.holes
%%]

%%[fioptMkNeed.TS.explain.holes
%%]

%%[fioptSwapMeetJoin.ANN.explain.holes
%%]

%%[fioptSwapMeetJoin.C.explain.holes
%%]

%%[fioptSwapMeetJoin.CG.explain.holes
%%]

%%[fioptSwapMeetJoin.DT.explain.holes
%%]

%%[fioptSwapMeetJoin.E.explain.holes
%%]

%%[fioptSwapMeetJoin.EP.explain.holes
%%]

%%[fioptSwapMeetJoin.EX.explain.holes
%%]

%%[fioptSwapMeetJoin.HM.explain.holes
%%]

%%[fioptSwapMeetJoin.HS.explain.holes
%%]

%%[fioptSwapMeetJoin.I1.explain.holes
%%]

%%[fioptSwapMeetJoin.I2.explain.holes
%%]

%%[fioptSwapMeetJoin.K.explain.holes
%%]

%%[fioptSwapMeetJoin.MD.explain.holes
%%]

%%[fioptSwapMeetJoin.NUM.explain.holes
%%]

%%[fioptSwapMeetJoin.P.explain.holes
%%]

%%[fioptSwapMeetJoin.TS.explain.holes
%%]

%%[fit.ANN.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.ANN.explain.holes
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}, where quantifiers in \ensuremath{| sigma | _{ | r | } |  |} may be left instantiated in \ensuremath{| sigma |} (depending on \ensuremath{| fiopt |}) \\
%%]

%%[fit.C.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.C.explain.holes
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |} \\
%%]

%%[fit.CG.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.CG.explain.holes
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}, where quantifiers in \ensuremath{| sigma | _{ | r | } |  |} may be left instantiated in \ensuremath{| sigma |} (depending on \ensuremath{| fiopt |}) \\
%%]

%%[fit.DT.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.DT.explain.holes
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}, where quantifiers in \ensuremath{| sigma | _{ | r | } |  |} may be left instantiated in \ensuremath{| sigma |} (depending on \ensuremath{| fiopt |}) \\
%%]

%%[fit.E.explain.holes
%%]

%%[fit.EP.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.EP.explain.holes
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=  |} to hold \\
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}, where quantifiers in \ensuremath{| sigma | _{ | r | } |  |} may be left instantiated in \ensuremath{| sigma |} (depending on \ensuremath{| fiopt |}) \\
%%]

%%[fit.EX.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.EX.explain.holes
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}, where quantifiers in \ensuremath{| sigma | _{ | r | } |  |} may be left instantiated in \ensuremath{| sigma |} (depending on \ensuremath{| fiopt |}) \\
%%]

%%[fit.HM.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.HM.explain.holes
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |} \\
%%]

%%[fit.HS.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.HS.explain.holes
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=  |} to hold \\
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}, where quantifiers in \ensuremath{| sigma | _{ | r | } |  |} may be left instantiated in \ensuremath{| sigma |} (depending on \ensuremath{| fiopt |}) \\
%%]

%%[fit.I1.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.I1.explain.holes
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |} \\
%%]

%%[fit.I2.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.I2.explain.holes
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |} \\
%%]

%%[fit.K.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.K.explain.holes
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & Result type, (in general) equals \ensuremath{| sigma | _{ | r | } |  |}, but differs slightly in later versions \\
%%]

%%[fit.MD.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.MD.explain.holes
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=  |} to hold \\
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}, where quantifiers in \ensuremath{| sigma | _{ | r | } |  |} may be left instantiated in \ensuremath{| sigma |} (depending on \ensuremath{| fiopt |}) \\
%%]

%%[fit.NUM.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.NUM.explain.holes
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=  |} to hold \\
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}, where quantifiers in \ensuremath{| sigma | _{ | r | } |  |} may be left instantiated in \ensuremath{| sigma |} (depending on \ensuremath{| fiopt |}) \\
%%]

%%[fit.P.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.P.explain.holes
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=  |} to hold \\
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}, where quantifiers in \ensuremath{| sigma | _{ | r | } |  |} may be left instantiated in \ensuremath{| sigma |} (depending on \ensuremath{| fiopt |}) \\
%%]

%%[fit.TS.explain.scheme
\ensuremath{|  <=  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[fit.TS.explain.holes
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=  |} to hold \\
\ensuremath{| fiopt |} & Options to \ensuremath{|  <=>  |} \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to fit in \ensuremath{| sigma | _{ | r | } |  |} \\
\ensuremath{| sigma | _{ | r | } |  |} & Type in which \ensuremath{| sigma | _{ | l | } |  |} must fit \\
\ensuremath{| sigma |} & \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}, where quantifiers in \ensuremath{| sigma | _{ | r | } |  |} may be left instantiated in \ensuremath{| sigma |} (depending on \ensuremath{| fiopt |}) \\
%%]

%%[ftv.ANN.explain.holes
%%]

%%[ftv.C.explain.holes
%%]

%%[ftv.CG.explain.holes
%%]

%%[ftv.DT.explain.holes
%%]

%%[ftv.E.explain.holes
%%]

%%[ftv.EP.explain.holes
%%]

%%[ftv.EX.explain.holes
%%]

%%[ftv.HM.explain.holes
%%]

%%[ftv.HS.explain.holes
%%]

%%[ftv.I1.explain.holes
%%]

%%[ftv.I2.explain.holes
%%]

%%[ftv.K.explain.holes
%%]

%%[ftv.MD.explain.holes
%%]

%%[ftv.NUM.explain.holes
%%]

%%[ftv.P.explain.holes
%%]

%%[ftv.TS.explain.holes
%%]

%%[infAnnKindMap.ANN.explain.holes
%%]

%%[infAnnKindMap.C.explain.holes
%%]

%%[infAnnKindMap.CG.explain.holes
%%]

%%[infAnnKindMap.DT.explain.holes
%%]

%%[infAnnKindMap.E.explain.holes
%%]

%%[infAnnKindMap.EP.explain.holes
%%]

%%[infAnnKindMap.EX.explain.holes
%%]

%%[infAnnKindMap.HM.explain.holes
%%]

%%[infAnnKindMap.HS.explain.holes
%%]

%%[infAnnKindMap.I1.explain.holes
%%]

%%[infAnnKindMap.I2.explain.holes
%%]

%%[infAnnKindMap.K.explain.holes
%%]

%%[infAnnKindMap.MD.explain.holes
%%]

%%[infAnnKindMap.NUM.explain.holes
%%]

%%[infAnnKindMap.P.explain.holes
%%]

%%[infAnnKindMap.TS.explain.holes
%%]

%%[join.ANN.explain.holes
%%]

%%[join.C.explain.holes
%%]

%%[join.CG.explain.holes
%%]

%%[join.DT.explain.holes
%%]

%%[join.E.explain.holes
%%]

%%[join.EP.explain.holes
%%]

%%[join.EX.explain.holes
%%]

%%[join.HM.explain.holes
%%]

%%[join.HS.explain.holes
%%]

%%[join.I1.explain.holes
%%]

%%[join.I2.explain.scheme
\ensuremath{|  <->  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[join.I2.explain.holes
\ensuremath{| sigma | _{ | l | } |  |} & Type to join \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to join \\
\ensuremath{| sigma |} & Result type: \ensuremath{| sigma | _{ | l | } |  <= sigma && sigma | _{ | r | } |  <= sigma |} \\
%%]

%%[join.K.explain.holes
%%]

%%[join.MD.explain.holes
%%]

%%[join.NUM.explain.holes
%%]

%%[join.P.explain.holes
%%]

%%[join.TS.explain.holes
%%]

%%[kvarvFresh.ANN.explain.holes
%%]

%%[kvarvFresh.C.explain.holes
%%]

%%[kvarvFresh.CG.explain.holes
%%]

%%[kvarvFresh.DT.explain.holes
%%]

%%[kvarvFresh.E.explain.holes
%%]

%%[kvarvFresh.EP.explain.holes
%%]

%%[kvarvFresh.EX.explain.holes
%%]

%%[kvarvFresh.HM.explain.holes
%%]

%%[kvarvFresh.HS.explain.holes
%%]

%%[kvarvFresh.I1.explain.holes
%%]

%%[kvarvFresh.I2.explain.holes
%%]

%%[kvarvFresh.K.explain.holes
%%]

%%[kvarvFresh.MD.explain.holes
%%]

%%[kvarvFresh.NUM.explain.holes
%%]

%%[kvarvFresh.P.explain.holes
%%]

%%[kvarvFresh.TS.explain.holes
%%]

%%[match.ANN.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma |} equals \ensuremath{| VarMp sigma | _{ | r | } |  |}, where \ensuremath{| sigma |} may have its quantifiers instantiated, depending on \ensuremath{| fiopt |}
%%]

%%[match.ANN.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.C.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}
%%]

%%[match.C.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.CG.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma |} equals \ensuremath{| VarMp sigma | _{ | r | } |  |}, where \ensuremath{| sigma |} may have its quantifiers instantiated, depending on \ensuremath{| fiopt |}
%%]

%%[match.CG.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.DT.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma |} equals \ensuremath{| VarMp sigma | _{ | r | } |  |}, where \ensuremath{| sigma |} may have its quantifiers instantiated, depending on \ensuremath{| fiopt |}
%%]

%%[match.DT.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.E.explain.holes
%%]

%%[match.EP.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma |} equals \ensuremath{| VarMp sigma | _{ | r | } |  |}, where \ensuremath{| sigma |} may have its quantifiers instantiated, depending on \ensuremath{| fiopt |}
%%]

%%[match.EP.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=>  |} to hold (currently only meaningful for \ensuremath{|  <=  |}) \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.EX.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma |} equals \ensuremath{| VarMp sigma | _{ | r | } |  |}, where \ensuremath{| sigma |} may have its quantifiers instantiated, depending on \ensuremath{| fiopt |}
%%]

%%[match.EX.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.HM.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}
%%]

%%[match.HM.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.HS.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma |} equals \ensuremath{| VarMp sigma | _{ | r | } |  |}, where \ensuremath{| sigma |} may have its quantifiers instantiated, depending on \ensuremath{| fiopt |}
%%]

%%[match.HS.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=>  |} to hold (currently only meaningful for \ensuremath{|  <=  |}) \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.I1.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}
%%]

%%[match.I1.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.I2.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma === VarMp sigma | _{ | r | } |  |}
%%]

%%[match.I2.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.K.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |}, \ensuremath{| sigma === sigma | _{ | r | } |  |} with \ensuremath{| ANY |} eliminated from \ensuremath{| sigma |}
%%]

%%[match.K.explain.holes
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.MD.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma |} equals \ensuremath{| VarMp sigma | _{ | r | } |  |}, where \ensuremath{| sigma |} may have its quantifiers instantiated, depending on \ensuremath{| fiopt |}
%%]

%%[match.MD.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=>  |} to hold (currently only meaningful for \ensuremath{|  <=  |}) \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.NUM.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma |} equals \ensuremath{| VarMp sigma | _{ | r | } |  |}, where \ensuremath{| sigma |} may have its quantifiers instantiated, depending on \ensuremath{| fiopt |}
%%]

%%[match.NUM.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=>  |} to hold (currently only meaningful for \ensuremath{|  <=  |}) \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.P.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma |} equals \ensuremath{| VarMp sigma | _{ | r | } |  |}, where \ensuremath{| sigma |} may have its quantifiers instantiated, depending on \ensuremath{| fiopt |}
%%]

%%[match.P.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=>  |} to hold (currently only meaningful for \ensuremath{|  <=  |}) \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[match.TS.explain.scheme
\ensuremath{| sigma | _{ | l | } |  |} matches \ensuremath{| sigma | _{ | r | } |  |} under constraints \ensuremath{| VarMp |}, \ensuremath{| sigma |} equals \ensuremath{| VarMp sigma | _{ | r | } |  |}, where \ensuremath{| sigma |} may have its quantifiers instantiated, depending on \ensuremath{| fiopt |}
%%]

%%[match.TS.explain.holes
\ensuremath{| VarMp |} & Additional constraints under which matching succeeds \\
\ensuremath{| Coe |} & Coercion (from \ensuremath{| sigma | _{ | l | } |  |} to \ensuremath{| sigma | _{ | r | } |  |} values) required for \ensuremath{|  <=>  |} to hold (currently only meaningful for \ensuremath{|  <=  |}) \\
\ensuremath{| fiopt |} & Options to steer \ensuremath{|  <=>  |}, encodes matching variants as well \\
\ensuremath{| sigma | _{ | l | } |  |} & Type to match \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to match \\
\ensuremath{| sigma |} & Result type \\
%%]

%%[meet.ANN.explain.holes
%%]

%%[meet.C.explain.holes
%%]

%%[meet.CG.explain.holes
%%]

%%[meet.DT.explain.holes
%%]

%%[meet.E.explain.holes
%%]

%%[meet.EP.explain.holes
%%]

%%[meet.EX.explain.holes
%%]

%%[meet.HM.explain.holes
%%]

%%[meet.HS.explain.holes
%%]

%%[meet.I1.explain.holes
%%]

%%[meet.I2.explain.scheme
\ensuremath{|  <+>  |} delegates to \ensuremath{|  <=>  |}.
%%]

%%[meet.I2.explain.holes
\ensuremath{| sigma | _{ | l | } |  |} & Type to meet \\
\ensuremath{| sigma | _{ | r | } |  |} & Type to meet \\
\ensuremath{| sigma |} & Result type: \ensuremath{| sigma <= sigma | _{ | l | } |  && sigma <= sigma | _{ | r | } |  |} \\
%%]

%%[meet.K.explain.holes
%%]

%%[meet.MD.explain.holes
%%]

%%[meet.NUM.explain.holes
%%]

%%[meet.P.explain.holes
%%]

%%[meet.TS.explain.holes
%%]

%%[mkPatFunProdTy.ANN.explain.holes
%%]

%%[mkPatFunProdTy.C.explain.holes
%%]

%%[mkPatFunProdTy.CG.explain.holes
%%]

%%[mkPatFunProdTy.DT.explain.holes
%%]

%%[mkPatFunProdTy.E.explain.holes
%%]

%%[mkPatFunProdTy.EP.explain.holes
%%]

%%[mkPatFunProdTy.EX.explain.holes
%%]

%%[mkPatFunProdTy.HM.explain.holes
%%]

%%[mkPatFunProdTy.HS.explain.holes
%%]

%%[mkPatFunProdTy.I1.explain.holes
%%]

%%[mkPatFunProdTy.I2.explain.holes
%%]

%%[mkPatFunProdTy.K.explain.holes
%%]

%%[mkPatFunProdTy.MD.explain.holes
%%]

%%[mkPatFunProdTy.NUM.explain.holes
%%]

%%[mkPatFunProdTy.P.explain.holes
%%]

%%[mkPatFunProdTy.TS.explain.holes
%%]

%%[mkProdTy.ANN.explain.holes
%%]

%%[mkProdTy.C.explain.holes
%%]

%%[mkProdTy.CG.explain.holes
%%]

%%[mkProdTy.DT.explain.holes
%%]

%%[mkProdTy.E.explain.holes
%%]

%%[mkProdTy.EP.explain.holes
%%]

%%[mkProdTy.EX.explain.holes
%%]

%%[mkProdTy.HM.explain.holes
%%]

%%[mkProdTy.HS.explain.holes
%%]

%%[mkProdTy.I1.explain.holes
%%]

%%[mkProdTy.I2.explain.holes
%%]

%%[mkProdTy.K.explain.holes
%%]

%%[mkProdTy.MD.explain.holes
%%]

%%[mkProdTy.NUM.explain.holes
%%]

%%[mkProdTy.P.explain.holes
%%]

%%[mkProdTy.TS.explain.holes
%%]

%%[neqTy.ANN.explain.holes
%%]

%%[neqTy.C.explain.holes
%%]

%%[neqTy.CG.explain.holes
%%]

%%[neqTy.DT.explain.holes
%%]

%%[neqTy.E.explain.holes
%%]

%%[neqTy.EP.explain.holes
%%]

%%[neqTy.EX.explain.holes
%%]

%%[neqTy.HM.explain.holes
%%]

%%[neqTy.HS.explain.holes
%%]

%%[neqTy.I1.explain.holes
%%]

%%[neqTy.I2.explain.holes
%%]

%%[neqTy.K.explain.holes
%%]

%%[neqTy.MD.explain.holes
%%]

%%[neqTy.NUM.explain.holes
%%]

%%[neqTy.P.explain.holes
%%]

%%[neqTy.TS.explain.holes
%%]

%%[notElemTyVarIdS.ANN.explain.holes
%%]

%%[notElemTyVarIdS.C.explain.holes
%%]

%%[notElemTyVarIdS.CG.explain.holes
%%]

%%[notElemTyVarIdS.DT.explain.holes
%%]

%%[notElemTyVarIdS.E.explain.holes
%%]

%%[notElemTyVarIdS.EP.explain.holes
%%]

%%[notElemTyVarIdS.EX.explain.holes
%%]

%%[notElemTyVarIdS.HM.explain.holes
%%]

%%[notElemTyVarIdS.HS.explain.holes
%%]

%%[notElemTyVarIdS.I1.explain.holes
%%]

%%[notElemTyVarIdS.I2.explain.holes
%%]

%%[notElemTyVarIdS.K.explain.holes
%%]

%%[notElemTyVarIdS.MD.explain.holes
%%]

%%[notElemTyVarIdS.NUM.explain.holes
%%]

%%[notElemTyVarIdS.P.explain.holes
%%]

%%[notElemTyVarIdS.TS.explain.holes
%%]

%%[notIsEmpty.ANN.explain.holes
%%]

%%[notIsEmpty.C.explain.holes
%%]

%%[notIsEmpty.CG.explain.holes
%%]

%%[notIsEmpty.DT.explain.holes
%%]

%%[notIsEmpty.E.explain.holes
%%]

%%[notIsEmpty.EP.explain.holes
%%]

%%[notIsEmpty.EX.explain.holes
%%]

%%[notIsEmpty.HM.explain.holes
%%]

%%[notIsEmpty.HS.explain.holes
%%]

%%[notIsEmpty.I1.explain.holes
%%]

%%[notIsEmpty.I2.explain.holes
%%]

%%[notIsEmpty.K.explain.holes
%%]

%%[notIsEmpty.MD.explain.holes
%%]

%%[notIsEmpty.NUM.explain.holes
%%]

%%[notIsEmpty.P.explain.holes
%%]

%%[notIsEmpty.TS.explain.holes
%%]

%%[patexpr.ANN.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.ANN.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.C.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| VarMp | _{ | p | }^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| p |} has type \ensuremath{| sigma |} and bindings \ensuremath{| Gamma |} (for identifiers introduced by \ensuremath{| p |}), under constraints \ensuremath{| VarMp | _{ | p | } |  |}
%%]

%%[patexpr.C.explain.holes
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.CG.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.CG.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.DT.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.DT.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.E.explain.holes
%%]

%%[patexpr.EP.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.EP.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.EX.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.EX.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.HM.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| VarMp | _{ | p | }^{ | k | } |  sigma | ^{ | k | } |  |}, \ensuremath{| p |} has type \ensuremath{| sigma |} and bindings \ensuremath{| Gamma |} (for identifiers introduced by \ensuremath{| p |}), under constraints \ensuremath{| VarMp | _{ | p | } |  |}
%%]

%%[patexpr.HM.explain.holes
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.HS.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.HS.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.I1.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.I1.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.I2.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.I2.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.K.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, yielding additional bindings \ensuremath{| Gamma |} (for identifiers introduced by \ensuremath{| p |})
%%]

%%[patexpr.K.explain.holes
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.MD.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.MD.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.NUM.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.NUM.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.P.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.P.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[patexpr.TS.explain.scheme
Knowing the type of pattern \ensuremath{| p |} to be \ensuremath{| sigma | ^{ | k | } |  |}, \ensuremath{| Gamma |} hold bindings for identifiers introduced by \ensuremath{| p |}, \ensuremath{| TGamma |} holds bindings for lexically scoped type variables.
%%]

%%[patexpr.TS.explain.holes
\ensuremath{| fiopt |} & \ensuremath{| fitsIn |} options, additional contextual information for \ensuremath{|  <=  |} \\
\ensuremath{| sigma | ^{ | k | } |  |} & Known type of pattern \\
\ensuremath{| sigma | _{ | pf | } |  |} & (Internal use only) Encoding of the value dissection as a type of the form \ensuremath{| sigma | _{ | v | } |  -> sigma | _{ | e | } |  |}, where a value of type \ensuremath{| sigma | _{ | v | } |  |} is dissected, yielding a tuple type \ensuremath{| sigma | _{ | e | } |  |} with the elements (of the dissection) \\
\ensuremath{| sigma |} & Type of pattern \ensuremath{| p |} \\
\ensuremath{| VarMp | _{ | p | }^{ | k | } |  |} & Already known constraints \\
\ensuremath{| VarMp | _{ | p | } |  |} & \ensuremath{| VarMp | _{ | p | }^{ | k | } |  |}+ new constraints \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Already gathered type variable bindings \\
\ensuremath{| TGamma |} & \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
\ensuremath{| Gamma | ^{ | k | } |  |} & Already gathered bindings (for this EH version initially \ensuremath{|  []  |}) \\
\ensuremath{| Gamma |} & \ensuremath{| Gamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[pred.ANN.explain.holes
%%]

%%[pred.C.explain.holes
%%]

%%[pred.CG.explain.holes
%%]

%%[pred.DT.explain.holes
%%]

%%[pred.E.explain.holes
%%]

%%[pred.EP.explain.holes
%%]

%%[pred.EX.explain.holes
%%]

%%[pred.HM.explain.holes
%%]

%%[pred.HS.explain.holes
%%]

%%[pred.I1.explain.holes
%%]

%%[pred.I2.explain.holes
%%]

%%[pred.K.explain.holes
%%]

%%[pred.MD.explain.holes
%%]

%%[pred.NUM.explain.holes
%%]

%%[pred.P.explain.holes
%%]

%%[pred.TS.explain.holes
%%]

%%[predGamLookupPrTyEv.ANN.explain.holes
%%]

%%[predGamLookupPrTyEv.C.explain.holes
%%]

%%[predGamLookupPrTyEv.CG.explain.holes
%%]

%%[predGamLookupPrTyEv.DT.explain.holes
%%]

%%[predGamLookupPrTyEv.E.explain.holes
%%]

%%[predGamLookupPrTyEv.EP.explain.holes
%%]

%%[predGamLookupPrTyEv.EX.explain.holes
%%]

%%[predGamLookupPrTyEv.HM.explain.holes
%%]

%%[predGamLookupPrTyEv.HS.explain.holes
%%]

%%[predGamLookupPrTyEv.I1.explain.holes
%%]

%%[predGamLookupPrTyEv.I2.explain.holes
%%]

%%[predGamLookupPrTyEv.K.explain.holes
%%]

%%[predGamLookupPrTyEv.MD.explain.holes
%%]

%%[predGamLookupPrTyEv.NUM.explain.holes
%%]

%%[predGamLookupPrTyEv.P.explain.holes
%%]

%%[predGamLookupPrTyEv.TS.explain.holes
%%]

%%[predGamOpenIdTy.ANN.explain.holes
%%]

%%[predGamOpenIdTy.C.explain.holes
%%]

%%[predGamOpenIdTy.CG.explain.holes
%%]

%%[predGamOpenIdTy.DT.explain.holes
%%]

%%[predGamOpenIdTy.E.explain.holes
%%]

%%[predGamOpenIdTy.EP.explain.holes
%%]

%%[predGamOpenIdTy.EX.explain.holes
%%]

%%[predGamOpenIdTy.HM.explain.holes
%%]

%%[predGamOpenIdTy.HS.explain.holes
%%]

%%[predGamOpenIdTy.I1.explain.holes
%%]

%%[predGamOpenIdTy.I2.explain.holes
%%]

%%[predGamOpenIdTy.K.explain.holes
%%]

%%[predGamOpenIdTy.MD.explain.holes
%%]

%%[predGamOpenIdTy.NUM.explain.holes
%%]

%%[predGamOpenIdTy.P.explain.holes
%%]

%%[predGamOpenIdTy.TS.explain.holes
%%]

%%[quForCoCo.ANN.explain.holes
%%]

%%[quForCoCo.C.explain.holes
%%]

%%[quForCoCo.CG.explain.holes
%%]

%%[quForCoCo.DT.explain.holes
%%]

%%[quForCoCo.E.explain.holes
%%]

%%[quForCoCo.EP.explain.holes
%%]

%%[quForCoCo.EX.explain.holes
%%]

%%[quForCoCo.HM.explain.holes
%%]

%%[quForCoCo.HS.explain.holes
%%]

%%[quForCoCo.I1.explain.holes
%%]

%%[quForCoCo.I2.explain.holes
%%]

%%[quForCoCo.K.explain.holes
%%]

%%[quForCoCo.MD.explain.holes
%%]

%%[quForCoCo.NUM.explain.holes
%%]

%%[quForCoCo.P.explain.holes
%%]

%%[quForCoCo.TS.explain.holes
%%]

%%[tpvarvFresh2.ANN.explain.holes
%%]

%%[tpvarvFresh2.C.explain.holes
%%]

%%[tpvarvFresh2.CG.explain.holes
%%]

%%[tpvarvFresh2.DT.explain.holes
%%]

%%[tpvarvFresh2.E.explain.holes
%%]

%%[tpvarvFresh2.EP.explain.holes
%%]

%%[tpvarvFresh2.EX.explain.holes
%%]

%%[tpvarvFresh2.HM.explain.holes
%%]

%%[tpvarvFresh2.HS.explain.holes
%%]

%%[tpvarvFresh2.I1.explain.holes
%%]

%%[tpvarvFresh2.I2.explain.holes
%%]

%%[tpvarvFresh2.K.explain.holes
%%]

%%[tpvarvFresh2.MD.explain.holes
%%]

%%[tpvarvFresh2.NUM.explain.holes
%%]

%%[tpvarvFresh2.P.explain.holes
%%]

%%[tpvarvFresh2.TS.explain.holes
%%]

%%[tvarsHasTvar.ANN.explain.holes
%%]

%%[tvarsHasTvar.C.explain.holes
%%]

%%[tvarsHasTvar.CG.explain.holes
%%]

%%[tvarsHasTvar.DT.explain.holes
%%]

%%[tvarsHasTvar.E.explain.holes
%%]

%%[tvarsHasTvar.EP.explain.holes
%%]

%%[tvarsHasTvar.EX.explain.holes
%%]

%%[tvarsHasTvar.HM.explain.holes
%%]

%%[tvarsHasTvar.HS.explain.holes
%%]

%%[tvarsHasTvar.I1.explain.holes
%%]

%%[tvarsHasTvar.I2.explain.holes
%%]

%%[tvarsHasTvar.K.explain.holes
%%]

%%[tvarsHasTvar.MD.explain.holes
%%]

%%[tvarsHasTvar.NUM.explain.holes
%%]

%%[tvarsHasTvar.P.explain.holes
%%]

%%[tvarsHasTvar.TS.explain.holes
%%]

%%[tvarvFresh.ANN.explain.holes
%%]

%%[tvarvFresh.C.explain.holes
%%]

%%[tvarvFresh.CG.explain.holes
%%]

%%[tvarvFresh.DT.explain.holes
%%]

%%[tvarvFresh.E.explain.holes
%%]

%%[tvarvFresh.EP.explain.holes
%%]

%%[tvarvFresh.EX.explain.holes
%%]

%%[tvarvFresh.HM.explain.holes
%%]

%%[tvarvFresh.HS.explain.holes
%%]

%%[tvarvFresh.I1.explain.holes
%%]

%%[tvarvFresh.I2.explain.holes
%%]

%%[tvarvFresh.K.explain.holes
%%]

%%[tvarvFresh.MD.explain.holes
%%]

%%[tvarvFresh.NUM.explain.holes
%%]

%%[tvarvFresh.P.explain.holes
%%]

%%[tvarvFresh.TS.explain.holes
%%]

%%[tvarvFresh2.ANN.explain.holes
%%]

%%[tvarvFresh2.C.explain.holes
%%]

%%[tvarvFresh2.CG.explain.holes
%%]

%%[tvarvFresh2.DT.explain.holes
%%]

%%[tvarvFresh2.E.explain.holes
%%]

%%[tvarvFresh2.EP.explain.holes
%%]

%%[tvarvFresh2.EX.explain.holes
%%]

%%[tvarvFresh2.HM.explain.holes
%%]

%%[tvarvFresh2.HS.explain.holes
%%]

%%[tvarvFresh2.I1.explain.holes
%%]

%%[tvarvFresh2.I2.explain.holes
%%]

%%[tvarvFresh2.K.explain.holes
%%]

%%[tvarvFresh2.MD.explain.holes
%%]

%%[tvarvFresh2.NUM.explain.holes
%%]

%%[tvarvFresh2.P.explain.holes
%%]

%%[tvarvFresh2.TS.explain.holes
%%]

%%[tvarvFresh3.ANN.explain.holes
%%]

%%[tvarvFresh3.C.explain.holes
%%]

%%[tvarvFresh3.CG.explain.holes
%%]

%%[tvarvFresh3.DT.explain.holes
%%]

%%[tvarvFresh3.E.explain.holes
%%]

%%[tvarvFresh3.EP.explain.holes
%%]

%%[tvarvFresh3.EX.explain.holes
%%]

%%[tvarvFresh3.HM.explain.holes
%%]

%%[tvarvFresh3.HS.explain.holes
%%]

%%[tvarvFresh3.I1.explain.holes
%%]

%%[tvarvFresh3.I2.explain.holes
%%]

%%[tvarvFresh3.K.explain.holes
%%]

%%[tvarvFresh3.MD.explain.holes
%%]

%%[tvarvFresh3.NUM.explain.holes
%%]

%%[tvarvFresh3.P.explain.holes
%%]

%%[tvarvFresh3.TS.explain.holes
%%]

%%[tvarvFresh4.ANN.explain.holes
%%]

%%[tvarvFresh4.C.explain.holes
%%]

%%[tvarvFresh4.CG.explain.holes
%%]

%%[tvarvFresh4.DT.explain.holes
%%]

%%[tvarvFresh4.E.explain.holes
%%]

%%[tvarvFresh4.EP.explain.holes
%%]

%%[tvarvFresh4.EX.explain.holes
%%]

%%[tvarvFresh4.HM.explain.holes
%%]

%%[tvarvFresh4.HS.explain.holes
%%]

%%[tvarvFresh4.I1.explain.holes
%%]

%%[tvarvFresh4.I2.explain.holes
%%]

%%[tvarvFresh4.K.explain.holes
%%]

%%[tvarvFresh4.MD.explain.holes
%%]

%%[tvarvFresh4.NUM.explain.holes
%%]

%%[tvarvFresh4.P.explain.holes
%%]

%%[tvarvFresh4.TS.explain.holes
%%]

%%[tvarvFreshN.ANN.explain.holes
%%]

%%[tvarvFreshN.C.explain.holes
%%]

%%[tvarvFreshN.CG.explain.holes
%%]

%%[tvarvFreshN.DT.explain.holes
%%]

%%[tvarvFreshN.E.explain.holes
%%]

%%[tvarvFreshN.EP.explain.holes
%%]

%%[tvarvFreshN.EX.explain.holes
%%]

%%[tvarvFreshN.HM.explain.holes
%%]

%%[tvarvFreshN.HS.explain.holes
%%]

%%[tvarvFreshN.I1.explain.holes
%%]

%%[tvarvFreshN.I2.explain.holes
%%]

%%[tvarvFreshN.K.explain.holes
%%]

%%[tvarvFreshN.MD.explain.holes
%%]

%%[tvarvFreshN.NUM.explain.holes
%%]

%%[tvarvFreshN.P.explain.holes
%%]

%%[tvarvFreshN.TS.explain.holes
%%]

%%[tyAltMk.ANN.explain.holes
%%]

%%[tyAltMk.C.explain.holes
%%]

%%[tyAltMk.CG.explain.holes
%%]

%%[tyAltMk.DT.explain.holes
%%]

%%[tyAltMk.E.explain.holes
%%]

%%[tyAltMk.EP.explain.holes
%%]

%%[tyAltMk.EX.explain.holes
%%]

%%[tyAltMk.HM.explain.holes
%%]

%%[tyAltMk.HS.explain.holes
%%]

%%[tyAltMk.I1.explain.holes
%%]

%%[tyAltMk.I2.explain.holes
%%]

%%[tyAltMk.K.explain.holes
%%]

%%[tyAltMk.MD.explain.holes
%%]

%%[tyAltMk.NUM.explain.holes
%%]

%%[tyAltMk.P.explain.holes
%%]

%%[tyAltMk.TS.explain.holes
%%]

%%[tyAltPartition.ANN.explain.holes
%%]

%%[tyAltPartition.C.explain.holes
%%]

%%[tyAltPartition.CG.explain.holes
%%]

%%[tyAltPartition.DT.explain.holes
%%]

%%[tyAltPartition.E.explain.holes
%%]

%%[tyAltPartition.EP.explain.holes
%%]

%%[tyAltPartition.EX.explain.holes
%%]

%%[tyAltPartition.HM.explain.holes
%%]

%%[tyAltPartition.HS.explain.holes
%%]

%%[tyAltPartition.I1.explain.holes
%%]

%%[tyAltPartition.I2.explain.holes
%%]

%%[tyAltPartition.K.explain.holes
%%]

%%[tyAltPartition.MD.explain.holes
%%]

%%[tyAltPartition.NUM.explain.holes
%%]

%%[tyAltPartition.P.explain.holes
%%]

%%[tyAltPartition.TS.explain.holes
%%]

%%[tyAltSelect.ANN.explain.holes
%%]

%%[tyAltSelect.C.explain.holes
%%]

%%[tyAltSelect.CG.explain.holes
%%]

%%[tyAltSelect.DT.explain.holes
%%]

%%[tyAltSelect.E.explain.holes
%%]

%%[tyAltSelect.EP.explain.holes
%%]

%%[tyAltSelect.EX.explain.holes
%%]

%%[tyAltSelect.HM.explain.holes
%%]

%%[tyAltSelect.HS.explain.holes
%%]

%%[tyAltSelect.I1.explain.holes
%%]

%%[tyAltSelect.I2.explain.holes
%%]

%%[tyAltSelect.K.explain.holes
%%]

%%[tyAltSelect.MD.explain.holes
%%]

%%[tyAltSelect.NUM.explain.holes
%%]

%%[tyAltSelect.P.explain.holes
%%]

%%[tyAltSelect.TS.explain.holes
%%]

%%[tyAltTyElim.ANN.explain.holes
%%]

%%[tyAltTyElim.C.explain.holes
%%]

%%[tyAltTyElim.CG.explain.holes
%%]

%%[tyAltTyElim.DT.explain.holes
%%]

%%[tyAltTyElim.E.explain.holes
%%]

%%[tyAltTyElim.EP.explain.holes
%%]

%%[tyAltTyElim.EX.explain.holes
%%]

%%[tyAltTyElim.HM.explain.holes
%%]

%%[tyAltTyElim.HS.explain.holes
%%]

%%[tyAltTyElim.I1.explain.holes
%%]

%%[tyAltTyElim.I2.explain.scheme
Within a meet/ join context (indicated by \ensuremath{| fiopt |}), known constraints \ensuremath{| IVarMp | ^{ | k | } |  |} for \ensuremath{| isigma |}, \ensuremath{| sigma |} equals \ensuremath{| isigma |} in which all type alternatives (except for global type variables \ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |}) are eliminated, under \ensuremath{| IVarMp |} constraining the type alternative variables to their type alternive eliminated type.
%%]

%%[tyAltTyElim.I2.explain.holes
\ensuremath{| fiopt |} & Options to matching, in particular indicating meet/ join \\
\ensuremath{| isigma |} & Type with type alternatives \ensuremath{| talt |} \\
\ensuremath{| IVarMp |} & New constraints, constraining the type alternative variables to their type alternive eliminated type \\
\ensuremath{| sigma |} & Result type, without type alternatives \ensuremath{| talt |} (for non global type variables) \\
\ensuremath{| IVarMp | ^{ | k | } |  |} & Known constraints for type variables in \ensuremath{| isigma |} \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global variables (which are not eliminated) \\
%%]

%%[tyAltTyElim.K.explain.holes
%%]

%%[tyAltTyElim.MD.explain.holes
%%]

%%[tyAltTyElim.NUM.explain.holes
%%]

%%[tyAltTyElim.P.explain.holes
%%]

%%[tyAltTyElim.TS.explain.holes
%%]

%%[tyBtTyElim.ANN.explain.holes
%%]

%%[tyBtTyElim.C.explain.holes
%%]

%%[tyBtTyElim.CG.explain.holes
%%]

%%[tyBtTyElim.DT.explain.holes
%%]

%%[tyBtTyElim.E.explain.holes
%%]

%%[tyBtTyElim.EP.explain.holes
%%]

%%[tyBtTyElim.EX.explain.holes
%%]

%%[tyBtTyElim.HM.explain.holes
%%]

%%[tyBtTyElim.HS.explain.holes
%%]

%%[tyBtTyElim.I1.explain.holes
%%]

%%[tyBtTyElim.I2.explain.scheme
Split \ensuremath{| sigma | _{ | /=/ | } |  |} holding \ensuremath{|  /=/  |} types into \ensuremath{| sigma |} holding type variables (of \ensuremath{|  /=/  |} types) and \ensuremath{| VarMp |} holding constraints on those type variables.
%%]

%%[tyBtTyElim.I2.explain.holes
\ensuremath{| bv |} & Already bound variables for which no elimination takes place \\
\ensuremath{| sigma |} & Result type, \ensuremath{|  /=/  |} types replaced by their original type variable \\
\ensuremath{| VarMp |} & Constraints for \ensuremath{|  /=/  |} type variables, mapping to their \ensuremath{|  /=/  |} type \\
\ensuremath{| sigma | _{ | e | } |  |} & Type where \ensuremath{|  /=/  |} types are replaced by their \ensuremath{|  /=/  |} type (if not \ensuremath{| ANY |}), only used internally \\
\ensuremath{| sigma | _{ | /=/ | } |  |} & Type to be \ensuremath{|  /=/  |} type eliminated \\
%%]

%%[tyBtTyElim.K.explain.holes
%%]

%%[tyBtTyElim.MD.explain.holes
%%]

%%[tyBtTyElim.NUM.explain.holes
%%]

%%[tyBtTyElim.P.explain.holes
%%]

%%[tyBtTyElim.TS.explain.holes
%%]

%%[tyEnsureNonAny.ANN.explain.holes
%%]

%%[tyEnsureNonAny.C.explain.holes
%%]

%%[tyEnsureNonAny.CG.explain.holes
%%]

%%[tyEnsureNonAny.DT.explain.holes
%%]

%%[tyEnsureNonAny.E.explain.holes
%%]

%%[tyEnsureNonAny.EP.explain.holes
%%]

%%[tyEnsureNonAny.EX.explain.holes
%%]

%%[tyEnsureNonAny.HM.explain.holes
%%]

%%[tyEnsureNonAny.HS.explain.holes
%%]

%%[tyEnsureNonAny.I1.explain.holes
%%]

%%[tyEnsureNonAny.I2.explain.holes
%%]

%%[tyEnsureNonAny.K.explain.holes
%%]

%%[tyEnsureNonAny.MD.explain.holes
%%]

%%[tyEnsureNonAny.NUM.explain.holes
%%]

%%[tyEnsureNonAny.P.explain.holes
%%]

%%[tyEnsureNonAny.TS.explain.holes
%%]

%%[tyEnsureTVar.ANN.explain.holes
%%]

%%[tyEnsureTVar.C.explain.holes
%%]

%%[tyEnsureTVar.CG.explain.holes
%%]

%%[tyEnsureTVar.DT.explain.holes
%%]

%%[tyEnsureTVar.E.explain.holes
%%]

%%[tyEnsureTVar.EP.explain.holes
%%]

%%[tyEnsureTVar.EX.explain.holes
%%]

%%[tyEnsureTVar.HM.explain.holes
%%]

%%[tyEnsureTVar.HS.explain.holes
%%]

%%[tyEnsureTVar.I1.explain.holes
%%]

%%[tyEnsureTVar.I2.explain.holes
%%]

%%[tyEnsureTVar.K.explain.holes
%%]

%%[tyEnsureTVar.MD.explain.holes
%%]

%%[tyEnsureTVar.NUM.explain.holes
%%]

%%[tyEnsureTVar.P.explain.holes
%%]

%%[tyEnsureTVar.TS.explain.holes
%%]

%%[tyGamLookupId.ANN.explain.holes
%%]

%%[tyGamLookupId.C.explain.holes
%%]

%%[tyGamLookupId.CG.explain.holes
%%]

%%[tyGamLookupId.DT.explain.holes
%%]

%%[tyGamLookupId.E.explain.holes
%%]

%%[tyGamLookupId.EP.explain.holes
%%]

%%[tyGamLookupId.EX.explain.holes
%%]

%%[tyGamLookupId.HM.explain.holes
%%]

%%[tyGamLookupId.HS.explain.holes
%%]

%%[tyGamLookupId.I1.explain.holes
%%]

%%[tyGamLookupId.I2.explain.holes
%%]

%%[tyGamLookupId.K.explain.holes
%%]

%%[tyGamLookupId.MD.explain.holes
%%]

%%[tyGamLookupId.NUM.explain.holes
%%]

%%[tyGamLookupId.P.explain.holes
%%]

%%[tyGamLookupId.TS.explain.holes
%%]

%%[tyGamLookupOrNewId.ANN.explain.holes
%%]

%%[tyGamLookupOrNewId.C.explain.holes
%%]

%%[tyGamLookupOrNewId.CG.explain.holes
%%]

%%[tyGamLookupOrNewId.DT.explain.holes
%%]

%%[tyGamLookupOrNewId.E.explain.holes
%%]

%%[tyGamLookupOrNewId.EP.explain.holes
%%]

%%[tyGamLookupOrNewId.EX.explain.holes
%%]

%%[tyGamLookupOrNewId.HM.explain.holes
%%]

%%[tyGamLookupOrNewId.HS.explain.holes
%%]

%%[tyGamLookupOrNewId.I1.explain.holes
%%]

%%[tyGamLookupOrNewId.I2.explain.holes
%%]

%%[tyGamLookupOrNewId.K.explain.holes
%%]

%%[tyGamLookupOrNewId.MD.explain.holes
%%]

%%[tyGamLookupOrNewId.NUM.explain.holes
%%]

%%[tyGamLookupOrNewId.P.explain.holes
%%]

%%[tyGamLookupOrNewId.TS.explain.holes
%%]

%%[tyGamTyFtv.ANN.explain.holes
%%]

%%[tyGamTyFtv.C.explain.holes
%%]

%%[tyGamTyFtv.CG.explain.holes
%%]

%%[tyGamTyFtv.DT.explain.holes
%%]

%%[tyGamTyFtv.E.explain.holes
%%]

%%[tyGamTyFtv.EP.explain.holes
%%]

%%[tyGamTyFtv.EX.explain.holes
%%]

%%[tyGamTyFtv.HM.explain.holes
%%]

%%[tyGamTyFtv.HS.explain.holes
%%]

%%[tyGamTyFtv.I1.explain.holes
%%]

%%[tyGamTyFtv.I2.explain.holes
%%]

%%[tyGamTyFtv.K.explain.holes
%%]

%%[tyGamTyFtv.MD.explain.holes
%%]

%%[tyGamTyFtv.NUM.explain.holes
%%]

%%[tyGamTyFtv.P.explain.holes
%%]

%%[tyGamTyFtv.TS.explain.holes
%%]

%%[tyInitLastProd.ANN.explain.holes
%%]

%%[tyInitLastProd.C.explain.holes
%%]

%%[tyInitLastProd.CG.explain.holes
%%]

%%[tyInitLastProd.DT.explain.holes
%%]

%%[tyInitLastProd.E.explain.holes
%%]

%%[tyInitLastProd.EP.explain.holes
%%]

%%[tyInitLastProd.EX.explain.holes
%%]

%%[tyInitLastProd.HM.explain.holes
%%]

%%[tyInitLastProd.HS.explain.holes
%%]

%%[tyInitLastProd.I1.explain.holes
%%]

%%[tyInitLastProd.I2.explain.holes
%%]

%%[tyInitLastProd.K.explain.holes
%%]

%%[tyInitLastProd.MD.explain.holes
%%]

%%[tyInitLastProd.NUM.explain.holes
%%]

%%[tyInitLastProd.P.explain.holes
%%]

%%[tyInitLastProd.TS.explain.holes
%%]

%%[tyOpenProd.ANN.explain.holes
%%]

%%[tyOpenProd.C.explain.holes
%%]

%%[tyOpenProd.CG.explain.holes
%%]

%%[tyOpenProd.DT.explain.holes
%%]

%%[tyOpenProd.E.explain.holes
%%]

%%[tyOpenProd.EP.explain.holes
%%]

%%[tyOpenProd.EX.explain.holes
%%]

%%[tyOpenProd.HM.explain.holes
%%]

%%[tyOpenProd.HS.explain.holes
%%]

%%[tyOpenProd.I1.explain.holes
%%]

%%[tyOpenProd.I2.explain.holes
%%]

%%[tyOpenProd.K.explain.holes
%%]

%%[tyOpenProd.MD.explain.holes
%%]

%%[tyOpenProd.NUM.explain.holes
%%]

%%[tyOpenProd.P.explain.holes
%%]

%%[tyOpenProd.TS.explain.holes
%%]

%%[tyQuantify.ANN.explain.holes
%%]

%%[tyQuantify.C.explain.holes
%%]

%%[tyQuantify.CG.explain.holes
%%]

%%[tyQuantify.DT.explain.holes
%%]

%%[tyQuantify.E.explain.holes
%%]

%%[tyQuantify.EP.explain.holes
%%]

%%[tyQuantify.EX.explain.holes
%%]

%%[tyQuantify.HM.explain.holes
%%]

%%[tyQuantify.HS.explain.holes
%%]

%%[tyQuantify.I1.explain.holes
%%]

%%[tyQuantify.I2.explain.holes
%%]

%%[tyQuantify.K.explain.holes
%%]

%%[tyQuantify.MD.explain.holes
%%]

%%[tyQuantify.NUM.explain.holes
%%]

%%[tyQuantify.P.explain.holes
%%]

%%[tyQuantify.TS.explain.holes
%%]

%%[tyQuantifyOuter.ANN.explain.holes
%%]

%%[tyQuantifyOuter.C.explain.holes
%%]

%%[tyQuantifyOuter.CG.explain.holes
%%]

%%[tyQuantifyOuter.DT.explain.holes
%%]

%%[tyQuantifyOuter.E.explain.holes
%%]

%%[tyQuantifyOuter.EP.explain.holes
%%]

%%[tyQuantifyOuter.EX.explain.holes
%%]

%%[tyQuantifyOuter.HM.explain.holes
%%]

%%[tyQuantifyOuter.HS.explain.holes
%%]

%%[tyQuantifyOuter.I1.explain.holes
%%]

%%[tyQuantifyOuter.I2.explain.holes
%%]

%%[tyQuantifyOuter.K.explain.holes
%%]

%%[tyQuantifyOuter.MD.explain.holes
%%]

%%[tyQuantifyOuter.NUM.explain.holes
%%]

%%[tyQuantifyOuter.P.explain.holes
%%]

%%[tyQuantifyOuter.TS.explain.holes
%%]

%%[tyexpr.ANN.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.ANN.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.C.explain.scheme
Within environment \ensuremath{| TGamma |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}.
%%]

%%[tyexpr.C.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers \\
%%]

%%[tyexpr.CG.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.CG.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.DT.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.DT.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.E.explain.scheme
Type expression \ensuremath{| t |} has a corresponding type signature \ensuremath{| sigma |}.
%%]

%%[tyexpr.E.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
%%]

%%[tyexpr.EP.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.EP.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.EX.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.EX.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.HM.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.HM.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.HS.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.HS.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.I1.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.I1.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.I2.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.I2.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.K.explain.scheme
Within environment \ensuremath{| TGamma |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}.
%%]

%%[tyexpr.K.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{| TGamma |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} for type identifiers \\
%%]

%%[tyexpr.MD.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.MD.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.NUM.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.NUM.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.P.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.P.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyexpr.TS.explain.scheme
Within environment \ensuremath{| TGamma | ^{ | k | } |  |}, type expression \ensuremath{| t |} has a (replica) type signature \ensuremath{| sigma |}, yielding additional bindings \ensuremath{| TGamma |} and wild type variables \ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |}.
%%]

%%[tyexpr.TS.explain.holes
\ensuremath{| t |} & Type expression \\
\ensuremath{| sigma |} & Type signature \\
\ensuremath{|  | \overline{ | tvarv | _{ | w | }} |  |} & Type variables which occur as wildcard \\
\ensuremath{| TGamma | ^{ | k | } |  |} & Environment \ensuremath{|  | \overline{ | ident :-> sigma | } |  |} with known bindings for type identifiers \\
\ensuremath{| TGamma |} & Environment with \ensuremath{| TGamma | ^{ | k | } |  |}+ new bindings \\
%%]

%%[tyqu.ANN.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.ANN.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[tyqu.C.explain.holes
%%]

%%[tyqu.CG.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.CG.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[tyqu.DT.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.DT.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[tyqu.E.explain.holes
%%]

%%[tyqu.EP.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.EP.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[tyqu.EX.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.EX.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[tyqu.HM.explain.holes
%%]

%%[tyqu.HS.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.HS.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[tyqu.I1.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.I1.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[tyqu.I2.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.I2.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[tyqu.K.explain.holes
%%]

%%[tyqu.MD.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.MD.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[tyqu.NUM.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.NUM.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[tyqu.P.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.P.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[tyqu.TS.explain.scheme
Type \ensuremath{| sigma | _{ | q | } |  |} has quantified type \ensuremath{| sigma |}, with quantifiers for type variables \ensuremath{|  `elem` (ftv (sigma | _{ | q | } | ) \\  | \overline{ | tvarv | _{ | g | }} | ) |}
%%]

%%[tyqu.TS.explain.holes
\ensuremath{| coco |} & Co/contravariance context, used internally \\
\ensuremath{| sigma |} & Type to be quantified \\
\ensuremath{|  | \overline{ | tvarv | _{ | f | }} |  |} & Free type variables of \ensuremath{| sigma |}, used internally \\
\ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |} & Global type variables, are not quantified \\
\ensuremath{| sigma | _{ | q | } |  |} & Quantified type \\
%%]

%%[valElimExprAlts.ANN.explain.holes
%%]

%%[valElimExprAlts.C.explain.holes
%%]

%%[valElimExprAlts.CG.explain.holes
%%]

%%[valElimExprAlts.DT.explain.holes
%%]

%%[valElimExprAlts.E.explain.holes
%%]

%%[valElimExprAlts.EP.explain.holes
%%]

%%[valElimExprAlts.EX.explain.holes
%%]

%%[valElimExprAlts.HM.explain.holes
%%]

%%[valElimExprAlts.HS.explain.holes
%%]

%%[valElimExprAlts.I1.explain.holes
%%]

%%[valElimExprAlts.I2.explain.scheme
Within a meet/ join context (indicated by \ensuremath{| fiopt |}), known constraints \ensuremath{| IVarMp | ^{ | k | } |  |} for types in \ensuremath{| Gamma |}, all type alternatives (except for global type variables \ensuremath{|  | \overline{ | tvarv | _{ | g | }} |  |}) are eliminated, under constraints \ensuremath{| IVarMp |}.
%%]

%%[valElimExprAlts.I2.explain.holes
%%]

%%[valElimExprAlts.K.explain.holes
%%]

%%[valElimExprAlts.MD.explain.holes
%%]

%%[valElimExprAlts.NUM.explain.holes
%%]

%%[valElimExprAlts.P.explain.holes
%%]

%%[valElimExprAlts.TS.explain.holes
%%]

%%[valGamFtv.ANN.explain.holes
%%]

%%[valGamFtv.C.explain.holes
%%]

%%[valGamFtv.CG.explain.holes
%%]

%%[valGamFtv.DT.explain.holes
%%]

%%[valGamFtv.E.explain.holes
%%]

%%[valGamFtv.EP.explain.holes
%%]

%%[valGamFtv.EX.explain.holes
%%]

%%[valGamFtv.HM.explain.holes
%%]

%%[valGamFtv.HS.explain.holes
%%]

%%[valGamFtv.I1.explain.holes
%%]

%%[valGamFtv.I2.explain.holes
%%]

%%[valGamFtv.K.explain.holes
%%]

%%[valGamFtv.MD.explain.holes
%%]

%%[valGamFtv.NUM.explain.holes
%%]

%%[valGamFtv.P.explain.holes
%%]

%%[valGamFtv.TS.explain.holes
%%]

%%[valGamInst1Exists.ANN.explain.holes
%%]

%%[valGamInst1Exists.C.explain.holes
%%]

%%[valGamInst1Exists.CG.explain.holes
%%]

%%[valGamInst1Exists.DT.explain.holes
%%]

%%[valGamInst1Exists.E.explain.holes
%%]

%%[valGamInst1Exists.EP.explain.holes
%%]

%%[valGamInst1Exists.EX.explain.holes
%%]

%%[valGamInst1Exists.HM.explain.holes
%%]

%%[valGamInst1Exists.HS.explain.holes
%%]

%%[valGamInst1Exists.I1.explain.holes
%%]

%%[valGamInst1Exists.I2.explain.holes
%%]

%%[valGamInst1Exists.K.explain.holes
%%]

%%[valGamInst1Exists.MD.explain.holes
%%]

%%[valGamInst1Exists.NUM.explain.holes
%%]

%%[valGamInst1Exists.P.explain.holes
%%]

%%[valGamInst1Exists.TS.explain.holes
%%]

%%[valGamLookupIdTy.ANN.explain.holes
%%]

%%[valGamLookupIdTy.C.explain.holes
%%]

%%[valGamLookupIdTy.CG.explain.holes
%%]

%%[valGamLookupIdTy.DT.explain.holes
%%]

%%[valGamLookupIdTy.E.explain.holes
%%]

%%[valGamLookupIdTy.EP.explain.holes
%%]

%%[valGamLookupIdTy.EX.explain.holes
%%]

%%[valGamLookupIdTy.HM.explain.holes
%%]

%%[valGamLookupIdTy.HS.explain.holes
%%]

%%[valGamLookupIdTy.I1.explain.holes
%%]

%%[valGamLookupIdTy.I2.explain.holes
%%]

%%[valGamLookupIdTy.K.explain.holes
%%]

%%[valGamLookupIdTy.MD.explain.holes
%%]

%%[valGamLookupIdTy.NUM.explain.holes
%%]

%%[valGamLookupIdTy.P.explain.holes
%%]

%%[valGamLookupIdTy.TS.explain.holes
%%]

%%[valGamLookupPatTy.ANN.explain.holes
%%]

%%[valGamLookupPatTy.C.explain.holes
%%]

%%[valGamLookupPatTy.CG.explain.holes
%%]

%%[valGamLookupPatTy.DT.explain.holes
%%]

%%[valGamLookupPatTy.E.explain.holes
%%]

%%[valGamLookupPatTy.EP.explain.holes
%%]

%%[valGamLookupPatTy.EX.explain.holes
%%]

%%[valGamLookupPatTy.HM.explain.holes
%%]

%%[valGamLookupPatTy.HS.explain.holes
%%]

%%[valGamLookupPatTy.I1.explain.holes
%%]

%%[valGamLookupPatTy.I2.explain.holes
%%]

%%[valGamLookupPatTy.K.explain.holes
%%]

%%[valGamLookupPatTy.MD.explain.holes
%%]

%%[valGamLookupPatTy.NUM.explain.holes
%%]

%%[valGamLookupPatTy.P.explain.holes
%%]

%%[valGamLookupPatTy.TS.explain.holes
%%]

%%[valGamPop.ANN.explain.holes
%%]

%%[valGamPop.C.explain.holes
%%]

%%[valGamPop.CG.explain.holes
%%]

%%[valGamPop.DT.explain.holes
%%]

%%[valGamPop.E.explain.holes
%%]

%%[valGamPop.EP.explain.holes
%%]

%%[valGamPop.EX.explain.holes
%%]

%%[valGamPop.HM.explain.holes
%%]

%%[valGamPop.HS.explain.holes
%%]

%%[valGamPop.I1.explain.holes
%%]

%%[valGamPop.I2.explain.holes
%%]

%%[valGamPop.K.explain.holes
%%]

%%[valGamPop.MD.explain.holes
%%]

%%[valGamPop.NUM.explain.holes
%%]

%%[valGamPop.P.explain.holes
%%]

%%[valGamPop.TS.explain.holes
%%]

%%[valGamQuantify.ANN.explain.holes
%%]

%%[valGamQuantify.C.explain.holes
%%]

%%[valGamQuantify.CG.explain.holes
%%]

%%[valGamQuantify.DT.explain.holes
%%]

%%[valGamQuantify.E.explain.holes
%%]

%%[valGamQuantify.EP.explain.holes
%%]

%%[valGamQuantify.EX.explain.holes
%%]

%%[valGamQuantify.HM.explain.holes
%%]

%%[valGamQuantify.HS.explain.holes
%%]

%%[valGamQuantify.I1.explain.holes
%%]

%%[valGamQuantify.I2.explain.holes
%%]

%%[valGamQuantify.K.explain.holes
%%]

%%[valGamQuantify.MD.explain.holes
%%]

%%[valGamQuantify.NUM.explain.holes
%%]

%%[valGamQuantify.P.explain.holes
%%]

%%[valGamQuantify.TS.explain.holes
%%]

%%[inst.exists.ANN.explain.holes
%%]

%%[inst.exists.C.explain.holes
%%]

%%[inst.exists.CG.explain.holes
%%]

%%[inst.exists.DT.explain.holes
%%]

%%[inst.exists.E.explain.holes
%%]

%%[inst.exists.EP.explain.holes
%%]

%%[inst.exists.EX.explain.holes
%%]

%%[inst.exists.HM.explain.holes
%%]

%%[inst.exists.HS.explain.holes
%%]

%%[inst.exists.I1.explain.holes
%%]

%%[inst.exists.I2.explain.holes
%%]

%%[inst.exists.K.explain.holes
%%]

%%[inst.exists.MD.explain.holes
%%]

%%[inst.exists.NUM.explain.holes
%%]

%%[inst.exists.P.explain.holes
%%]

%%[inst.exists.TS.explain.holes
%%]

%%[inst.exists1.ANN.explain.holes
%%]

%%[inst.exists1.C.explain.holes
%%]

%%[inst.exists1.CG.explain.holes
%%]

%%[inst.exists1.DT.explain.holes
%%]

%%[inst.exists1.E.explain.holes
%%]

%%[inst.exists1.EP.explain.holes
%%]

%%[inst.exists1.EX.explain.holes
%%]

%%[inst.exists1.HM.explain.holes
%%]

%%[inst.exists1.HS.explain.holes
%%]

%%[inst.exists1.I1.explain.holes
%%]

%%[inst.exists1.I2.explain.holes
%%]

%%[inst.exists1.K.explain.holes
%%]

%%[inst.exists1.MD.explain.holes
%%]

%%[inst.exists1.NUM.explain.holes
%%]

%%[inst.exists1.P.explain.holes
%%]

%%[inst.exists1.TS.explain.holes
%%]

%%[inst.known.ANN.explain.holes
%%]

%%[inst.known.C.explain.holes
%%]

%%[inst.known.CG.explain.holes
%%]

%%[inst.known.DT.explain.holes
%%]

%%[inst.known.E.explain.holes
%%]

%%[inst.known.EP.explain.holes
%%]

%%[inst.known.EX.explain.holes
%%]

%%[inst.known.HM.explain.holes
%%]

%%[inst.known.HS.explain.holes
%%]

%%[inst.known.I1.explain.holes
%%]

%%[inst.known.I2.explain.holes
%%]

%%[inst.known.K.explain.holes
%%]

%%[inst.known.MD.explain.holes
%%]

%%[inst.known.NUM.explain.holes
%%]

%%[inst.known.P.explain.holes
%%]

%%[inst.known.TS.explain.holes
%%]

%%[inst.pred.ANN.explain.holes
%%]

%%[inst.pred.C.explain.holes
%%]

%%[inst.pred.CG.explain.holes
%%]

%%[inst.pred.DT.explain.holes
%%]

%%[inst.pred.E.explain.holes
%%]

%%[inst.pred.EP.explain.holes
%%]

%%[inst.pred.EX.explain.holes
%%]

%%[inst.pred.HM.explain.holes
%%]

%%[inst.pred.HS.explain.holes
%%]

%%[inst.pred.I1.explain.holes
%%]

%%[inst.pred.I2.explain.holes
%%]

%%[inst.pred.K.explain.holes
%%]

%%[inst.pred.MD.explain.holes
%%]

%%[inst.pred.NUM.explain.holes
%%]

%%[inst.pred.P.explain.holes
%%]

%%[inst.pred.TS.explain.holes
%%]

%%[inst.tvar.ANN.explain.holes
%%]

%%[inst.tvar.C.explain.holes
%%]

%%[inst.tvar.CG.explain.holes
%%]

%%[inst.tvar.DT.explain.holes
%%]

%%[inst.tvar.E.explain.holes
%%]

%%[inst.tvar.EP.explain.holes
%%]

%%[inst.tvar.EX.explain.holes
%%]

%%[inst.tvar.HM.explain.holes
%%]

%%[inst.tvar.HS.explain.holes
%%]

%%[inst.tvar.I1.explain.holes
%%]

%%[inst.tvar.I2.explain.holes
%%]

%%[inst.tvar.K.explain.holes
%%]

%%[inst.tvar.MD.explain.holes
%%]

%%[inst.tvar.NUM.explain.holes
%%]

%%[inst.tvar.P.explain.holes
%%]

%%[inst.tvar.TS.explain.holes
%%]

%%[inst.tvarb.ANN.explain.holes
%%]

%%[inst.tvarb.C.explain.holes
%%]

%%[inst.tvarb.CG.explain.holes
%%]

%%[inst.tvarb.DT.explain.holes
%%]

%%[inst.tvarb.E.explain.holes
%%]

%%[inst.tvarb.EP.explain.holes
%%]

%%[inst.tvarb.EX.explain.holes
%%]

%%[inst.tvarb.HM.explain.holes
%%]

%%[inst.tvarb.HS.explain.holes
%%]

%%[inst.tvarb.I1.explain.holes
%%]

%%[inst.tvarb.I2.explain.holes
%%]

%%[inst.tvarb.K.explain.holes
%%]

%%[inst.tvarb.MD.explain.holes
%%]

%%[inst.tvarb.NUM.explain.holes
%%]

%%[inst.tvarb.P.explain.holes
%%]

%%[inst.tvarb.TS.explain.holes
%%]

%%[inst.tvarb'.ANN.explain.holes
%%]

%%[inst.tvarb'.C.explain.holes
%%]

%%[inst.tvarb'.CG.explain.holes
%%]

%%[inst.tvarb'.DT.explain.holes
%%]

%%[inst.tvarb'.E.explain.holes
%%]

%%[inst.tvarb'.EP.explain.holes
%%]

%%[inst.tvarb'.EX.explain.holes
%%]

%%[inst.tvarb'.HM.explain.holes
%%]

%%[inst.tvarb'.HS.explain.holes
%%]

%%[inst.tvarb'.I1.explain.holes
%%]

%%[inst.tvarb'.I2.explain.holes
%%]

%%[inst.tvarb'.K.explain.holes
%%]

%%[inst.tvarb'.MD.explain.holes
%%]

%%[inst.tvarb'.NUM.explain.holes
%%]

%%[inst.tvarb'.P.explain.holes
%%]

%%[inst.tvarb'.TS.explain.holes
%%]

%%[inst.tvarv'.ANN.explain.holes
%%]

%%[inst.tvarv'.C.explain.holes
%%]

%%[inst.tvarv'.CG.explain.holes
%%]

%%[inst.tvarv'.DT.explain.holes
%%]

%%[inst.tvarv'.E.explain.holes
%%]

%%[inst.tvarv'.EP.explain.holes
%%]

%%[inst.tvarv'.EX.explain.holes
%%]

%%[inst.tvarv'.HM.explain.holes
%%]

%%[inst.tvarv'.HS.explain.holes
%%]

%%[inst.tvarv'.I1.explain.holes
%%]

%%[inst.tvarv'.I2.explain.holes
%%]

%%[inst.tvarv'.K.explain.holes
%%]

%%[inst.tvarv'.MD.explain.holes
%%]

%%[inst.tvarv'.NUM.explain.holes
%%]

%%[inst.tvarv'.P.explain.holes
%%]

%%[inst.tvarv'.TS.explain.holes
%%]

