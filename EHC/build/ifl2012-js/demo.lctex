%include lhs2TeX.fmt
%include afp.fmt
%include ruler.fmt

\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
preamble tex "%include lhs2TeX.fmt\n%include afp.fmt\n"

\end{code}
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
preamble ag "%%[0\n%include lhs2TeX.fmt\n%include afp.fmt\n%%]\n"

\end{code}
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
external Ty_Int

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.ext}{%
\label{rulerDemoRL.1.ext}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
data Expr [expr]
  view E
    |  App  [e.app]  f    :: Expr
                     a    :: Expr
    |  Int  [e.int]  int  :: Int
    |  Var  [e.var]  i    :: String
    |  Lam  [e.lam]  i    :: String
                     b    :: Expr
    |  Let  [e.let]  i    :: String
                     e    :: Expr
                     b    :: Expr

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.data}{%
\label{rulerDemoRL.3.data}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
format tex Ty_Int = Int

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.fmt.Ty_Int}{%
\label{rulerDemoRL.1.fmt.Ty_Int}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1.1}{%
\label{rulerDemoRL.1.1}%
\begin{code}
format tex Gam = Gamma
format tex gam = Gamma

format tex ty = tau
format tex pty = sigma
format tex mty = tau

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.fmt}{%
\label{rulerDemoRL.1.fmt}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
format tex tv = v

format tex cnstr.inh = Cnstr..k
format tex cnstr.syn = Cnstr
format tex cnstr     = Cnstr

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.fmt}{%
\label{rulerDemoRL.2.fmt}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
format ag cnstr     = c
format ag gam       = g

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.fmt}{%
\label{rulerDemoRL.3.fmt}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3.1}{%
\label{rulerDemoRL.3.1}%
\begin{code}
rewrite ag def  (a | Ty) -> (r | Ty) = ((a) `Ty_Arr` (r) | Ty)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rw.TyArr}{%
\label{rulerDemoRL.3.rw.TyArr}%
\chunkCmdUse{rulerDemoRL.3.1}%
}
\chunkCmdDef{rulerDemoRL.3.2}{%
\label{rulerDemoRL.3.2}%
\begin{code}
rewrite ag def  (c1 | Cnstr) (c2 | Cnstr) (v | a)
                  = (c1 |=> c2 |=> (v) | a)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rw.Cnstr}{%
\label{rulerDemoRL.3.rw.Cnstr}%
\chunkCmdUse{rulerDemoRL.3.2}%
}
\chunkCmdDef{rulerDemoRL.3.3}{%
\label{rulerDemoRL.3.3}%
\begin{code}
rewrite ag def  (c | Cnstr) (v | a) = (c |=> (v) | a)
rewrite ag def  i :-> t = ([(i,t)] | Gam)
rewrite ag def  (g1 | Gam), (g2 | Gam) = ((g1) ++ (g2) | Gam)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rw.Rest}{%
\label{rulerDemoRL.3.rw.Rest}%
\chunkCmdUse{rulerDemoRL.3.3}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
\chunkCmdUse{rulerDemoRL.3.1}%
\chunkCmdUse{rulerDemoRL.3.2}%
\chunkCmdUse{rulerDemoRL.3.3}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
viewhierarchy = E < A < AG

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.viewhierarchy}{%
\label{rulerDemoRL.1.viewhierarchy}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
viewhierarchy = E < A < AG < 3

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.viewhierarchy}{%
\label{rulerDemoRL.3.viewhierarchy}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
scheme expr =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.expr.scm}{%
\label{rulerDemoRL.1.expr.scm}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
scheme expr "Expr" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.expr.scm}{%
\label{rulerDemoRL.3.expr.scm}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  view E =
    holes [ e: Expr, gam: Gam, ty: Ty ]
    judgespec gam :- e : ty
    judgeuse tex gam :-.."e" e : ty

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.expr.scm.E}{%
\label{rulerDemoRL.1.expr.scm.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
  view A =
    holes  [ inh gam: Gam, thread cnstr: Cnstr, syn ty: Ty ]
    judgespec cnstr.inh ; gam :- e : ty ~> cnstr.syn
    judgeuse tex cnstr.inh ; gam :-.."e" e : ty ~> cnstr.syn

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.expr.scm.A}{%
\label{rulerDemoRL.2.expr.scm.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    holes [ node e: Expr | | ]

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.expr.scm.AG}{%
\label{rulerDemoRL.3.expr.scm.AG}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
ruleset expr.base scheme expr  "Expression type rules" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.expr.base.rls}{%
\label{rulerDemoRL.1.expr.base.rls}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1.1}{%
\label{rulerDemoRL.1.1}%
\begin{code}
  rule e.int =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.int}{%
\label{rulerDemoRL.1.rl.e.int}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.int "Int" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.int}{%
\label{rulerDemoRL.3.rl.e.int}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =                                   -- no premises
      -
      judge R : expr = gam :- int : Ty_Int
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.int.E}{%
\label{rulerDemoRL.1.rl.e.int.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      -
      judge R : expr
          | cnstr.syn  = cnstr..k
          | cnstr.inh  = cnstr..k

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.rl.e.int.A}{%
\label{rulerDemoRL.2.rl.e.int.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.var =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.var}{%
\label{rulerDemoRL.1.rl.e.var}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.var "Var" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.var}{%
\label{rulerDemoRL.3.rl.e.var}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge G : gamLookupIdTy = i :-> pty `elem` gam
      judge I : tyInst = ty `=` inst(pty)
      -
      judge R : expr = gam :- i : ty
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.var.E}{%
\label{rulerDemoRL.1.rl.e.var.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      -
      judge R : expr
          | cnstr.syn = cnstr.inh

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.rl.e.var.A}{%
\label{rulerDemoRL.2.rl.e.var.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.app =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.app}{%
\label{rulerDemoRL.1.rl.e.app}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.app "App" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.app}{%
\label{rulerDemoRL.3.rl.e.app}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge A : expr = gam :- a : ty.a
      judge F : expr = gam :- f : (ty.a -> ty)
      -
      judge R : expr = gam :- (f a) : ty
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.app.E}{%
\label{rulerDemoRL.1.rl.e.app.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      judge V : tvFresh  =  tv
      judge M : match    =  (ty.a -> tv) <=> (cnstr.a ty.f)
                              ~> cnstr
      judge F : expr
          | ty         = ty.f
          | cnstr.syn  = cnstr.f
      judge A : expr
          | cnstr.inh  = cnstr.f
          | cnstr.syn  = cnstr.a
      -
      judge R : expr
          | ty         = cnstr cnstr.a tv
          | cnstr.syn  = cnstr cnstr.a
\end{code}
}
\chunkCmdDef{rulerDemoRL.2.rl.e.app.A}{%
\label{rulerDemoRL.2.rl.e.app.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.33.0}{%
\label{rulerDemoRL.33.0}%
\begin{code}
    view AG =
      -
      judge R : expr
          | e = ((node 1 = f) (node 2 = a))

\end{code}
}
\chunkCmdDef{rulerDemoRL.33.rl.e.app.AG}{%
\label{rulerDemoRL.33.rl.e.app.AG}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.lam =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.lam}{%
\label{rulerDemoRL.1.rl.e.lam}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.lam "Lam" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.lam}{%
\label{rulerDemoRL.3.rl.e.lam}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge B : expr = ((i :-> ty.i) , gam) :- b : ty.b
      -
      judge R : expr = gam :- (\i -> b) : (ty.i -> ty.b)
\end{code}
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      judge V : tvFresh = tv
      judge B : expr
          | cnstr.syn = cnstr.b
          | gam = (i :-> tv) , gam
      -
      judge R : expr
          | ty = cnstr.b tv -> ty.b
          | cnstr.syn = cnstr.b
\end{code}
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.33.0}{%
\label{rulerDemoRL.33.0}%
\begin{code}
    view AG =
      -
      judge R : expr
          | e = \i -> (node 1 = b)

\end{code}
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.let =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.let}{%
\label{rulerDemoRL.1.rl.e.let}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.let "Let" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.let}{%
\label{rulerDemoRL.3.rl.e.let}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge D : expr = gam :- e : ty.e
      judge B : expr = ((i :-> pty.e), gam) :- b : ty.b
      judge G : tyGen = pty.e `=` ty.e \\ gam
      -
      judge R : expr = gam :- (let i `=` e in b) : ty.b
\end{code}
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      judge V : tvFresh = tv
      judge D : expr
          | cnstr.syn = cnstr.e
          | gam = (i :-> tv) , gam
      judge B : expr
          | cnstr.inh = cnstr.e
          | cnstr.syn = cnstr.b
      judge G : tyGen
          | gam = cnstr.e gam
      -
      judge R : expr
          | cnstr.syn = cnstr.b
\end{code}
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.33.0}{%
\label{rulerDemoRL.33.0}%
\begin{code}
    view AG =
      -
      judge R : expr
          | e = let i `=` (node 1 = e) in (node 2 = b)

\end{code}
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
relation match =
  view A =
    holes [ ty.l: Ty, ty.r: Ty | | cnstr: Cnstr ]
    judgespec ty.l <=> ty.r ~> cnstr
    judgeuse ag (cnstr,mtErrs) `=` (ty.l) <=> (ty.r)

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.match}{%
\label{rulerDemoRL.2.match}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
relation gamLookupIdTy =
  view E =
    holes [ nm: Nm, gam: Gam, ty: Ty ]
    judgespec nm :-> ty `elem` gam
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.gamLookupIdTy}{%
\label{rulerDemoRL.1.gamLookupIdTy}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    holes [ nm: Nm, gam: Gam | | ty: Ty ]
    judgeuse ag (ty,nmErrs) `=` gamLookup nm gam

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.gamLookupIdTy}{%
\label{rulerDemoRL.3.gamLookupIdTy}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
relation tvFresh =
  view A =
    holes [ | | tv: Ty ]
    judgespec tv
    judgeuse tex tv (text "fresh")
    judgeuse ag tv `=` Ty_Var unique

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.tvFresh}{%
\label{rulerDemoRL.2.tvFresh}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
relation tyInst =
  view E =
    holes [ | ty: Ty, ty.i: Ty | ]
    judgespec ty.i `=` inst(ty)
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.tyInst}{%
\label{rulerDemoRL.1.tyInst}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    holes [ ty: Ty | | ty.i: Ty ]
    judgeuse ag ty.i `=` tyInst unique (ty)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.tyInst}{%
\label{rulerDemoRL.3.tyInst}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
relation tyGen =
  view E =
    holes [ ty: Ty, gam: Gam | | pty: Ty ]
    judgespec pty `=` ty \\ gam
    judgeuse tex pty `=` forall v..._ `.` ty, ^^^ v..._ `notElem` ftv(gam)
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.tyGen}{%
\label{rulerDemoRL.1.tyGen}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
  view A =
    judgeuse tex pty `=` forall (ftv(ty) \\ ftv(gam)) `.` ty
\end{code}
}
\chunkCmdDef{rulerDemoRL.2.tyGen}{%
\label{rulerDemoRL.2.tyGen}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    judgeuse ag  (retain pty) `=` mkTyAll (ftv(ty) \\ ftv(gam)) (ty)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.tyGen}{%
\label{rulerDemoRL.3.tyGen}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
preamble tex "%include lhs2TeX.fmt\n%include afp.fmt\n"

\end{code}
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
preamble ag "%%[0\n%include lhs2TeX.fmt\n%include afp.fmt\n%%]\n"

\end{code}
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
external Ty_Int

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.ext}{%
\label{rulerDemoRL.1.ext}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
data Expr [expr]
  view E
    |  App  [e.app]  f    :: Expr
                     a    :: Expr
    |  Int  [e.int]  int  :: Int
    |  Var  [e.var]  i    :: String
    |  Lam  [e.lam]  i    :: String
                     b    :: Expr
    |  Let  [e.let]  i    :: String
                     e    :: Expr
                     b    :: Expr

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.data}{%
\label{rulerDemoRL.3.data}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
format tex Ty_Int = Int

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.fmt.Ty_Int}{%
\label{rulerDemoRL.1.fmt.Ty_Int}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1.1}{%
\label{rulerDemoRL.1.1}%
\begin{code}
format tex Gam = Gamma
format tex gam = Gamma

format tex ty = tau
format tex pty = sigma
format tex mty = tau

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.fmt}{%
\label{rulerDemoRL.1.fmt}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
format tex tv = v

format tex cnstr.inh = Cnstr..k
format tex cnstr.syn = Cnstr
format tex cnstr     = Cnstr

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.fmt}{%
\label{rulerDemoRL.2.fmt}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
format ag cnstr     = c
format ag gam       = g

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.fmt}{%
\label{rulerDemoRL.3.fmt}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3.1}{%
\label{rulerDemoRL.3.1}%
\begin{code}
rewrite ag def  (a | Ty) -> (r | Ty) = ((a) `Ty_Arr` (r) | Ty)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rw.TyArr}{%
\label{rulerDemoRL.3.rw.TyArr}%
\chunkCmdUse{rulerDemoRL.3.1}%
}
\chunkCmdDef{rulerDemoRL.3.2}{%
\label{rulerDemoRL.3.2}%
\begin{code}
rewrite ag def  (c1 | Cnstr) (c2 | Cnstr) (v | a)
                  = (c1 |=> c2 |=> (v) | a)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rw.Cnstr}{%
\label{rulerDemoRL.3.rw.Cnstr}%
\chunkCmdUse{rulerDemoRL.3.2}%
}
\chunkCmdDef{rulerDemoRL.3.3}{%
\label{rulerDemoRL.3.3}%
\begin{code}
rewrite ag def  (c | Cnstr) (v | a) = (c |=> (v) | a)
rewrite ag def  i :-> t = ([(i,t)] | Gam)
rewrite ag def  (g1 | Gam), (g2 | Gam) = ((g1) ++ (g2) | Gam)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rw.Rest}{%
\label{rulerDemoRL.3.rw.Rest}%
\chunkCmdUse{rulerDemoRL.3.3}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
\chunkCmdUse{rulerDemoRL.3.1}%
\chunkCmdUse{rulerDemoRL.3.2}%
\chunkCmdUse{rulerDemoRL.3.3}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
viewhierarchy = E < A < AG

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.viewhierarchy}{%
\label{rulerDemoRL.1.viewhierarchy}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
viewhierarchy = E < A < AG < 3

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.viewhierarchy}{%
\label{rulerDemoRL.3.viewhierarchy}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
scheme expr =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.expr.scm}{%
\label{rulerDemoRL.1.expr.scm}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
scheme expr "Expr" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.expr.scm}{%
\label{rulerDemoRL.3.expr.scm}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  view E =
    holes [ e: Expr, gam: Gam, ty: Ty ]
    judgespec gam :- e : ty
    judgeuse tex gam :-.."e" e : ty

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.expr.scm.E}{%
\label{rulerDemoRL.1.expr.scm.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
  view A =
    holes  [ inh gam: Gam, thread cnstr: Cnstr, syn ty: Ty ]
    judgespec cnstr.inh ; gam :- e : ty ~> cnstr.syn
    judgeuse tex cnstr.inh ; gam :-.."e" e : ty ~> cnstr.syn

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.expr.scm.A}{%
\label{rulerDemoRL.2.expr.scm.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    holes [ node e: Expr | | ]

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.expr.scm.AG}{%
\label{rulerDemoRL.3.expr.scm.AG}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
ruleset expr.base scheme expr  "Expression type rules" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.expr.base.rls}{%
\label{rulerDemoRL.1.expr.base.rls}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1.1}{%
\label{rulerDemoRL.1.1}%
\begin{code}
  rule e.int =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.int}{%
\label{rulerDemoRL.1.rl.e.int}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.int "Int" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.int}{%
\label{rulerDemoRL.3.rl.e.int}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =                                   -- no premises
      -
      judge R : expr = gam :- int : Ty_Int
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.int.E}{%
\label{rulerDemoRL.1.rl.e.int.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      -
      judge R : expr
          | cnstr.syn  = cnstr..k
          | cnstr.inh  = cnstr..k

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.rl.e.int.A}{%
\label{rulerDemoRL.2.rl.e.int.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.var =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.var}{%
\label{rulerDemoRL.1.rl.e.var}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.var "Var" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.var}{%
\label{rulerDemoRL.3.rl.e.var}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge G : gamLookupIdTy = i :-> pty `elem` gam
      judge I : tyInst = ty `=` inst(pty)
      -
      judge R : expr = gam :- i : ty
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.var.E}{%
\label{rulerDemoRL.1.rl.e.var.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      -
      judge R : expr
          | cnstr.syn = cnstr.inh

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.rl.e.var.A}{%
\label{rulerDemoRL.2.rl.e.var.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.app =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.app}{%
\label{rulerDemoRL.1.rl.e.app}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.app "App" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.app}{%
\label{rulerDemoRL.3.rl.e.app}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge A : expr = gam :- a : ty.a
      judge F : expr = gam :- f : (ty.a -> ty)
      -
      judge R : expr = gam :- (f a) : ty
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.app.E}{%
\label{rulerDemoRL.1.rl.e.app.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      judge V : tvFresh  =  tv
      judge M : match    =  (ty.a -> tv) <=> (cnstr.a ty.f)
                              ~> cnstr
      judge F : expr
          | ty         = ty.f
          | cnstr.syn  = cnstr.f
      judge A : expr
          | cnstr.inh  = cnstr.f
          | cnstr.syn  = cnstr.a
      -
      judge R : expr
          | ty         = cnstr cnstr.a tv
          | cnstr.syn  = cnstr cnstr.a
\end{code}
}
\chunkCmdDef{rulerDemoRL.2.rl.e.app.A}{%
\label{rulerDemoRL.2.rl.e.app.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.33.0}{%
\label{rulerDemoRL.33.0}%
\begin{code}
    view AG =
      -
      judge R : expr
          | e = ((node 1 = f) (node 2 = a))

\end{code}
}
\chunkCmdDef{rulerDemoRL.33.rl.e.app.AG}{%
\label{rulerDemoRL.33.rl.e.app.AG}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.lam =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.lam}{%
\label{rulerDemoRL.1.rl.e.lam}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.lam "Lam" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.lam}{%
\label{rulerDemoRL.3.rl.e.lam}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge B : expr = ((i :-> ty.i) , gam) :- b : ty.b
      -
      judge R : expr = gam :- (\i -> b) : (ty.i -> ty.b)
\end{code}
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      judge V : tvFresh = tv
      judge B : expr
          | cnstr.syn = cnstr.b
          | gam = (i :-> tv) , gam
      -
      judge R : expr
          | ty = cnstr.b tv -> ty.b
          | cnstr.syn = cnstr.b
\end{code}
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.33.0}{%
\label{rulerDemoRL.33.0}%
\begin{code}
    view AG =
      -
      judge R : expr
          | e = \i -> (node 1 = b)

\end{code}
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.let =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.let}{%
\label{rulerDemoRL.1.rl.e.let}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.let "Let" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.let}{%
\label{rulerDemoRL.3.rl.e.let}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge D : expr = gam :- e : ty.e
      judge B : expr = ((i :-> pty.e), gam) :- b : ty.b
      judge G : tyGen = pty.e `=` ty.e \\ gam
      -
      judge R : expr = gam :- (let i `=` e in b) : ty.b
\end{code}
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      judge V : tvFresh = tv
      judge D : expr
          | cnstr.syn = cnstr.e
          | gam = (i :-> tv) , gam
      judge B : expr
          | cnstr.inh = cnstr.e
          | cnstr.syn = cnstr.b
      judge G : tyGen
          | gam = cnstr.e gam
      -
      judge R : expr
          | cnstr.syn = cnstr.b
\end{code}
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.33.0}{%
\label{rulerDemoRL.33.0}%
\begin{code}
    view AG =
      -
      judge R : expr
          | e = let i `=` (node 1 = e) in (node 2 = b)

\end{code}
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
relation match =
  view A =
    holes [ ty.l: Ty, ty.r: Ty | | cnstr: Cnstr ]
    judgespec ty.l <=> ty.r ~> cnstr
    judgeuse ag (cnstr,mtErrs) `=` (ty.l) <=> (ty.r)

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.match}{%
\label{rulerDemoRL.2.match}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
relation gamLookupIdTy =
  view E =
    holes [ nm: Nm, gam: Gam, ty: Ty ]
    judgespec nm :-> ty `elem` gam
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.gamLookupIdTy}{%
\label{rulerDemoRL.1.gamLookupIdTy}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    holes [ nm: Nm, gam: Gam | | ty: Ty ]
    judgeuse ag (ty,nmErrs) `=` gamLookup nm gam

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.gamLookupIdTy}{%
\label{rulerDemoRL.3.gamLookupIdTy}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
relation tvFresh =
  view A =
    holes [ | | tv: Ty ]
    judgespec tv
    judgeuse tex tv (text "fresh")
    judgeuse ag tv `=` Ty_Var unique

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.tvFresh}{%
\label{rulerDemoRL.2.tvFresh}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
relation tyInst =
  view E =
    holes [ | ty: Ty, ty.i: Ty | ]
    judgespec ty.i `=` inst(ty)
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.tyInst}{%
\label{rulerDemoRL.1.tyInst}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    holes [ ty: Ty | | ty.i: Ty ]
    judgeuse ag ty.i `=` tyInst unique (ty)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.tyInst}{%
\label{rulerDemoRL.3.tyInst}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
relation tyGen =
  view E =
    holes [ ty: Ty, gam: Gam | | pty: Ty ]
    judgespec pty `=` ty \\ gam
    judgeuse tex pty `=` forall v..._ `.` ty, ^^^ v..._ `notElem` ftv(gam)
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.tyGen}{%
\label{rulerDemoRL.1.tyGen}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
  view A =
    judgeuse tex pty `=` forall (ftv(ty) \\ ftv(gam)) `.` ty
\end{code}
}
\chunkCmdDef{rulerDemoRL.2.tyGen}{%
\label{rulerDemoRL.2.tyGen}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    judgeuse ag  (retain pty) `=` mkTyAll (ftv(ty) \\ ftv(gam)) (ty)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.tyGen}{%
\label{rulerDemoRL.3.tyGen}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
preamble tex "%include lhs2TeX.fmt\n%include afp.fmt\n"

\end{code}
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
preamble ag "%%[0\n%include lhs2TeX.fmt\n%include afp.fmt\n%%]\n"

\end{code}
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
external Ty_Int

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.ext}{%
\label{rulerDemoRL.1.ext}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
data Expr [expr]
  view E
    |  App  [e.app]  f    :: Expr
                     a    :: Expr
    |  Int  [e.int]  int  :: Int
    |  Var  [e.var]  i    :: String
    |  Lam  [e.lam]  i    :: String
                     b    :: Expr
    |  Let  [e.let]  i    :: String
                     e    :: Expr
                     b    :: Expr

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.data}{%
\label{rulerDemoRL.3.data}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
format tex Ty_Int = Int

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.fmt.Ty_Int}{%
\label{rulerDemoRL.1.fmt.Ty_Int}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1.1}{%
\label{rulerDemoRL.1.1}%
\begin{code}
format tex Gam = Gamma
format tex gam = Gamma

format tex ty = tau
format tex pty = sigma
format tex mty = tau

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.fmt}{%
\label{rulerDemoRL.1.fmt}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
format tex tv = v

format tex cnstr.inh = Cnstr..k
format tex cnstr.syn = Cnstr
format tex cnstr     = Cnstr

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.fmt}{%
\label{rulerDemoRL.2.fmt}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
format ag cnstr     = c
format ag gam       = g

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.fmt}{%
\label{rulerDemoRL.3.fmt}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3.1}{%
\label{rulerDemoRL.3.1}%
\begin{code}
rewrite ag def  (a | Ty) -> (r | Ty) = ((a) `Ty_Arr` (r) | Ty)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rw.TyArr}{%
\label{rulerDemoRL.3.rw.TyArr}%
\chunkCmdUse{rulerDemoRL.3.1}%
}
\chunkCmdDef{rulerDemoRL.3.2}{%
\label{rulerDemoRL.3.2}%
\begin{code}
rewrite ag def  (c1 | Cnstr) (c2 | Cnstr) (v | a)
                  = (c1 |=> c2 |=> (v) | a)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rw.Cnstr}{%
\label{rulerDemoRL.3.rw.Cnstr}%
\chunkCmdUse{rulerDemoRL.3.2}%
}
\chunkCmdDef{rulerDemoRL.3.3}{%
\label{rulerDemoRL.3.3}%
\begin{code}
rewrite ag def  (c | Cnstr) (v | a) = (c |=> (v) | a)
rewrite ag def  i :-> t = ([(i,t)] | Gam)
rewrite ag def  (g1 | Gam), (g2 | Gam) = ((g1) ++ (g2) | Gam)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rw.Rest}{%
\label{rulerDemoRL.3.rw.Rest}%
\chunkCmdUse{rulerDemoRL.3.3}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
\chunkCmdUse{rulerDemoRL.3.1}%
\chunkCmdUse{rulerDemoRL.3.2}%
\chunkCmdUse{rulerDemoRL.3.3}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
viewhierarchy = E < A < AG

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.viewhierarchy}{%
\label{rulerDemoRL.1.viewhierarchy}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
viewhierarchy = E < A < AG < 3

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.viewhierarchy}{%
\label{rulerDemoRL.3.viewhierarchy}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
scheme expr =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.expr.scm}{%
\label{rulerDemoRL.1.expr.scm}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
scheme expr "Expr" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.expr.scm}{%
\label{rulerDemoRL.3.expr.scm}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  view E =
    holes [ e: Expr, gam: Gam, ty: Ty ]
    judgespec gam :- e : ty
    judgeuse tex gam :-.."e" e : ty

\end{code}
}
\chunkCmdDef{rulerDemoRL.1.expr.scm.E}{%
\label{rulerDemoRL.1.expr.scm.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
  view A =
    holes  [ inh gam: Gam, thread cnstr: Cnstr, syn ty: Ty ]
    judgespec cnstr.inh ; gam :- e : ty ~> cnstr.syn
    judgeuse tex cnstr.inh ; gam :-.."e" e : ty ~> cnstr.syn

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.expr.scm.A}{%
\label{rulerDemoRL.2.expr.scm.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    holes [ node e: Expr | | ]

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.expr.scm.AG}{%
\label{rulerDemoRL.3.expr.scm.AG}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
ruleset expr.base scheme expr  "Expression type rules" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.expr.base.rls}{%
\label{rulerDemoRL.1.expr.base.rls}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1.1}{%
\label{rulerDemoRL.1.1}%
\begin{code}
  rule e.int =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.int}{%
\label{rulerDemoRL.1.rl.e.int}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
\chunkCmdUse{rulerDemoRL.1.1}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.int "Int" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.int}{%
\label{rulerDemoRL.3.rl.e.int}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =                                   -- no premises
      -
      judge R : expr = gam :- int : Ty_Int
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.int.E}{%
\label{rulerDemoRL.1.rl.e.int.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      -
      judge R : expr
          | cnstr.syn  = cnstr..k
          | cnstr.inh  = cnstr..k

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.rl.e.int.A}{%
\label{rulerDemoRL.2.rl.e.int.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.var =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.var}{%
\label{rulerDemoRL.1.rl.e.var}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.var "Var" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.var}{%
\label{rulerDemoRL.3.rl.e.var}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge G : gamLookupIdTy = i :-> pty `elem` gam
      judge I : tyInst = ty `=` inst(pty)
      -
      judge R : expr = gam :- i : ty
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.var.E}{%
\label{rulerDemoRL.1.rl.e.var.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      -
      judge R : expr
          | cnstr.syn = cnstr.inh

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.rl.e.var.A}{%
\label{rulerDemoRL.2.rl.e.var.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.app =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.app}{%
\label{rulerDemoRL.1.rl.e.app}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.app "App" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.app}{%
\label{rulerDemoRL.3.rl.e.app}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge A : expr = gam :- a : ty.a
      judge F : expr = gam :- f : (ty.a -> ty)
      -
      judge R : expr = gam :- (f a) : ty
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.app.E}{%
\label{rulerDemoRL.1.rl.e.app.E}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      judge V : tvFresh  =  tv
      judge M : match    =  (ty.a -> tv) <=> (cnstr.a ty.f)
                              ~> cnstr
      judge F : expr
          | ty         = ty.f
          | cnstr.syn  = cnstr.f
      judge A : expr
          | cnstr.inh  = cnstr.f
          | cnstr.syn  = cnstr.a
      -
      judge R : expr
          | ty         = cnstr cnstr.a tv
          | cnstr.syn  = cnstr cnstr.a
\end{code}
}
\chunkCmdDef{rulerDemoRL.2.rl.e.app.A}{%
\label{rulerDemoRL.2.rl.e.app.A}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.33.0}{%
\label{rulerDemoRL.33.0}%
\begin{code}
    view AG =
      -
      judge R : expr
          | e = ((node 1 = f) (node 2 = a))

\end{code}
}
\chunkCmdDef{rulerDemoRL.33.rl.e.app.AG}{%
\label{rulerDemoRL.33.rl.e.app.AG}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.lam =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.lam}{%
\label{rulerDemoRL.1.rl.e.lam}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.lam "Lam" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.lam}{%
\label{rulerDemoRL.3.rl.e.lam}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge B : expr = ((i :-> ty.i) , gam) :- b : ty.b
      -
      judge R : expr = gam :- (\i -> b) : (ty.i -> ty.b)
\end{code}
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      judge V : tvFresh = tv
      judge B : expr
          | cnstr.syn = cnstr.b
          | gam = (i :-> tv) , gam
      -
      judge R : expr
          | ty = cnstr.b tv -> ty.b
          | cnstr.syn = cnstr.b
\end{code}
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.33.0}{%
\label{rulerDemoRL.33.0}%
\begin{code}
    view AG =
      -
      judge R : expr
          | e = \i -> (node 1 = b)

\end{code}
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
  rule e.let =
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.rl.e.let}{%
\label{rulerDemoRL.1.rl.e.let}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  rule e.let "Let" =
\end{code}
}
\chunkCmdDef{rulerDemoRL.3.rl.e.let}{%
\label{rulerDemoRL.3.rl.e.let}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
    view E =
      judge D : expr = gam :- e : ty.e
      judge B : expr = ((i :-> pty.e), gam) :- b : ty.b
      judge G : tyGen = pty.e `=` ty.e \\ gam
      -
      judge R : expr = gam :- (let i `=` e in b) : ty.b
\end{code}
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
    view A =
      judge V : tvFresh = tv
      judge D : expr
          | cnstr.syn = cnstr.e
          | gam = (i :-> tv) , gam
      judge B : expr
          | cnstr.inh = cnstr.e
          | cnstr.syn = cnstr.b
      judge G : tyGen
          | gam = cnstr.e gam
      -
      judge R : expr
          | cnstr.syn = cnstr.b
\end{code}
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.33.0}{%
\label{rulerDemoRL.33.0}%
\begin{code}
    view AG =
      -
      judge R : expr
          | e = let i `=` (node 1 = e) in (node 2 = b)

\end{code}
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.33}{%
\label{rulerDemoRL.33}%
\chunkCmdUse{rulerDemoRL.33.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
relation match =
  view A =
    holes [ ty.l: Ty, ty.r: Ty | | cnstr: Cnstr ]
    judgespec ty.l <=> ty.r ~> cnstr
    judgeuse ag (cnstr,mtErrs) `=` (ty.l) <=> (ty.r)

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.match}{%
\label{rulerDemoRL.2.match}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
relation gamLookupIdTy =
  view E =
    holes [ nm: Nm, gam: Gam, ty: Ty ]
    judgespec nm :-> ty `elem` gam
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.gamLookupIdTy}{%
\label{rulerDemoRL.1.gamLookupIdTy}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    holes [ nm: Nm, gam: Gam | | ty: Ty ]
    judgeuse ag (ty,nmErrs) `=` gamLookup nm gam

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.gamLookupIdTy}{%
\label{rulerDemoRL.3.gamLookupIdTy}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
relation tvFresh =
  view A =
    holes [ | | tv: Ty ]
    judgespec tv
    judgeuse tex tv (text "fresh")
    judgeuse ag tv `=` Ty_Var unique

\end{code}
}
\chunkCmdDef{rulerDemoRL.2.tvFresh}{%
\label{rulerDemoRL.2.tvFresh}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
relation tyInst =
  view E =
    holes [ | ty: Ty, ty.i: Ty | ]
    judgespec ty.i `=` inst(ty)
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.tyInst}{%
\label{rulerDemoRL.1.tyInst}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    holes [ ty: Ty | | ty.i: Ty ]
    judgeuse ag ty.i `=` tyInst unique (ty)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.tyInst}{%
\label{rulerDemoRL.3.tyInst}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.1.0}{%
\label{rulerDemoRL.1.0}%
\begin{code}
relation tyGen =
  view E =
    holes [ ty: Ty, gam: Gam | | pty: Ty ]
    judgespec pty `=` ty \\ gam
    judgeuse tex pty `=` forall v..._ `.` ty, ^^^ v..._ `notElem` ftv(gam)
\end{code}
}
\chunkCmdDef{rulerDemoRL.1.tyGen}{%
\label{rulerDemoRL.1.tyGen}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.1}{%
\label{rulerDemoRL.1}%
\chunkCmdUse{rulerDemoRL.1.0}%
}
\chunkCmdDef{rulerDemoRL.2.0}{%
\label{rulerDemoRL.2.0}%
\begin{code}
  view A =
    judgeuse tex pty `=` forall (ftv(ty) \\ ftv(gam)) `.` ty
\end{code}
}
\chunkCmdDef{rulerDemoRL.2.tyGen}{%
\label{rulerDemoRL.2.tyGen}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.2}{%
\label{rulerDemoRL.2}%
\chunkCmdUse{rulerDemoRL.2.0}%
}
\chunkCmdDef{rulerDemoRL.3.0}{%
\label{rulerDemoRL.3.0}%
\begin{code}
  view AG =
    judgeuse ag  (retain pty) `=` mkTyAll (ftv(ty) \\ ftv(gam)) (ty)

\end{code}
}
\chunkCmdDef{rulerDemoRL.3.tyGen}{%
\label{rulerDemoRL.3.tyGen}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.3}{%
\label{rulerDemoRL.3}%
\chunkCmdUse{rulerDemoRL.3.0}%
}
\chunkCmdDef{rulerDemoRL.4}{%
}
\chunkCmdDef{rulerDemoRL.5}{%
}
\chunkCmdDef{rulerDemoRL.6}{%
}
\chunkCmdDef{rulerDemoRL.7}{%
}
\chunkCmdDef{rulerDemoRL.8}{%
}
\chunkCmdDef{rulerDemoRL.9}{%
}
\chunkCmdDef{rulerDemoRL.10}{%
}
\chunkCmdDef{rulerDemoRL.11}{%
}
\chunkCmdDef{rulerDemoRL.12}{%
}
\chunkCmdDef{rulerDemoRL.13}{%
}
\chunkCmdDef{rulerDemoRL.14}{%
}
\chunkCmdDef{rulerDemoRL.15}{%
}
\chunkCmdDef{rulerDemoRL.16}{%
}
\chunkCmdDef{rulerDemoRL.17}{%
}
\chunkCmdDef{rulerDemoRL.18}{%
}
\chunkCmdDef{rulerDemoRL.19}{%
}
\chunkCmdDef{rulerDemoRL.20}{%
}
\chunkCmdDef{rulerDemoRL.21}{%
}
\chunkCmdDef{rulerDemoRL.22}{%
}
\chunkCmdDef{rulerDemoRL.23}{%
}
\chunkCmdDef{rulerDemoRL.24}{%
}
\chunkCmdDef{rulerDemoRL.25}{%
}
\chunkCmdDef{rulerDemoRL.26}{%
}
\chunkCmdDef{rulerDemoRL.27}{%
}
\chunkCmdDef{rulerDemoRL.28}{%
}
\chunkCmdDef{rulerDemoRL.29}{%
}
\chunkCmdDef{rulerDemoRL.30}{%
}
\chunkCmdDef{rulerDemoRL.31}{%
}
\chunkCmdDef{rulerDemoRL.32}{%
}
